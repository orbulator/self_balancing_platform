
self_balancing_platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004154  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08004350  08004350  00005350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  000061cc  2**0
                  CONTENTS
  4 .ARM          00000008  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d0  080046d0  000061cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080046d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001cc  080048a4  000061cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  080048a4  00006474  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000950f  00000000  00000000  00006202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001157  00000000  00000000  0000f711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00010868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000513  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd50  00000000  00000000  0001140b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089d1  00000000  00000000  0003115b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff4d4  00000000  00000000  00039b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bcc  00000000  00000000  00139044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001cc 	.word	0x200001cc
 8000214:	00000000 	.word	0x00000000
 8000218:	08004334 	.word	0x08004334

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001d0 	.word	0x200001d0
 8000234:	08004334 	.word	0x08004334

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <main>:
/* Init Functions */
void init_clks();
void init_LPUART1();
void init_adc1();

int main() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0a0      	sub	sp, #128	@ 0x80
 8000b74:	af00      	add	r7, sp, #0
	init_clks();
 8000b76:	f000 f94b 	bl	8000e10 <init_clks>
	init_LPUART1();
 8000b7a:	f000 f989 	bl	8000e90 <init_LPUART1>
	init_adc1();
 8000b7e:	f000 f9d1 	bl	8000f24 <init_adc1>

	uint16_t x = 0; // x coordinate of touch panel
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	uint16_t y = 0; // y coordinate of touch panel
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

	while (1)	{

		get_xy(&x, &y);
 8000b8e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000b92:	f107 037e 	add.w	r3, r7, #126	@ 0x7e
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f833 	bl	8000c04 <get_xy>

		/* Print to LPUART 1 921600 baud rate */
		char str[80] = "$";
 8000b9e:	2324      	movs	r3, #36	@ 0x24
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ba2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba6:	224c      	movs	r2, #76	@ 0x4c
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fad1 	bl	8002152 <memset>
		char src[40];
		sprintf(src, "%d %d", x, y);
 8000bb0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8000bba:	1d38      	adds	r0, r7, #4
 8000bbc:	490f      	ldr	r1, [pc, #60]	@ (8000bfc <main+0x8c>)
 8000bbe:	f001 fa65 	bl	800208c <siprintf>
		strcat(str, src);
 8000bc2:	1d3a      	adds	r2, r7, #4
 8000bc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 fac9 	bl	8002162 <strcat>
		strcat(str, ";");
 8000bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fb2f 	bl	8000238 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be2:	4413      	add	r3, r2
 8000be4:	4906      	ldr	r1, [pc, #24]	@ (8000c00 <main+0x90>)
 8000be6:	461a      	mov	r2, r3
 8000be8:	460b      	mov	r3, r1
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	8013      	strh	r3, [r2, #0]
		txLPUART1(str);
 8000bee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f8e2 	bl	8000dbc <txLPUART1>
	while (1)	{
 8000bf8:	bf00      	nop
 8000bfa:	e7c8      	b.n	8000b8e <main+0x1e>
 8000bfc:	08004350 	.word	0x08004350
 8000c00:	08004358 	.word	0x08004358

08000c04 <get_xy>:
 * 		x+ ----> PD3 & ADC_CH2 PC1
 * 		y+ ----> PD4 & ADC_CH1 PC0
 * 		x- ----> PD5
 * 		y- ----> PD6
 */
void get_xy(uint16_t* x, uint16_t* y) {
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	RCC->AHB2ENR |= 1 << 3;		// turn on clock gpiod
 8000c0e:	4b68      	ldr	r3, [pc, #416]	@ (8000db0 <get_xy+0x1ac>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a67      	ldr	r2, [pc, #412]	@ (8000db0 <get_xy+0x1ac>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* measure x axis voltage */
	bitclear(GPIOD->MODER, 8);		// set y+ PD4 tristate
 8000c1a:	4b66      	ldr	r3, [pc, #408]	@ (8000db4 <get_xy+0x1b0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a65      	ldr	r2, [pc, #404]	@ (8000db4 <get_xy+0x1b0>)
 8000c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c24:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 9);
 8000c26:	4b63      	ldr	r3, [pc, #396]	@ (8000db4 <get_xy+0x1b0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a62      	ldr	r2, [pc, #392]	@ (8000db4 <get_xy+0x1b0>)
 8000c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000c30:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 4);
 8000c32:	4b60      	ldr	r3, [pc, #384]	@ (8000db4 <get_xy+0x1b0>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a5f      	ldr	r2, [pc, #380]	@ (8000db4 <get_xy+0x1b0>)
 8000c38:	f023 0310 	bic.w	r3, r3, #16
 8000c3c:	6153      	str	r3, [r2, #20]

	bitclear(GPIOD->MODER, 12);		// set y- PD6 tristate
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <get_xy+0x1b0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a5c      	ldr	r2, [pc, #368]	@ (8000db4 <get_xy+0x1b0>)
 8000c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c48:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 13);
 8000c4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000db4 <get_xy+0x1b0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a59      	ldr	r2, [pc, #356]	@ (8000db4 <get_xy+0x1b0>)
 8000c50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000c54:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 6);
 8000c56:	4b57      	ldr	r3, [pc, #348]	@ (8000db4 <get_xy+0x1b0>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a56      	ldr	r2, [pc, #344]	@ (8000db4 <get_xy+0x1b0>)
 8000c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c60:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 6);		// set x+ PD3 out
 8000c62:	4b54      	ldr	r3, [pc, #336]	@ (8000db4 <get_xy+0x1b0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a53      	ldr	r2, [pc, #332]	@ (8000db4 <get_xy+0x1b0>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c6c:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 7);
 8000c6e:	4b51      	ldr	r3, [pc, #324]	@ (8000db4 <get_xy+0x1b0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a50      	ldr	r2, [pc, #320]	@ (8000db4 <get_xy+0x1b0>)
 8000c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c78:	6013      	str	r3, [r2, #0]
	bitset(GPIOD->ODR, 3);			// set x+ PD3  high (3.3v)
 8000c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8000db4 <get_xy+0x1b0>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a4d      	ldr	r2, [pc, #308]	@ (8000db4 <get_xy+0x1b0>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 10);		// set x- PD5 out
 8000c86:	4b4b      	ldr	r3, [pc, #300]	@ (8000db4 <get_xy+0x1b0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8000db4 <get_xy+0x1b0>)
 8000c8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c90:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 11);
 8000c92:	4b48      	ldr	r3, [pc, #288]	@ (8000db4 <get_xy+0x1b0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a47      	ldr	r2, [pc, #284]	@ (8000db4 <get_xy+0x1b0>)
 8000c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000c9c:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 5);		// set x- PD5  low
 8000c9e:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <get_xy+0x1b0>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a44      	ldr	r2, [pc, #272]	@ (8000db4 <get_xy+0x1b0>)
 8000ca4:	f023 0320 	bic.w	r3, r3, #32
 8000ca8:	6153      	str	r3, [r2, #20]

	bitset(ADC1->CR, 2);					// Start ADC conversion
 8000caa:	4b43      	ldr	r3, [pc, #268]	@ (8000db8 <get_xy+0x1b4>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	4a42      	ldr	r2, [pc, #264]	@ (8000db8 <get_xy+0x1b4>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6093      	str	r3, [r2, #8]
	while (bitcheck(ADC1->ISR, 2) == 0) ; 	// wait for conversion complete
 8000cb6:	bf00      	nop
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8000db8 <get_xy+0x1b4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f9      	beq.n	8000cb8 <get_xy+0xb4>
	*x = ADC1->DR & 0xfff;				// read adc val (clears EOC flag)
 8000cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <get_xy+0x1b4>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	801a      	strh	r2, [r3, #0]

	/* measure y axis voltage */
	bitclear(GPIOD->MODER, 6);		// set x+ PD3 tristate
 8000cd4:	4b37      	ldr	r3, [pc, #220]	@ (8000db4 <get_xy+0x1b0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a36      	ldr	r2, [pc, #216]	@ (8000db4 <get_xy+0x1b0>)
 8000cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cde:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 7);
 8000ce0:	4b34      	ldr	r3, [pc, #208]	@ (8000db4 <get_xy+0x1b0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a33      	ldr	r2, [pc, #204]	@ (8000db4 <get_xy+0x1b0>)
 8000ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000cea:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 3);
 8000cec:	4b31      	ldr	r3, [pc, #196]	@ (8000db4 <get_xy+0x1b0>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a30      	ldr	r2, [pc, #192]	@ (8000db4 <get_xy+0x1b0>)
 8000cf2:	f023 0308 	bic.w	r3, r3, #8
 8000cf6:	6153      	str	r3, [r2, #20]

	bitclear(GPIOD->MODER, 10);		// set x- PD5 tristate
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <get_xy+0x1b0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8000db4 <get_xy+0x1b0>)
 8000cfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d02:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 11);
 8000d04:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <get_xy+0x1b0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2a      	ldr	r2, [pc, #168]	@ (8000db4 <get_xy+0x1b0>)
 8000d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d0e:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 5);
 8000d10:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <get_xy+0x1b0>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	4a27      	ldr	r2, [pc, #156]	@ (8000db4 <get_xy+0x1b0>)
 8000d16:	f023 0320 	bic.w	r3, r3, #32
 8000d1a:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 8);		// set y+ PD4 out
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <get_xy+0x1b0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a24      	ldr	r2, [pc, #144]	@ (8000db4 <get_xy+0x1b0>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d26:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 9);
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <get_xy+0x1b0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <get_xy+0x1b0>)
 8000d2e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d32:	6013      	str	r3, [r2, #0]
	bitset(GPIOD->ODR, 4);			// set D4 (y+) high
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <get_xy+0x1b0>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a1e      	ldr	r2, [pc, #120]	@ (8000db4 <get_xy+0x1b0>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 12);		// set y- PD6 out
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <get_xy+0x1b0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1b      	ldr	r2, [pc, #108]	@ (8000db4 <get_xy+0x1b0>)
 8000d46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d4a:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 13);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <get_xy+0x1b0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <get_xy+0x1b0>)
 8000d52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000d56:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR,6);			// set D6 (y-) low
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <get_xy+0x1b0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	4a15      	ldr	r2, [pc, #84]	@ (8000db4 <get_xy+0x1b0>)
 8000d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d62:	6153      	str	r3, [r2, #20]

	while (bitcheck(ADC1->ISR, 2) == 0) ; 	// wait for conversion complete
 8000d64:	bf00      	nop
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <get_xy+0x1b4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f9      	beq.n	8000d66 <get_xy+0x162>
	*y = ADC1->DR & 0xfff;				// read adc val (clears EOC flag)
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <get_xy+0x1b4>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	801a      	strh	r2, [r3, #0]
	delay_ms(1);
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e002      	b.n	8000d8e <get_xy+0x18a>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000d94:	dbf8      	blt.n	8000d88 <get_xy+0x184>
	bitclear(ADC1->ISR, 3);					// clear EOS flag
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <get_xy+0x1b4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <get_xy+0x1b4>)
 8000d9c:	f023 0308 	bic.w	r3, r3, #8
 8000da0:	6013      	str	r3, [r2, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	42020c00 	.word	0x42020c00
 8000db8:	42028000 	.word	0x42028000

08000dbc <txLPUART1>:
	}
	return in_buf;
}

/* Transmits data through LPUART Transmit data register while there is data */
void txLPUART1(char out_buf[]) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
	while(out_buf[i] != '\0') {
 8000dc8:	e013      	b.n	8000df2 <txLPUART1+0x36>
		LPUART1->TDR = out_buf[i++];
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	73fa      	strb	r2, [r7, #15]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <txLPUART1+0x50>)
 8000dda:	629a      	str	r2, [r3, #40]	@ 0x28
		for(int j =0; j<10000; j++);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	e002      	b.n	8000de8 <txLPUART1+0x2c>
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000dee:	4293      	cmp	r3, r2
 8000df0:	ddf7      	ble.n	8000de2 <txLPUART1+0x26>
	while(out_buf[i] != '\0') {
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1e5      	bne.n	8000dca <txLPUART1+0xe>
	}
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40008000 	.word	0x40008000

08000e10 <init_clks>:

// enable clocks
void init_clks() {
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= 1 << 28; 	// enable power interface clock by setting PWREN bits
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <init_clks+0x7c>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <init_clks+0x7c>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR2 |= 0x1;		// enable LPUART1EN clock
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <init_clks+0x7c>)
 8000e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <init_clks+0x7c>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	65d3      	str	r3, [r2, #92]	@ 0x5c
	RCC->CCIPR1 |= 0x800;		// 01 for HSI16 clock to be used for LPUART1
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <init_clks+0x7c>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e32:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <init_clks+0x7c>)
 8000e34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR1 &= ~(0x400);
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <init_clks+0x7c>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <init_clks+0x7c>)
 8000e44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CFGR |= 0x1;			// use HSI16 as SYSCLK
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <init_clks+0x7c>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <init_clks+0x7c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6093      	str	r3, [r2, #8]
	RCC->CR |= 0x161;			// MSI clock enable; MSI = 4 MHz; HSI16 clock enable
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <init_clks+0x7c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <init_clks+0x7c>)
 8000e5e:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]
	RCC->AHB2ENR |= 1<<6;		// enable clock to GPIOG
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <init_clks+0x7c>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <init_clks+0x7c>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
	bitset(RCC->APB1ENR2, 0);	// enable clock to LPUART1
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <init_clks+0x7c>)
 8000e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <init_clks+0x7c>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <init_LPUART1>:

/* PG7 is connected to LPUART tx PG8 is connect to LPUART rx */
void init_LPUART1() {
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	PWR->CR2 |= 0x200;			// power up port g / enable VDDIO2 Independent I/O supply
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <init_LPUART1+0x88>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <init_LPUART1+0x88>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9e:	6053      	str	r3, [r2, #4]
	/* tx config */
	GPIOG->MODER &= ~(0x3<<14); // clear the two bits
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ea6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eaa:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= 0x2 << 14;	// set mode to alternate function
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <init_LPUART1+0x8c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f1c <init_LPUART1+0x8c>)
 8000eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eb6:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[0] &= ~(0xf<<28);// clear 4 bits for PG7
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <init_LPUART1+0x8c>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ebe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000ec2:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= 0x8<<28;	// set PG7 to alternate function 8
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <init_LPUART1+0x8c>)
 8000eca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ece:	6213      	str	r3, [r2, #32]
	/* rx config */
	GPIOG->MODER &= ~(0x3<<16); // clear the two bits
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ed6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000eda:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= 0x2 << 16;	// set mode to alternate function
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee6:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[1] &= ~(0xf);	// clear 4 bits for PG8
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <init_LPUART1+0x8c>)
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <init_LPUART1+0x8c>)
 8000eee:	f023 030f 	bic.w	r3, r3, #15
 8000ef2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= 0x8;		// set PG8 to alternate function 8
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <init_LPUART1+0x8c>)
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef8:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <init_LPUART1+0x8c>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6253      	str	r3, [r2, #36]	@ 0x24

	// BRR = 256*16000000/57600 = 71111
	LPUART1->BRR = 4444; 				// set baud rate to 921600
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <init_LPUART1+0x90>)
 8000f02:	f241 125c 	movw	r2, #4444	@ 0x115c
 8000f06:	60da      	str	r2, [r3, #12]
	LPUART1->CR1 = 0xD; 				// 0x1101 --> TX, RX are enabled and UART is Enabled.
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <init_LPUART1+0x90>)
 8000f0a:	220d      	movs	r2, #13
 8000f0c:	601a      	str	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40007000 	.word	0x40007000
 8000f1c:	42021800 	.word	0x42021800
 8000f20:	40008000 	.word	0x40008000

08000f24 <init_adc1>:
/**
 * Initialize ADC1 to read 2 values connected to CH1 and CH2.
 *  	CH1 -> PC0
 *  	CH2 -> PC1
 */
void init_adc1() {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
	bitset(RCC->AHB2ENR, 13); 	// enable ADC clock
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <init_adc1+0xc0>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <init_adc1+0xc0>)
 8000f30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->CCIPR1 |= 0x3 << 28; 	// route SYSCLK HCLK to ADC
 8000f36:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <init_adc1+0xc0>)
 8000f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3c:	4a29      	ldr	r2, [pc, #164]	@ (8000fe4 <init_adc1+0xc0>)
 8000f3e:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000f42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	bitclear(ADC1->CR, 29);		// exit deep power mode by setting DEEPPWD = 0 in control register
 8000f46:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <init_adc1+0xc4>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <init_adc1+0xc4>)
 8000f4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000f50:	6093      	str	r3, [r2, #8]
	bitset(ADC1->CR, 28); 		// turn on the ADC voltage reguator
 8000f52:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <init_adc1+0xc4>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4a24      	ldr	r2, [pc, #144]	@ (8000fe8 <init_adc1+0xc4>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	6093      	str	r3, [r2, #8]

	bitset(ADC1->CFGR, 12); 	// OVRMOD: Disable overrun mode (ADC keeps going even if user does not read)
 8000f5e:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <init_adc1+0xc4>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	4a21      	ldr	r2, [pc, #132]	@ (8000fe8 <init_adc1+0xc4>)
 8000f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f68:	60d3      	str	r3, [r2, #12]
	bitset(ADC1->ISR, 0); 		// ADC Ready
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <init_adc1+0xc4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe8 <init_adc1+0xc4>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6013      	str	r3, [r2, #0]

	delay_ms(10);				// wait for voltage regulator to stabilize
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <init_adc1+0x5e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8000f88:	dbf8      	blt.n	8000f7c <init_adc1+0x58>

	/* Sequencer Setup */
	bitset(ADC1->SQR1, 0);		// set sequence length to 2
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <init_adc1+0xc4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a16      	ldr	r2, [pc, #88]	@ (8000fe8 <init_adc1+0xc4>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 6);  	// set 1st conversion to ch1 0b0001
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <init_adc1+0xc4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a13      	ldr	r2, [pc, #76]	@ (8000fe8 <init_adc1+0xc4>)
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 13);		// set 2nd conversion to ch2 0b0010
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <init_adc1+0xc4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a10      	ldr	r2, [pc, #64]	@ (8000fe8 <init_adc1+0xc4>)
 8000fa8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC1->SMPR1 |= 0b000111111000;	// set sample speed to 700 ADC clock cycles
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <init_adc1+0xc4>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <init_adc1+0xc4>)
 8000fb4:	f443 73fc 	orr.w	r3, r3, #504	@ 0x1f8
 8000fb8:	6153      	str	r3, [r2, #20]

	ADC1->CR |= 1 ;				// enable ADC
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <init_adc1+0xc4>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <init_adc1+0xc4>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6093      	str	r3, [r2, #8]

	while (bitcheck(ADC1->ISR, 0) == 0);	// wait until ADC is ready
 8000fc6:	bf00      	nop
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <init_adc1+0xc4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f9      	beq.n	8000fc8 <init_adc1+0xa4>
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	42028000 	.word	0x42028000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 f93d 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f904 	bl	800125c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_kill>:

int _kill(int pid, int sig)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001072:	f001 f8cf 	bl	8002214 <__errno>
 8001076:	4603      	mov	r3, r0
 8001078:	2216      	movs	r2, #22
 800107a:	601a      	str	r2, [r3, #0]
  return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_exit>:

void _exit (int status)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe7 	bl	8001068 <_kill>
  while (1) {}    /* Make sure we hang here */
 800109a:	bf00      	nop
 800109c:	e7fd      	b.n	800109a <_exit+0x12>

0800109e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e00a      	b.n	80010c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b0:	f3af 8000 	nop.w
 80010b4:	4601      	mov	r1, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbf0      	blt.n	80010b0 <_read+0x12>
  }

  return len;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e009      	b.n	80010fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	60ba      	str	r2, [r7, #8]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8c8 	bl	8001288 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	dbf1      	blt.n	80010ea <_write+0x12>
  }
  return len;
 8001106:	687b      	ldr	r3, [r7, #4]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_close>:

int _close(int file)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001138:	605a      	str	r2, [r3, #4]
  return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_isatty>:

int _isatty(int file)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115e:	b480      	push	{r7}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	@ (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f001 f834 	bl	8002214 <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20030000 	.word	0x20030000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	200001e8 	.word	0x200001e8
 80011e0:	20000478 	.word	0x20000478

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001210:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001212:	e003      	b.n	800121c <LoopCopyDataInit>

08001214 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001216:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001218:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800121a:	3104      	adds	r1, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800121c:	480a      	ldr	r0, [pc, #40]	@ (8001248 <LoopForever+0xa>)
	ldr	r3, =_edata
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001220:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001222:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001224:	d3f6      	bcc.n	8001214 <CopyDataInit>
	ldr	r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001228:	e002      	b.n	8001230 <LoopFillZerobss>

0800122a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800122a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800122c:	f842 3b04 	str.w	r3, [r2], #4

08001230 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <LoopForever+0x16>)
	cmp	r2, r3
 8001232:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001234:	d3f9      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001236:	f000 fff3 	bl	8002220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123a:	f7ff fc99 	bl	8000b70 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001240:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001244:	080046d8 	.word	0x080046d8
	ldr	r0, =_sdata
 8001248:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800124c:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 8001250:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 8001254:	20000474 	.word	0x20000474

08001258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_2_IRQHandler>
	...

0800125c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <BSP_PB_IRQHandler+0x28>)
 8001272:	4413      	add	r3, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f843 	bl	8001300 <HAL_EXTI_IRQHandler>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000314 	.word	0x20000314

08001288 <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <__io_putchar+0x30>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	2394      	movs	r3, #148	@ 0x94
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <__io_putchar+0x34>)
 800129e:	1898      	adds	r0, r3, r2
 80012a0:	1d39      	adds	r1, r7, #4
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	2201      	movs	r2, #1
 80012a8:	f000 f872 	bl	8001390 <HAL_UART_Transmit>
  return ch;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000320 	.word	0x20000320
 80012bc:	200001ec 	.word	0x200001ec

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000324 	.word	0x20000324

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000324 	.word	0x20000324

08001300 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	2201      	movs	r2, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	015a      	lsls	r2, r3, #5
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_EXTI_IRQHandler+0x88>)
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_EXTI_IRQHandler+0x8c>)
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	4798      	blx	r3
    }
  }
}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	4002f40c 	.word	0x4002f40c
 800138c:	4002f410 	.word	0x4002f410

08001390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	4613      	mov	r3, r2
 800139e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	2b20      	cmp	r3, #32
 80013a8:	d17b      	bne.n	80014a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_UART_Transmit+0x26>
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e074      	b.n	80014a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2221      	movs	r2, #33	@ 0x21
 80013c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80013ca:	f7ff ff8d 	bl	80012e8 <HAL_GetTick>
 80013ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	88fa      	ldrh	r2, [r7, #6]
 80013d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	88fa      	ldrh	r2, [r7, #6]
 80013dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013e8:	d108      	bne.n	80013fc <HAL_UART_Transmit+0x6c>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d104      	bne.n	80013fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	e003      	b.n	8001404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001404:	e030      	b.n	8001468 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2200      	movs	r2, #0
 800140e:	2180      	movs	r1, #128	@ 0x80
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f84b 	bl	80014ac <UART_WaitOnFlagUntilTimeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2220      	movs	r2, #32
 8001420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e03d      	b.n	80014a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10b      	bne.n	8001446 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800143c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	3302      	adds	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	e007      	b.n	8001456 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	3301      	adds	r3, #1
 8001454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800145c:	b29b      	uxth	r3, r3
 800145e:	3b01      	subs	r3, #1
 8001460:	b29a      	uxth	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800146e:	b29b      	uxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1c8      	bne.n	8001406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	@ 0x40
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f814 	bl	80014ac <UART_WaitOnFlagUntilTimeout>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2220      	movs	r2, #32
 800148e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e006      	b.n	80014a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2220      	movs	r2, #32
 800149a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80014a2:	2302      	movs	r3, #2
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014bc:	e04f      	b.n	800155e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d04b      	beq.n	800155e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c6:	f7ff ff0f 	bl	80012e8 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <UART_WaitOnFlagUntilTimeout+0x30>
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e04e      	b.n	800157e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d037      	beq.n	800155e <UART_WaitOnFlagUntilTimeout+0xb2>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b80      	cmp	r3, #128	@ 0x80
 80014f2:	d034      	beq.n	800155e <UART_WaitOnFlagUntilTimeout+0xb2>
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b40      	cmp	r3, #64	@ 0x40
 80014f8:	d031      	beq.n	800155e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b08      	cmp	r3, #8
 8001506:	d110      	bne.n	800152a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2208      	movs	r2, #8
 800150e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 f838 	bl	8001586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2208      	movs	r2, #8
 800151a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e029      	b.n	800157e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001538:	d111      	bne.n	800155e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f81e 	bl	8001586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e00f      	b.n	800157e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4013      	ands	r3, r2
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	429a      	cmp	r2, r3
 800157a:	d0a0      	beq.n	80014be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001586:	b480      	push	{r7}
 8001588:	b095      	sub	sp, #84	@ 0x54
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001596:	e853 3f00 	ldrex	r3, [r3]
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800159c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800159e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80015a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80015ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80015b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015b4:	e841 2300 	strex	r3, r2, [r1]
 80015b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80015ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e6      	bne.n	800158e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3308      	adds	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	e853 3f00 	ldrex	r3, [r3]
 80015ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3308      	adds	r3, #8
 80015e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ec:	e841 2300 	strex	r3, r2, [r1]
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e3      	bne.n	80015c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d118      	bne.n	8001632 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	e853 3f00 	ldrex	r3, [r3]
 800160c:	60bb      	str	r3, [r7, #8]
   return(result);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f023 0310 	bic.w	r3, r3, #16
 8001614:	647b      	str	r3, [r7, #68]	@ 0x44
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001622:	6979      	ldr	r1, [r7, #20]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	e841 2300 	strex	r3, r2, [r1]
 800162a:	613b      	str	r3, [r7, #16]
   return(result);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1e6      	bne.n	8001600 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2220      	movs	r2, #32
 8001636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8001646:	bf00      	nop
 8001648:	3754      	adds	r7, #84	@ 0x54
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <__cvt>:
 8001652:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001656:	ec57 6b10 	vmov	r6, r7, d0
 800165a:	2f00      	cmp	r7, #0
 800165c:	460c      	mov	r4, r1
 800165e:	4619      	mov	r1, r3
 8001660:	463b      	mov	r3, r7
 8001662:	bfb4      	ite	lt
 8001664:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001668:	2300      	movge	r3, #0
 800166a:	4691      	mov	r9, r2
 800166c:	bfbf      	itttt	lt
 800166e:	4632      	movlt	r2, r6
 8001670:	461f      	movlt	r7, r3
 8001672:	232d      	movlt	r3, #45	@ 0x2d
 8001674:	4616      	movlt	r6, r2
 8001676:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800167a:	700b      	strb	r3, [r1, #0]
 800167c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800167e:	f023 0820 	bic.w	r8, r3, #32
 8001682:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001686:	d005      	beq.n	8001694 <__cvt+0x42>
 8001688:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800168c:	d100      	bne.n	8001690 <__cvt+0x3e>
 800168e:	3401      	adds	r4, #1
 8001690:	2102      	movs	r1, #2
 8001692:	e000      	b.n	8001696 <__cvt+0x44>
 8001694:	2103      	movs	r1, #3
 8001696:	ab03      	add	r3, sp, #12
 8001698:	4622      	mov	r2, r4
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	ab02      	add	r3, sp, #8
 800169e:	ec47 6b10 	vmov	d0, r6, r7
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	4653      	mov	r3, sl
 80016a6:	f000 fe7f 	bl	80023a8 <_dtoa_r>
 80016aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80016ae:	4605      	mov	r5, r0
 80016b0:	d119      	bne.n	80016e6 <__cvt+0x94>
 80016b2:	f019 0f01 	tst.w	r9, #1
 80016b6:	d00e      	beq.n	80016d6 <__cvt+0x84>
 80016b8:	eb00 0904 	add.w	r9, r0, r4
 80016bc:	2200      	movs	r2, #0
 80016be:	2300      	movs	r3, #0
 80016c0:	4630      	mov	r0, r6
 80016c2:	4639      	mov	r1, r7
 80016c4:	f7ff f9e4 	bl	8000a90 <__aeabi_dcmpeq>
 80016c8:	b108      	cbz	r0, 80016ce <__cvt+0x7c>
 80016ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80016ce:	2230      	movs	r2, #48	@ 0x30
 80016d0:	9b03      	ldr	r3, [sp, #12]
 80016d2:	454b      	cmp	r3, r9
 80016d4:	d31e      	bcc.n	8001714 <__cvt+0xc2>
 80016d6:	9b03      	ldr	r3, [sp, #12]
 80016d8:	4628      	mov	r0, r5
 80016da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80016dc:	1b5b      	subs	r3, r3, r5
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	b004      	add	sp, #16
 80016e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80016ea:	eb00 0904 	add.w	r9, r0, r4
 80016ee:	d1e5      	bne.n	80016bc <__cvt+0x6a>
 80016f0:	7803      	ldrb	r3, [r0, #0]
 80016f2:	2b30      	cmp	r3, #48	@ 0x30
 80016f4:	d10a      	bne.n	800170c <__cvt+0xba>
 80016f6:	2200      	movs	r2, #0
 80016f8:	2300      	movs	r3, #0
 80016fa:	4630      	mov	r0, r6
 80016fc:	4639      	mov	r1, r7
 80016fe:	f7ff f9c7 	bl	8000a90 <__aeabi_dcmpeq>
 8001702:	b918      	cbnz	r0, 800170c <__cvt+0xba>
 8001704:	f1c4 0401 	rsb	r4, r4, #1
 8001708:	f8ca 4000 	str.w	r4, [sl]
 800170c:	f8da 3000 	ldr.w	r3, [sl]
 8001710:	4499      	add	r9, r3
 8001712:	e7d3      	b.n	80016bc <__cvt+0x6a>
 8001714:	1c59      	adds	r1, r3, #1
 8001716:	9103      	str	r1, [sp, #12]
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e7d9      	b.n	80016d0 <__cvt+0x7e>

0800171c <__exponent>:
 800171c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800171e:	2900      	cmp	r1, #0
 8001720:	7002      	strb	r2, [r0, #0]
 8001722:	bfba      	itte	lt
 8001724:	4249      	neglt	r1, r1
 8001726:	232d      	movlt	r3, #45	@ 0x2d
 8001728:	232b      	movge	r3, #43	@ 0x2b
 800172a:	2909      	cmp	r1, #9
 800172c:	7043      	strb	r3, [r0, #1]
 800172e:	dd28      	ble.n	8001782 <__exponent+0x66>
 8001730:	f10d 0307 	add.w	r3, sp, #7
 8001734:	270a      	movs	r7, #10
 8001736:	461d      	mov	r5, r3
 8001738:	461a      	mov	r2, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	fbb1 f6f7 	udiv	r6, r1, r7
 8001740:	fb07 1416 	mls	r4, r7, r6, r1
 8001744:	3430      	adds	r4, #48	@ 0x30
 8001746:	f802 4c01 	strb.w	r4, [r2, #-1]
 800174a:	460c      	mov	r4, r1
 800174c:	4631      	mov	r1, r6
 800174e:	2c63      	cmp	r4, #99	@ 0x63
 8001750:	dcf2      	bgt.n	8001738 <__exponent+0x1c>
 8001752:	3130      	adds	r1, #48	@ 0x30
 8001754:	1e94      	subs	r4, r2, #2
 8001756:	f803 1c01 	strb.w	r1, [r3, #-1]
 800175a:	1c41      	adds	r1, r0, #1
 800175c:	4623      	mov	r3, r4
 800175e:	42ab      	cmp	r3, r5
 8001760:	d30a      	bcc.n	8001778 <__exponent+0x5c>
 8001762:	f10d 0309 	add.w	r3, sp, #9
 8001766:	1a9b      	subs	r3, r3, r2
 8001768:	42ac      	cmp	r4, r5
 800176a:	bf88      	it	hi
 800176c:	2300      	movhi	r3, #0
 800176e:	3302      	adds	r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	1a18      	subs	r0, r3, r0
 8001774:	b003      	add	sp, #12
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	f813 6b01 	ldrb.w	r6, [r3], #1
 800177c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001780:	e7ed      	b.n	800175e <__exponent+0x42>
 8001782:	2330      	movs	r3, #48	@ 0x30
 8001784:	3130      	adds	r1, #48	@ 0x30
 8001786:	7083      	strb	r3, [r0, #2]
 8001788:	1d03      	adds	r3, r0, #4
 800178a:	70c1      	strb	r1, [r0, #3]
 800178c:	e7f1      	b.n	8001772 <__exponent+0x56>
	...

08001790 <_printf_float>:
 8001790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001794:	b08d      	sub	sp, #52	@ 0x34
 8001796:	460c      	mov	r4, r1
 8001798:	4616      	mov	r6, r2
 800179a:	461f      	mov	r7, r3
 800179c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80017a0:	4605      	mov	r5, r0
 80017a2:	f000 fced 	bl	8002180 <_localeconv_r>
 80017a6:	6803      	ldr	r3, [r0, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	9304      	str	r3, [sp, #16]
 80017ac:	f7fe fd44 	bl	8000238 <strlen>
 80017b0:	2300      	movs	r3, #0
 80017b2:	9005      	str	r0, [sp, #20]
 80017b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80017b6:	f8d8 3000 	ldr.w	r3, [r8]
 80017ba:	f894 a018 	ldrb.w	sl, [r4, #24]
 80017be:	3307      	adds	r3, #7
 80017c0:	f8d4 b000 	ldr.w	fp, [r4]
 80017c4:	f023 0307 	bic.w	r3, r3, #7
 80017c8:	f103 0208 	add.w	r2, r3, #8
 80017cc:	f8c8 2000 	str.w	r2, [r8]
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80017d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80017dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80017e0:	9307      	str	r3, [sp, #28]
 80017e2:	4b9d      	ldr	r3, [pc, #628]	@ (8001a58 <_printf_float+0x2c8>)
 80017e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80017e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80017ec:	f7ff f982 	bl	8000af4 <__aeabi_dcmpun>
 80017f0:	bb70      	cbnz	r0, 8001850 <_printf_float+0xc0>
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	4b98      	ldr	r3, [pc, #608]	@ (8001a58 <_printf_float+0x2c8>)
 80017f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80017fc:	f7ff f95c 	bl	8000ab8 <__aeabi_dcmple>
 8001800:	bb30      	cbnz	r0, 8001850 <_printf_float+0xc0>
 8001802:	2200      	movs	r2, #0
 8001804:	2300      	movs	r3, #0
 8001806:	4640      	mov	r0, r8
 8001808:	4649      	mov	r1, r9
 800180a:	f7ff f94b 	bl	8000aa4 <__aeabi_dcmplt>
 800180e:	b110      	cbz	r0, 8001816 <_printf_float+0x86>
 8001810:	232d      	movs	r3, #45	@ 0x2d
 8001812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001816:	4a91      	ldr	r2, [pc, #580]	@ (8001a5c <_printf_float+0x2cc>)
 8001818:	4b91      	ldr	r3, [pc, #580]	@ (8001a60 <_printf_float+0x2d0>)
 800181a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800181e:	bf94      	ite	ls
 8001820:	4690      	movls	r8, r2
 8001822:	4698      	movhi	r8, r3
 8001824:	2303      	movs	r3, #3
 8001826:	f04f 0900 	mov.w	r9, #0
 800182a:	6123      	str	r3, [r4, #16]
 800182c:	f02b 0304 	bic.w	r3, fp, #4
 8001830:	6023      	str	r3, [r4, #0]
 8001832:	4633      	mov	r3, r6
 8001834:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001836:	4621      	mov	r1, r4
 8001838:	4628      	mov	r0, r5
 800183a:	9700      	str	r7, [sp, #0]
 800183c:	f000 f9d2 	bl	8001be4 <_printf_common>
 8001840:	3001      	adds	r0, #1
 8001842:	f040 808d 	bne.w	8001960 <_printf_float+0x1d0>
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	b00d      	add	sp, #52	@ 0x34
 800184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001850:	4642      	mov	r2, r8
 8001852:	464b      	mov	r3, r9
 8001854:	4640      	mov	r0, r8
 8001856:	4649      	mov	r1, r9
 8001858:	f7ff f94c 	bl	8000af4 <__aeabi_dcmpun>
 800185c:	b140      	cbz	r0, 8001870 <_printf_float+0xe0>
 800185e:	464b      	mov	r3, r9
 8001860:	4a80      	ldr	r2, [pc, #512]	@ (8001a64 <_printf_float+0x2d4>)
 8001862:	2b00      	cmp	r3, #0
 8001864:	bfbc      	itt	lt
 8001866:	232d      	movlt	r3, #45	@ 0x2d
 8001868:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800186c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a68 <_printf_float+0x2d8>)
 800186e:	e7d4      	b.n	800181a <_printf_float+0x8a>
 8001870:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8001874:	6863      	ldr	r3, [r4, #4]
 8001876:	9206      	str	r2, [sp, #24]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	d13b      	bne.n	80018f4 <_printf_float+0x164>
 800187c:	2306      	movs	r3, #6
 800187e:	6063      	str	r3, [r4, #4]
 8001880:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8001884:	2300      	movs	r3, #0
 8001886:	4628      	mov	r0, r5
 8001888:	6022      	str	r2, [r4, #0]
 800188a:	9303      	str	r3, [sp, #12]
 800188c:	ab0a      	add	r3, sp, #40	@ 0x28
 800188e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8001892:	ab09      	add	r3, sp, #36	@ 0x24
 8001894:	ec49 8b10 	vmov	d0, r8, r9
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800189e:	6861      	ldr	r1, [r4, #4]
 80018a0:	f7ff fed7 	bl	8001652 <__cvt>
 80018a4:	9b06      	ldr	r3, [sp, #24]
 80018a6:	4680      	mov	r8, r0
 80018a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80018aa:	2b47      	cmp	r3, #71	@ 0x47
 80018ac:	d129      	bne.n	8001902 <_printf_float+0x172>
 80018ae:	1cc8      	adds	r0, r1, #3
 80018b0:	db02      	blt.n	80018b8 <_printf_float+0x128>
 80018b2:	6863      	ldr	r3, [r4, #4]
 80018b4:	4299      	cmp	r1, r3
 80018b6:	dd41      	ble.n	800193c <_printf_float+0x1ac>
 80018b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80018bc:	fa5f fa8a 	uxtb.w	sl, sl
 80018c0:	3901      	subs	r1, #1
 80018c2:	4652      	mov	r2, sl
 80018c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80018c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80018ca:	f7ff ff27 	bl	800171c <__exponent>
 80018ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80018d0:	4681      	mov	r9, r0
 80018d2:	1813      	adds	r3, r2, r0
 80018d4:	2a01      	cmp	r2, #1
 80018d6:	6123      	str	r3, [r4, #16]
 80018d8:	dc02      	bgt.n	80018e0 <_printf_float+0x150>
 80018da:	6822      	ldr	r2, [r4, #0]
 80018dc:	07d2      	lsls	r2, r2, #31
 80018de:	d501      	bpl.n	80018e4 <_printf_float+0x154>
 80018e0:	3301      	adds	r3, #1
 80018e2:	6123      	str	r3, [r4, #16]
 80018e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0a2      	beq.n	8001832 <_printf_float+0xa2>
 80018ec:	232d      	movs	r3, #45	@ 0x2d
 80018ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018f2:	e79e      	b.n	8001832 <_printf_float+0xa2>
 80018f4:	9a06      	ldr	r2, [sp, #24]
 80018f6:	2a47      	cmp	r2, #71	@ 0x47
 80018f8:	d1c2      	bne.n	8001880 <_printf_float+0xf0>
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1c0      	bne.n	8001880 <_printf_float+0xf0>
 80018fe:	2301      	movs	r3, #1
 8001900:	e7bd      	b.n	800187e <_printf_float+0xee>
 8001902:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001906:	d9db      	bls.n	80018c0 <_printf_float+0x130>
 8001908:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800190c:	d118      	bne.n	8001940 <_printf_float+0x1b0>
 800190e:	2900      	cmp	r1, #0
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	dd0b      	ble.n	800192c <_printf_float+0x19c>
 8001914:	6121      	str	r1, [r4, #16]
 8001916:	b913      	cbnz	r3, 800191e <_printf_float+0x18e>
 8001918:	6822      	ldr	r2, [r4, #0]
 800191a:	07d0      	lsls	r0, r2, #31
 800191c:	d502      	bpl.n	8001924 <_printf_float+0x194>
 800191e:	3301      	adds	r3, #1
 8001920:	440b      	add	r3, r1
 8001922:	6123      	str	r3, [r4, #16]
 8001924:	f04f 0900 	mov.w	r9, #0
 8001928:	65a1      	str	r1, [r4, #88]	@ 0x58
 800192a:	e7db      	b.n	80018e4 <_printf_float+0x154>
 800192c:	b913      	cbnz	r3, 8001934 <_printf_float+0x1a4>
 800192e:	6822      	ldr	r2, [r4, #0]
 8001930:	07d2      	lsls	r2, r2, #31
 8001932:	d501      	bpl.n	8001938 <_printf_float+0x1a8>
 8001934:	3302      	adds	r3, #2
 8001936:	e7f4      	b.n	8001922 <_printf_float+0x192>
 8001938:	2301      	movs	r3, #1
 800193a:	e7f2      	b.n	8001922 <_printf_float+0x192>
 800193c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8001940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001942:	4299      	cmp	r1, r3
 8001944:	db05      	blt.n	8001952 <_printf_float+0x1c2>
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	6121      	str	r1, [r4, #16]
 800194a:	07d8      	lsls	r0, r3, #31
 800194c:	d5ea      	bpl.n	8001924 <_printf_float+0x194>
 800194e:	1c4b      	adds	r3, r1, #1
 8001950:	e7e7      	b.n	8001922 <_printf_float+0x192>
 8001952:	2900      	cmp	r1, #0
 8001954:	bfd4      	ite	le
 8001956:	f1c1 0202 	rsble	r2, r1, #2
 800195a:	2201      	movgt	r2, #1
 800195c:	4413      	add	r3, r2
 800195e:	e7e0      	b.n	8001922 <_printf_float+0x192>
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	055a      	lsls	r2, r3, #21
 8001964:	d407      	bmi.n	8001976 <_printf_float+0x1e6>
 8001966:	6923      	ldr	r3, [r4, #16]
 8001968:	4642      	mov	r2, r8
 800196a:	4631      	mov	r1, r6
 800196c:	4628      	mov	r0, r5
 800196e:	47b8      	blx	r7
 8001970:	3001      	adds	r0, #1
 8001972:	d12b      	bne.n	80019cc <_printf_float+0x23c>
 8001974:	e767      	b.n	8001846 <_printf_float+0xb6>
 8001976:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800197a:	f240 80dd 	bls.w	8001b38 <_printf_float+0x3a8>
 800197e:	2200      	movs	r2, #0
 8001980:	2300      	movs	r3, #0
 8001982:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001986:	f7ff f883 	bl	8000a90 <__aeabi_dcmpeq>
 800198a:	2800      	cmp	r0, #0
 800198c:	d033      	beq.n	80019f6 <_printf_float+0x266>
 800198e:	2301      	movs	r3, #1
 8001990:	4a36      	ldr	r2, [pc, #216]	@ (8001a6c <_printf_float+0x2dc>)
 8001992:	4631      	mov	r1, r6
 8001994:	4628      	mov	r0, r5
 8001996:	47b8      	blx	r7
 8001998:	3001      	adds	r0, #1
 800199a:	f43f af54 	beq.w	8001846 <_printf_float+0xb6>
 800199e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80019a2:	4543      	cmp	r3, r8
 80019a4:	db02      	blt.n	80019ac <_printf_float+0x21c>
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	07d8      	lsls	r0, r3, #31
 80019aa:	d50f      	bpl.n	80019cc <_printf_float+0x23c>
 80019ac:	4631      	mov	r1, r6
 80019ae:	4628      	mov	r0, r5
 80019b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80019b4:	47b8      	blx	r7
 80019b6:	3001      	adds	r0, #1
 80019b8:	f43f af45 	beq.w	8001846 <_printf_float+0xb6>
 80019bc:	f04f 0900 	mov.w	r9, #0
 80019c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80019c4:	f104 0a1a 	add.w	sl, r4, #26
 80019c8:	45c8      	cmp	r8, r9
 80019ca:	dc09      	bgt.n	80019e0 <_printf_float+0x250>
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	079b      	lsls	r3, r3, #30
 80019d0:	f100 8103 	bmi.w	8001bda <_printf_float+0x44a>
 80019d4:	68e0      	ldr	r0, [r4, #12]
 80019d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80019d8:	4298      	cmp	r0, r3
 80019da:	bfb8      	it	lt
 80019dc:	4618      	movlt	r0, r3
 80019de:	e734      	b.n	800184a <_printf_float+0xba>
 80019e0:	2301      	movs	r3, #1
 80019e2:	4652      	mov	r2, sl
 80019e4:	4631      	mov	r1, r6
 80019e6:	4628      	mov	r0, r5
 80019e8:	47b8      	blx	r7
 80019ea:	3001      	adds	r0, #1
 80019ec:	f43f af2b 	beq.w	8001846 <_printf_float+0xb6>
 80019f0:	f109 0901 	add.w	r9, r9, #1
 80019f4:	e7e8      	b.n	80019c8 <_printf_float+0x238>
 80019f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dc39      	bgt.n	8001a70 <_printf_float+0x2e0>
 80019fc:	2301      	movs	r3, #1
 80019fe:	4a1b      	ldr	r2, [pc, #108]	@ (8001a6c <_printf_float+0x2dc>)
 8001a00:	4631      	mov	r1, r6
 8001a02:	4628      	mov	r0, r5
 8001a04:	47b8      	blx	r7
 8001a06:	3001      	adds	r0, #1
 8001a08:	f43f af1d 	beq.w	8001846 <_printf_float+0xb6>
 8001a0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8001a10:	ea59 0303 	orrs.w	r3, r9, r3
 8001a14:	d102      	bne.n	8001a1c <_printf_float+0x28c>
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	07d9      	lsls	r1, r3, #31
 8001a1a:	d5d7      	bpl.n	80019cc <_printf_float+0x23c>
 8001a1c:	4631      	mov	r1, r6
 8001a1e:	4628      	mov	r0, r5
 8001a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a24:	47b8      	blx	r7
 8001a26:	3001      	adds	r0, #1
 8001a28:	f43f af0d 	beq.w	8001846 <_printf_float+0xb6>
 8001a2c:	f04f 0a00 	mov.w	sl, #0
 8001a30:	f104 0b1a 	add.w	fp, r4, #26
 8001a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a36:	425b      	negs	r3, r3
 8001a38:	4553      	cmp	r3, sl
 8001a3a:	dc01      	bgt.n	8001a40 <_printf_float+0x2b0>
 8001a3c:	464b      	mov	r3, r9
 8001a3e:	e793      	b.n	8001968 <_printf_float+0x1d8>
 8001a40:	2301      	movs	r3, #1
 8001a42:	465a      	mov	r2, fp
 8001a44:	4631      	mov	r1, r6
 8001a46:	4628      	mov	r0, r5
 8001a48:	47b8      	blx	r7
 8001a4a:	3001      	adds	r0, #1
 8001a4c:	f43f aefb 	beq.w	8001846 <_printf_float+0xb6>
 8001a50:	f10a 0a01 	add.w	sl, sl, #1
 8001a54:	e7ee      	b.n	8001a34 <_printf_float+0x2a4>
 8001a56:	bf00      	nop
 8001a58:	7fefffff 	.word	0x7fefffff
 8001a5c:	0800435a 	.word	0x0800435a
 8001a60:	0800435e 	.word	0x0800435e
 8001a64:	08004362 	.word	0x08004362
 8001a68:	08004366 	.word	0x08004366
 8001a6c:	0800436a 	.word	0x0800436a
 8001a70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001a76:	4553      	cmp	r3, sl
 8001a78:	bfa8      	it	ge
 8001a7a:	4653      	movge	r3, sl
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	4699      	mov	r9, r3
 8001a80:	dc36      	bgt.n	8001af0 <_printf_float+0x360>
 8001a82:	f04f 0b00 	mov.w	fp, #0
 8001a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001a8a:	f104 021a 	add.w	r2, r4, #26
 8001a8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a90:	9306      	str	r3, [sp, #24]
 8001a92:	eba3 0309 	sub.w	r3, r3, r9
 8001a96:	455b      	cmp	r3, fp
 8001a98:	dc31      	bgt.n	8001afe <_printf_float+0x36e>
 8001a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a9c:	459a      	cmp	sl, r3
 8001a9e:	dc3a      	bgt.n	8001b16 <_printf_float+0x386>
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	07da      	lsls	r2, r3, #31
 8001aa4:	d437      	bmi.n	8001b16 <_printf_float+0x386>
 8001aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001aa8:	ebaa 0903 	sub.w	r9, sl, r3
 8001aac:	9b06      	ldr	r3, [sp, #24]
 8001aae:	ebaa 0303 	sub.w	r3, sl, r3
 8001ab2:	4599      	cmp	r9, r3
 8001ab4:	bfa8      	it	ge
 8001ab6:	4699      	movge	r9, r3
 8001ab8:	f1b9 0f00 	cmp.w	r9, #0
 8001abc:	dc33      	bgt.n	8001b26 <_printf_float+0x396>
 8001abe:	f04f 0800 	mov.w	r8, #0
 8001ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001ac6:	f104 0b1a 	add.w	fp, r4, #26
 8001aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001acc:	ebaa 0303 	sub.w	r3, sl, r3
 8001ad0:	eba3 0309 	sub.w	r3, r3, r9
 8001ad4:	4543      	cmp	r3, r8
 8001ad6:	f77f af79 	ble.w	80019cc <_printf_float+0x23c>
 8001ada:	2301      	movs	r3, #1
 8001adc:	465a      	mov	r2, fp
 8001ade:	4631      	mov	r1, r6
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	47b8      	blx	r7
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	f43f aeae 	beq.w	8001846 <_printf_float+0xb6>
 8001aea:	f108 0801 	add.w	r8, r8, #1
 8001aee:	e7ec      	b.n	8001aca <_printf_float+0x33a>
 8001af0:	4642      	mov	r2, r8
 8001af2:	4631      	mov	r1, r6
 8001af4:	4628      	mov	r0, r5
 8001af6:	47b8      	blx	r7
 8001af8:	3001      	adds	r0, #1
 8001afa:	d1c2      	bne.n	8001a82 <_printf_float+0x2f2>
 8001afc:	e6a3      	b.n	8001846 <_printf_float+0xb6>
 8001afe:	2301      	movs	r3, #1
 8001b00:	4631      	mov	r1, r6
 8001b02:	4628      	mov	r0, r5
 8001b04:	9206      	str	r2, [sp, #24]
 8001b06:	47b8      	blx	r7
 8001b08:	3001      	adds	r0, #1
 8001b0a:	f43f ae9c 	beq.w	8001846 <_printf_float+0xb6>
 8001b0e:	f10b 0b01 	add.w	fp, fp, #1
 8001b12:	9a06      	ldr	r2, [sp, #24]
 8001b14:	e7bb      	b.n	8001a8e <_printf_float+0x2fe>
 8001b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001b1a:	4631      	mov	r1, r6
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	47b8      	blx	r7
 8001b20:	3001      	adds	r0, #1
 8001b22:	d1c0      	bne.n	8001aa6 <_printf_float+0x316>
 8001b24:	e68f      	b.n	8001846 <_printf_float+0xb6>
 8001b26:	9a06      	ldr	r2, [sp, #24]
 8001b28:	464b      	mov	r3, r9
 8001b2a:	4631      	mov	r1, r6
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	4442      	add	r2, r8
 8001b30:	47b8      	blx	r7
 8001b32:	3001      	adds	r0, #1
 8001b34:	d1c3      	bne.n	8001abe <_printf_float+0x32e>
 8001b36:	e686      	b.n	8001846 <_printf_float+0xb6>
 8001b38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001b3c:	f1ba 0f01 	cmp.w	sl, #1
 8001b40:	dc01      	bgt.n	8001b46 <_printf_float+0x3b6>
 8001b42:	07db      	lsls	r3, r3, #31
 8001b44:	d536      	bpl.n	8001bb4 <_printf_float+0x424>
 8001b46:	2301      	movs	r3, #1
 8001b48:	4642      	mov	r2, r8
 8001b4a:	4631      	mov	r1, r6
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	47b8      	blx	r7
 8001b50:	3001      	adds	r0, #1
 8001b52:	f43f ae78 	beq.w	8001846 <_printf_float+0xb6>
 8001b56:	4631      	mov	r1, r6
 8001b58:	4628      	mov	r0, r5
 8001b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001b5e:	47b8      	blx	r7
 8001b60:	3001      	adds	r0, #1
 8001b62:	f43f ae70 	beq.w	8001846 <_printf_float+0xb6>
 8001b66:	2200      	movs	r2, #0
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001b6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001b72:	f7fe ff8d 	bl	8000a90 <__aeabi_dcmpeq>
 8001b76:	b9c0      	cbnz	r0, 8001baa <_printf_float+0x41a>
 8001b78:	4653      	mov	r3, sl
 8001b7a:	f108 0201 	add.w	r2, r8, #1
 8001b7e:	4631      	mov	r1, r6
 8001b80:	4628      	mov	r0, r5
 8001b82:	47b8      	blx	r7
 8001b84:	3001      	adds	r0, #1
 8001b86:	d10c      	bne.n	8001ba2 <_printf_float+0x412>
 8001b88:	e65d      	b.n	8001846 <_printf_float+0xb6>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	465a      	mov	r2, fp
 8001b8e:	4631      	mov	r1, r6
 8001b90:	4628      	mov	r0, r5
 8001b92:	47b8      	blx	r7
 8001b94:	3001      	adds	r0, #1
 8001b96:	f43f ae56 	beq.w	8001846 <_printf_float+0xb6>
 8001b9a:	f108 0801 	add.w	r8, r8, #1
 8001b9e:	45d0      	cmp	r8, sl
 8001ba0:	dbf3      	blt.n	8001b8a <_printf_float+0x3fa>
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8001ba8:	e6df      	b.n	800196a <_printf_float+0x1da>
 8001baa:	f04f 0800 	mov.w	r8, #0
 8001bae:	f104 0b1a 	add.w	fp, r4, #26
 8001bb2:	e7f4      	b.n	8001b9e <_printf_float+0x40e>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	4642      	mov	r2, r8
 8001bb8:	e7e1      	b.n	8001b7e <_printf_float+0x3ee>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	464a      	mov	r2, r9
 8001bbe:	4631      	mov	r1, r6
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	47b8      	blx	r7
 8001bc4:	3001      	adds	r0, #1
 8001bc6:	f43f ae3e 	beq.w	8001846 <_printf_float+0xb6>
 8001bca:	f108 0801 	add.w	r8, r8, #1
 8001bce:	68e3      	ldr	r3, [r4, #12]
 8001bd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8001bd2:	1a5b      	subs	r3, r3, r1
 8001bd4:	4543      	cmp	r3, r8
 8001bd6:	dcf0      	bgt.n	8001bba <_printf_float+0x42a>
 8001bd8:	e6fc      	b.n	80019d4 <_printf_float+0x244>
 8001bda:	f04f 0800 	mov.w	r8, #0
 8001bde:	f104 0919 	add.w	r9, r4, #25
 8001be2:	e7f4      	b.n	8001bce <_printf_float+0x43e>

08001be4 <_printf_common>:
 8001be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be8:	4616      	mov	r6, r2
 8001bea:	4698      	mov	r8, r3
 8001bec:	688a      	ldr	r2, [r1, #8]
 8001bee:	4607      	mov	r7, r0
 8001bf0:	690b      	ldr	r3, [r1, #16]
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bfb8      	it	lt
 8001bfc:	4613      	movlt	r3, r2
 8001bfe:	6033      	str	r3, [r6, #0]
 8001c00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c04:	b10a      	cbz	r2, 8001c0a <_printf_common+0x26>
 8001c06:	3301      	adds	r3, #1
 8001c08:	6033      	str	r3, [r6, #0]
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	0699      	lsls	r1, r3, #26
 8001c0e:	bf42      	ittt	mi
 8001c10:	6833      	ldrmi	r3, [r6, #0]
 8001c12:	3302      	addmi	r3, #2
 8001c14:	6033      	strmi	r3, [r6, #0]
 8001c16:	6825      	ldr	r5, [r4, #0]
 8001c18:	f015 0506 	ands.w	r5, r5, #6
 8001c1c:	d106      	bne.n	8001c2c <_printf_common+0x48>
 8001c1e:	f104 0a19 	add.w	sl, r4, #25
 8001c22:	68e3      	ldr	r3, [r4, #12]
 8001c24:	6832      	ldr	r2, [r6, #0]
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	42ab      	cmp	r3, r5
 8001c2a:	dc2b      	bgt.n	8001c84 <_printf_common+0xa0>
 8001c2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c30:	6822      	ldr	r2, [r4, #0]
 8001c32:	3b00      	subs	r3, #0
 8001c34:	bf18      	it	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	0692      	lsls	r2, r2, #26
 8001c3a:	d430      	bmi.n	8001c9e <_printf_common+0xba>
 8001c3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001c40:	4641      	mov	r1, r8
 8001c42:	4638      	mov	r0, r7
 8001c44:	47c8      	blx	r9
 8001c46:	3001      	adds	r0, #1
 8001c48:	d023      	beq.n	8001c92 <_printf_common+0xae>
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	341a      	adds	r4, #26
 8001c4e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8001c52:	f003 0306 	and.w	r3, r3, #6
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf0a      	itet	eq
 8001c5a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8001c5e:	2500      	movne	r5, #0
 8001c60:	6833      	ldreq	r3, [r6, #0]
 8001c62:	f04f 0600 	mov.w	r6, #0
 8001c66:	bf08      	it	eq
 8001c68:	1aed      	subeq	r5, r5, r3
 8001c6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c6e:	bf08      	it	eq
 8001c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bfc4      	itt	gt
 8001c78:	1a9b      	subgt	r3, r3, r2
 8001c7a:	18ed      	addgt	r5, r5, r3
 8001c7c:	42b5      	cmp	r5, r6
 8001c7e:	d11a      	bne.n	8001cb6 <_printf_common+0xd2>
 8001c80:	2000      	movs	r0, #0
 8001c82:	e008      	b.n	8001c96 <_printf_common+0xb2>
 8001c84:	2301      	movs	r3, #1
 8001c86:	4652      	mov	r2, sl
 8001c88:	4641      	mov	r1, r8
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	47c8      	blx	r9
 8001c8e:	3001      	adds	r0, #1
 8001c90:	d103      	bne.n	8001c9a <_printf_common+0xb6>
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295
 8001c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c9a:	3501      	adds	r5, #1
 8001c9c:	e7c1      	b.n	8001c22 <_printf_common+0x3e>
 8001c9e:	18e1      	adds	r1, r4, r3
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	2030      	movs	r0, #48	@ 0x30
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	4422      	add	r2, r4
 8001ca8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001cac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001cb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001cb4:	e7c2      	b.n	8001c3c <_printf_common+0x58>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	4622      	mov	r2, r4
 8001cba:	4641      	mov	r1, r8
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	47c8      	blx	r9
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d0e6      	beq.n	8001c92 <_printf_common+0xae>
 8001cc4:	3601      	adds	r6, #1
 8001cc6:	e7d9      	b.n	8001c7c <_printf_common+0x98>

08001cc8 <_printf_i>:
 8001cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ccc:	7e0f      	ldrb	r7, [r1, #24]
 8001cce:	4691      	mov	r9, r2
 8001cd0:	4680      	mov	r8, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	2f78      	cmp	r7, #120	@ 0x78
 8001cd6:	469a      	mov	sl, r3
 8001cd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001cde:	d807      	bhi.n	8001cf0 <_printf_i+0x28>
 8001ce0:	2f62      	cmp	r7, #98	@ 0x62
 8001ce2:	d80a      	bhi.n	8001cfa <_printf_i+0x32>
 8001ce4:	2f00      	cmp	r7, #0
 8001ce6:	f000 80d2 	beq.w	8001e8e <_printf_i+0x1c6>
 8001cea:	2f58      	cmp	r7, #88	@ 0x58
 8001cec:	f000 80b9 	beq.w	8001e62 <_printf_i+0x19a>
 8001cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001cf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001cf8:	e03a      	b.n	8001d70 <_printf_i+0xa8>
 8001cfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001cfe:	2b15      	cmp	r3, #21
 8001d00:	d8f6      	bhi.n	8001cf0 <_printf_i+0x28>
 8001d02:	a101      	add	r1, pc, #4	@ (adr r1, 8001d08 <_printf_i+0x40>)
 8001d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d08:	08001d61 	.word	0x08001d61
 8001d0c:	08001d75 	.word	0x08001d75
 8001d10:	08001cf1 	.word	0x08001cf1
 8001d14:	08001cf1 	.word	0x08001cf1
 8001d18:	08001cf1 	.word	0x08001cf1
 8001d1c:	08001cf1 	.word	0x08001cf1
 8001d20:	08001d75 	.word	0x08001d75
 8001d24:	08001cf1 	.word	0x08001cf1
 8001d28:	08001cf1 	.word	0x08001cf1
 8001d2c:	08001cf1 	.word	0x08001cf1
 8001d30:	08001cf1 	.word	0x08001cf1
 8001d34:	08001e75 	.word	0x08001e75
 8001d38:	08001d9f 	.word	0x08001d9f
 8001d3c:	08001e2f 	.word	0x08001e2f
 8001d40:	08001cf1 	.word	0x08001cf1
 8001d44:	08001cf1 	.word	0x08001cf1
 8001d48:	08001e97 	.word	0x08001e97
 8001d4c:	08001cf1 	.word	0x08001cf1
 8001d50:	08001d9f 	.word	0x08001d9f
 8001d54:	08001cf1 	.word	0x08001cf1
 8001d58:	08001cf1 	.word	0x08001cf1
 8001d5c:	08001e37 	.word	0x08001e37
 8001d60:	6833      	ldr	r3, [r6, #0]
 8001d62:	1d1a      	adds	r2, r3, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6032      	str	r2, [r6, #0]
 8001d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d70:	2301      	movs	r3, #1
 8001d72:	e09d      	b.n	8001eb0 <_printf_i+0x1e8>
 8001d74:	6833      	ldr	r3, [r6, #0]
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	1d19      	adds	r1, r3, #4
 8001d7a:	6031      	str	r1, [r6, #0]
 8001d7c:	0606      	lsls	r6, r0, #24
 8001d7e:	d501      	bpl.n	8001d84 <_printf_i+0xbc>
 8001d80:	681d      	ldr	r5, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <_printf_i+0xc4>
 8001d84:	0645      	lsls	r5, r0, #25
 8001d86:	d5fb      	bpl.n	8001d80 <_printf_i+0xb8>
 8001d88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	da03      	bge.n	8001d98 <_printf_i+0xd0>
 8001d90:	232d      	movs	r3, #45	@ 0x2d
 8001d92:	426d      	negs	r5, r5
 8001d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d98:	4859      	ldr	r0, [pc, #356]	@ (8001f00 <_printf_i+0x238>)
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	e011      	b.n	8001dc2 <_printf_i+0xfa>
 8001d9e:	6821      	ldr	r1, [r4, #0]
 8001da0:	6833      	ldr	r3, [r6, #0]
 8001da2:	0608      	lsls	r0, r1, #24
 8001da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001da8:	d402      	bmi.n	8001db0 <_printf_i+0xe8>
 8001daa:	0649      	lsls	r1, r1, #25
 8001dac:	bf48      	it	mi
 8001dae:	b2ad      	uxthmi	r5, r5
 8001db0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001db2:	6033      	str	r3, [r6, #0]
 8001db4:	4852      	ldr	r0, [pc, #328]	@ (8001f00 <_printf_i+0x238>)
 8001db6:	bf14      	ite	ne
 8001db8:	230a      	movne	r3, #10
 8001dba:	2308      	moveq	r3, #8
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001dc2:	6866      	ldr	r6, [r4, #4]
 8001dc4:	2e00      	cmp	r6, #0
 8001dc6:	60a6      	str	r6, [r4, #8]
 8001dc8:	bfa2      	ittt	ge
 8001dca:	6821      	ldrge	r1, [r4, #0]
 8001dcc:	f021 0104 	bicge.w	r1, r1, #4
 8001dd0:	6021      	strge	r1, [r4, #0]
 8001dd2:	b90d      	cbnz	r5, 8001dd8 <_printf_i+0x110>
 8001dd4:	2e00      	cmp	r6, #0
 8001dd6:	d04b      	beq.n	8001e70 <_printf_i+0x1a8>
 8001dd8:	4616      	mov	r6, r2
 8001dda:	fbb5 f1f3 	udiv	r1, r5, r3
 8001dde:	fb03 5711 	mls	r7, r3, r1, r5
 8001de2:	5dc7      	ldrb	r7, [r0, r7]
 8001de4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001de8:	462f      	mov	r7, r5
 8001dea:	460d      	mov	r5, r1
 8001dec:	42bb      	cmp	r3, r7
 8001dee:	d9f4      	bls.n	8001dda <_printf_i+0x112>
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d10b      	bne.n	8001e0c <_printf_i+0x144>
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	07df      	lsls	r7, r3, #31
 8001df8:	d508      	bpl.n	8001e0c <_printf_i+0x144>
 8001dfa:	6923      	ldr	r3, [r4, #16]
 8001dfc:	6861      	ldr	r1, [r4, #4]
 8001dfe:	4299      	cmp	r1, r3
 8001e00:	bfde      	ittt	le
 8001e02:	2330      	movle	r3, #48	@ 0x30
 8001e04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e0c:	1b92      	subs	r2, r2, r6
 8001e0e:	6122      	str	r2, [r4, #16]
 8001e10:	464b      	mov	r3, r9
 8001e12:	aa03      	add	r2, sp, #12
 8001e14:	4621      	mov	r1, r4
 8001e16:	4640      	mov	r0, r8
 8001e18:	f8cd a000 	str.w	sl, [sp]
 8001e1c:	f7ff fee2 	bl	8001be4 <_printf_common>
 8001e20:	3001      	adds	r0, #1
 8001e22:	d14a      	bne.n	8001eba <_printf_i+0x1f2>
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	b004      	add	sp, #16
 8001e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	2778      	movs	r7, #120	@ 0x78
 8001e38:	4832      	ldr	r0, [pc, #200]	@ (8001f04 <_printf_i+0x23c>)
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001e40:	061f      	lsls	r7, r3, #24
 8001e42:	6831      	ldr	r1, [r6, #0]
 8001e44:	f851 5b04 	ldr.w	r5, [r1], #4
 8001e48:	d402      	bmi.n	8001e50 <_printf_i+0x188>
 8001e4a:	065f      	lsls	r7, r3, #25
 8001e4c:	bf48      	it	mi
 8001e4e:	b2ad      	uxthmi	r5, r5
 8001e50:	6031      	str	r1, [r6, #0]
 8001e52:	07d9      	lsls	r1, r3, #31
 8001e54:	bf44      	itt	mi
 8001e56:	f043 0320 	orrmi.w	r3, r3, #32
 8001e5a:	6023      	strmi	r3, [r4, #0]
 8001e5c:	b11d      	cbz	r5, 8001e66 <_printf_i+0x19e>
 8001e5e:	2310      	movs	r3, #16
 8001e60:	e7ac      	b.n	8001dbc <_printf_i+0xf4>
 8001e62:	4827      	ldr	r0, [pc, #156]	@ (8001f00 <_printf_i+0x238>)
 8001e64:	e7e9      	b.n	8001e3a <_printf_i+0x172>
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	f023 0320 	bic.w	r3, r3, #32
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	e7f6      	b.n	8001e5e <_printf_i+0x196>
 8001e70:	4616      	mov	r6, r2
 8001e72:	e7bd      	b.n	8001df0 <_printf_i+0x128>
 8001e74:	6833      	ldr	r3, [r6, #0]
 8001e76:	6825      	ldr	r5, [r4, #0]
 8001e78:	1d18      	adds	r0, r3, #4
 8001e7a:	6961      	ldr	r1, [r4, #20]
 8001e7c:	6030      	str	r0, [r6, #0]
 8001e7e:	062e      	lsls	r6, r5, #24
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	d501      	bpl.n	8001e88 <_printf_i+0x1c0>
 8001e84:	6019      	str	r1, [r3, #0]
 8001e86:	e002      	b.n	8001e8e <_printf_i+0x1c6>
 8001e88:	0668      	lsls	r0, r5, #25
 8001e8a:	d5fb      	bpl.n	8001e84 <_printf_i+0x1bc>
 8001e8c:	8019      	strh	r1, [r3, #0]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	4616      	mov	r6, r2
 8001e92:	6123      	str	r3, [r4, #16]
 8001e94:	e7bc      	b.n	8001e10 <_printf_i+0x148>
 8001e96:	6833      	ldr	r3, [r6, #0]
 8001e98:	2100      	movs	r1, #0
 8001e9a:	1d1a      	adds	r2, r3, #4
 8001e9c:	6032      	str	r2, [r6, #0]
 8001e9e:	681e      	ldr	r6, [r3, #0]
 8001ea0:	6862      	ldr	r2, [r4, #4]
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f000 f9e3 	bl	800226e <memchr>
 8001ea8:	b108      	cbz	r0, 8001eae <_printf_i+0x1e6>
 8001eaa:	1b80      	subs	r0, r0, r6
 8001eac:	6060      	str	r0, [r4, #4]
 8001eae:	6863      	ldr	r3, [r4, #4]
 8001eb0:	6123      	str	r3, [r4, #16]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001eb8:	e7aa      	b.n	8001e10 <_printf_i+0x148>
 8001eba:	6923      	ldr	r3, [r4, #16]
 8001ebc:	4632      	mov	r2, r6
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	4640      	mov	r0, r8
 8001ec2:	47d0      	blx	sl
 8001ec4:	3001      	adds	r0, #1
 8001ec6:	d0ad      	beq.n	8001e24 <_printf_i+0x15c>
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	079b      	lsls	r3, r3, #30
 8001ecc:	d413      	bmi.n	8001ef6 <_printf_i+0x22e>
 8001ece:	68e0      	ldr	r0, [r4, #12]
 8001ed0:	9b03      	ldr	r3, [sp, #12]
 8001ed2:	4298      	cmp	r0, r3
 8001ed4:	bfb8      	it	lt
 8001ed6:	4618      	movlt	r0, r3
 8001ed8:	e7a6      	b.n	8001e28 <_printf_i+0x160>
 8001eda:	2301      	movs	r3, #1
 8001edc:	4632      	mov	r2, r6
 8001ede:	4649      	mov	r1, r9
 8001ee0:	4640      	mov	r0, r8
 8001ee2:	47d0      	blx	sl
 8001ee4:	3001      	adds	r0, #1
 8001ee6:	d09d      	beq.n	8001e24 <_printf_i+0x15c>
 8001ee8:	3501      	adds	r5, #1
 8001eea:	68e3      	ldr	r3, [r4, #12]
 8001eec:	9903      	ldr	r1, [sp, #12]
 8001eee:	1a5b      	subs	r3, r3, r1
 8001ef0:	42ab      	cmp	r3, r5
 8001ef2:	dcf2      	bgt.n	8001eda <_printf_i+0x212>
 8001ef4:	e7eb      	b.n	8001ece <_printf_i+0x206>
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	f104 0619 	add.w	r6, r4, #25
 8001efc:	e7f5      	b.n	8001eea <_printf_i+0x222>
 8001efe:	bf00      	nop
 8001f00:	0800436c 	.word	0x0800436c
 8001f04:	0800437d 	.word	0x0800437d

08001f08 <std>:
 8001f08:	2300      	movs	r3, #0
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	6083      	str	r3, [r0, #8]
 8001f10:	8181      	strh	r1, [r0, #12]
 8001f12:	4619      	mov	r1, r3
 8001f14:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f16:	81c2      	strh	r2, [r0, #14]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	6183      	str	r3, [r0, #24]
 8001f1c:	e9c0 3300 	strd	r3, r3, [r0]
 8001f20:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f24:	305c      	adds	r0, #92	@ 0x5c
 8001f26:	f000 f914 	bl	8002152 <memset>
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <std+0x58>)
 8001f2c:	6224      	str	r4, [r4, #32]
 8001f2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <std+0x5c>)
 8001f32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <std+0x60>)
 8001f36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <std+0x64>)
 8001f3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <std+0x68>)
 8001f3e:	429c      	cmp	r4, r3
 8001f40:	d006      	beq.n	8001f50 <std+0x48>
 8001f42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f46:	4294      	cmp	r4, r2
 8001f48:	d002      	beq.n	8001f50 <std+0x48>
 8001f4a:	33d0      	adds	r3, #208	@ 0xd0
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	d105      	bne.n	8001f5c <std+0x54>
 8001f50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f58:	f000 b986 	b.w	8002268 <__retarget_lock_init_recursive>
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop
 8001f60:	080020cd 	.word	0x080020cd
 8001f64:	080020ef 	.word	0x080020ef
 8001f68:	08002127 	.word	0x08002127
 8001f6c:	0800214b 	.word	0x0800214b
 8001f70:	20000328 	.word	0x20000328

08001f74 <stdio_exit_handler>:
 8001f74:	4a02      	ldr	r2, [pc, #8]	@ (8001f80 <stdio_exit_handler+0xc>)
 8001f76:	4903      	ldr	r1, [pc, #12]	@ (8001f84 <stdio_exit_handler+0x10>)
 8001f78:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <stdio_exit_handler+0x14>)
 8001f7a:	f000 b869 	b.w	8002050 <_fwalk_sglue>
 8001f7e:	bf00      	nop
 8001f80:	20000004 	.word	0x20000004
 8001f84:	08003bf9 	.word	0x08003bf9
 8001f88:	20000014 	.word	0x20000014

08001f8c <cleanup_stdio>:
 8001f8c:	6841      	ldr	r1, [r0, #4]
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <cleanup_stdio+0x34>)
 8001f90:	4299      	cmp	r1, r3
 8001f92:	b510      	push	{r4, lr}
 8001f94:	4604      	mov	r4, r0
 8001f96:	d001      	beq.n	8001f9c <cleanup_stdio+0x10>
 8001f98:	f001 fe2e 	bl	8003bf8 <_fflush_r>
 8001f9c:	68a1      	ldr	r1, [r4, #8]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <cleanup_stdio+0x38>)
 8001fa0:	4299      	cmp	r1, r3
 8001fa2:	d002      	beq.n	8001faa <cleanup_stdio+0x1e>
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f001 fe27 	bl	8003bf8 <_fflush_r>
 8001faa:	68e1      	ldr	r1, [r4, #12]
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <cleanup_stdio+0x3c>)
 8001fae:	4299      	cmp	r1, r3
 8001fb0:	d004      	beq.n	8001fbc <cleanup_stdio+0x30>
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fb8:	f001 be1e 	b.w	8003bf8 <_fflush_r>
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000328 	.word	0x20000328
 8001fc4:	20000390 	.word	0x20000390
 8001fc8:	200003f8 	.word	0x200003f8

08001fcc <global_stdio_init.part.0>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <global_stdio_init.part.0+0x30>)
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	4c0b      	ldr	r4, [pc, #44]	@ (8002000 <global_stdio_init.part.0+0x34>)
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002004 <global_stdio_init.part.0+0x38>)
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f7ff ff94 	bl	8001f08 <std>
 8001fe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2109      	movs	r1, #9
 8001fe8:	f7ff ff8e 	bl	8001f08 <std>
 8001fec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	2112      	movs	r1, #18
 8001ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff8:	f7ff bf86 	b.w	8001f08 <std>
 8001ffc:	20000460 	.word	0x20000460
 8002000:	20000328 	.word	0x20000328
 8002004:	08001f75 	.word	0x08001f75

08002008 <__sfp_lock_acquire>:
 8002008:	4801      	ldr	r0, [pc, #4]	@ (8002010 <__sfp_lock_acquire+0x8>)
 800200a:	f000 b92e 	b.w	800226a <__retarget_lock_acquire_recursive>
 800200e:	bf00      	nop
 8002010:	20000469 	.word	0x20000469

08002014 <__sfp_lock_release>:
 8002014:	4801      	ldr	r0, [pc, #4]	@ (800201c <__sfp_lock_release+0x8>)
 8002016:	f000 b929 	b.w	800226c <__retarget_lock_release_recursive>
 800201a:	bf00      	nop
 800201c:	20000469 	.word	0x20000469

08002020 <__sinit>:
 8002020:	b510      	push	{r4, lr}
 8002022:	4604      	mov	r4, r0
 8002024:	f7ff fff0 	bl	8002008 <__sfp_lock_acquire>
 8002028:	6a23      	ldr	r3, [r4, #32]
 800202a:	b11b      	cbz	r3, 8002034 <__sinit+0x14>
 800202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002030:	f7ff bff0 	b.w	8002014 <__sfp_lock_release>
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__sinit+0x28>)
 8002036:	6223      	str	r3, [r4, #32]
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__sinit+0x2c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f5      	bne.n	800202c <__sinit+0xc>
 8002040:	f7ff ffc4 	bl	8001fcc <global_stdio_init.part.0>
 8002044:	e7f2      	b.n	800202c <__sinit+0xc>
 8002046:	bf00      	nop
 8002048:	08001f8d 	.word	0x08001f8d
 800204c:	20000460 	.word	0x20000460

08002050 <_fwalk_sglue>:
 8002050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002054:	4607      	mov	r7, r0
 8002056:	4688      	mov	r8, r1
 8002058:	4614      	mov	r4, r2
 800205a:	2600      	movs	r6, #0
 800205c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002060:	f1b9 0901 	subs.w	r9, r9, #1
 8002064:	d505      	bpl.n	8002072 <_fwalk_sglue+0x22>
 8002066:	6824      	ldr	r4, [r4, #0]
 8002068:	2c00      	cmp	r4, #0
 800206a:	d1f7      	bne.n	800205c <_fwalk_sglue+0xc>
 800206c:	4630      	mov	r0, r6
 800206e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002072:	89ab      	ldrh	r3, [r5, #12]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d907      	bls.n	8002088 <_fwalk_sglue+0x38>
 8002078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800207c:	3301      	adds	r3, #1
 800207e:	d003      	beq.n	8002088 <_fwalk_sglue+0x38>
 8002080:	4629      	mov	r1, r5
 8002082:	4638      	mov	r0, r7
 8002084:	47c0      	blx	r8
 8002086:	4306      	orrs	r6, r0
 8002088:	3568      	adds	r5, #104	@ 0x68
 800208a:	e7e9      	b.n	8002060 <_fwalk_sglue+0x10>

0800208c <siprintf>:
 800208c:	b40e      	push	{r1, r2, r3}
 800208e:	b500      	push	{lr}
 8002090:	b09c      	sub	sp, #112	@ 0x70
 8002092:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002096:	ab1d      	add	r3, sp, #116	@ 0x74
 8002098:	9002      	str	r0, [sp, #8]
 800209a:	9006      	str	r0, [sp, #24]
 800209c:	9107      	str	r1, [sp, #28]
 800209e:	9104      	str	r1, [sp, #16]
 80020a0:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <siprintf+0x38>)
 80020a2:	4909      	ldr	r1, [pc, #36]	@ (80020c8 <siprintf+0x3c>)
 80020a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80020a8:	9105      	str	r1, [sp, #20]
 80020aa:	a902      	add	r1, sp, #8
 80020ac:	6800      	ldr	r0, [r0, #0]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	f001 fc22 	bl	80038f8 <_svfiprintf_r>
 80020b4:	9b02      	ldr	r3, [sp, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	b01c      	add	sp, #112	@ 0x70
 80020bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80020c0:	b003      	add	sp, #12
 80020c2:	4770      	bx	lr
 80020c4:	20000010 	.word	0x20000010
 80020c8:	ffff0208 	.word	0xffff0208

080020cc <__sread>:
 80020cc:	b510      	push	{r4, lr}
 80020ce:	460c      	mov	r4, r1
 80020d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d4:	f000 f87a 	bl	80021cc <_read_r>
 80020d8:	2800      	cmp	r0, #0
 80020da:	bfab      	itete	ge
 80020dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80020de:	89a3      	ldrhlt	r3, [r4, #12]
 80020e0:	181b      	addge	r3, r3, r0
 80020e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80020e6:	bfac      	ite	ge
 80020e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80020ea:	81a3      	strhlt	r3, [r4, #12]
 80020ec:	bd10      	pop	{r4, pc}

080020ee <__swrite>:
 80020ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f2:	461f      	mov	r7, r3
 80020f4:	898b      	ldrh	r3, [r1, #12]
 80020f6:	4605      	mov	r5, r0
 80020f8:	460c      	mov	r4, r1
 80020fa:	05db      	lsls	r3, r3, #23
 80020fc:	4616      	mov	r6, r2
 80020fe:	d505      	bpl.n	800210c <__swrite+0x1e>
 8002100:	2302      	movs	r3, #2
 8002102:	2200      	movs	r2, #0
 8002104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002108:	f000 f84e 	bl	80021a8 <_lseek_r>
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	4632      	mov	r2, r6
 8002110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002114:	4628      	mov	r0, r5
 8002116:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800211a:	81a3      	strh	r3, [r4, #12]
 800211c:	463b      	mov	r3, r7
 800211e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002122:	f000 b865 	b.w	80021f0 <_write_r>

08002126 <__sseek>:
 8002126:	b510      	push	{r4, lr}
 8002128:	460c      	mov	r4, r1
 800212a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800212e:	f000 f83b 	bl	80021a8 <_lseek_r>
 8002132:	1c43      	adds	r3, r0, #1
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	bf15      	itete	ne
 8002138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800213a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800213e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002142:	81a3      	strheq	r3, [r4, #12]
 8002144:	bf18      	it	ne
 8002146:	81a3      	strhne	r3, [r4, #12]
 8002148:	bd10      	pop	{r4, pc}

0800214a <__sclose>:
 800214a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800214e:	f000 b81b 	b.w	8002188 <_close_r>

08002152 <memset>:
 8002152:	4402      	add	r2, r0
 8002154:	4603      	mov	r3, r0
 8002156:	4293      	cmp	r3, r2
 8002158:	d100      	bne.n	800215c <memset+0xa>
 800215a:	4770      	bx	lr
 800215c:	f803 1b01 	strb.w	r1, [r3], #1
 8002160:	e7f9      	b.n	8002156 <memset+0x4>

08002162 <strcat>:
 8002162:	4602      	mov	r2, r0
 8002164:	b510      	push	{r4, lr}
 8002166:	7814      	ldrb	r4, [r2, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	3201      	adds	r2, #1
 800216c:	2c00      	cmp	r4, #0
 800216e:	d1fa      	bne.n	8002166 <strcat+0x4>
 8002170:	3b01      	subs	r3, #1
 8002172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800217a:	2a00      	cmp	r2, #0
 800217c:	d1f9      	bne.n	8002172 <strcat+0x10>
 800217e:	bd10      	pop	{r4, pc}

08002180 <_localeconv_r>:
 8002180:	4800      	ldr	r0, [pc, #0]	@ (8002184 <_localeconv_r+0x4>)
 8002182:	4770      	bx	lr
 8002184:	20000150 	.word	0x20000150

08002188 <_close_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	2300      	movs	r3, #0
 800218c:	4d05      	ldr	r5, [pc, #20]	@ (80021a4 <_close_r+0x1c>)
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	602b      	str	r3, [r5, #0]
 8002194:	f7fe ffbc 	bl	8001110 <_close>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_close_r+0x1a>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_close_r+0x1a>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	20000464 	.word	0x20000464

080021a8 <_lseek_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	4d06      	ldr	r5, [pc, #24]	@ (80021c8 <_lseek_r+0x20>)
 80021ae:	4608      	mov	r0, r1
 80021b0:	4611      	mov	r1, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	602a      	str	r2, [r5, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f7fe ffd1 	bl	800115e <_lseek>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d102      	bne.n	80021c6 <_lseek_r+0x1e>
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	b103      	cbz	r3, 80021c6 <_lseek_r+0x1e>
 80021c4:	6023      	str	r3, [r4, #0]
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	20000464 	.word	0x20000464

080021cc <_read_r>:
 80021cc:	b538      	push	{r3, r4, r5, lr}
 80021ce:	4604      	mov	r4, r0
 80021d0:	4d06      	ldr	r5, [pc, #24]	@ (80021ec <_read_r+0x20>)
 80021d2:	4608      	mov	r0, r1
 80021d4:	4611      	mov	r1, r2
 80021d6:	2200      	movs	r2, #0
 80021d8:	602a      	str	r2, [r5, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	f7fe ff5f 	bl	800109e <_read>
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	d102      	bne.n	80021ea <_read_r+0x1e>
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	b103      	cbz	r3, 80021ea <_read_r+0x1e>
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	bd38      	pop	{r3, r4, r5, pc}
 80021ec:	20000464 	.word	0x20000464

080021f0 <_write_r>:
 80021f0:	b538      	push	{r3, r4, r5, lr}
 80021f2:	4604      	mov	r4, r0
 80021f4:	4d06      	ldr	r5, [pc, #24]	@ (8002210 <_write_r+0x20>)
 80021f6:	4608      	mov	r0, r1
 80021f8:	4611      	mov	r1, r2
 80021fa:	2200      	movs	r2, #0
 80021fc:	602a      	str	r2, [r5, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	f7fe ff6a 	bl	80010d8 <_write>
 8002204:	1c43      	adds	r3, r0, #1
 8002206:	d102      	bne.n	800220e <_write_r+0x1e>
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	b103      	cbz	r3, 800220e <_write_r+0x1e>
 800220c:	6023      	str	r3, [r4, #0]
 800220e:	bd38      	pop	{r3, r4, r5, pc}
 8002210:	20000464 	.word	0x20000464

08002214 <__errno>:
 8002214:	4b01      	ldr	r3, [pc, #4]	@ (800221c <__errno+0x8>)
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000010 	.word	0x20000010

08002220 <__libc_init_array>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	4d0d      	ldr	r5, [pc, #52]	@ (8002258 <__libc_init_array+0x38>)
 8002224:	2600      	movs	r6, #0
 8002226:	4c0d      	ldr	r4, [pc, #52]	@ (800225c <__libc_init_array+0x3c>)
 8002228:	1b64      	subs	r4, r4, r5
 800222a:	10a4      	asrs	r4, r4, #2
 800222c:	42a6      	cmp	r6, r4
 800222e:	d109      	bne.n	8002244 <__libc_init_array+0x24>
 8002230:	4d0b      	ldr	r5, [pc, #44]	@ (8002260 <__libc_init_array+0x40>)
 8002232:	2600      	movs	r6, #0
 8002234:	4c0b      	ldr	r4, [pc, #44]	@ (8002264 <__libc_init_array+0x44>)
 8002236:	f002 f87d 	bl	8004334 <_init>
 800223a:	1b64      	subs	r4, r4, r5
 800223c:	10a4      	asrs	r4, r4, #2
 800223e:	42a6      	cmp	r6, r4
 8002240:	d105      	bne.n	800224e <__libc_init_array+0x2e>
 8002242:	bd70      	pop	{r4, r5, r6, pc}
 8002244:	f855 3b04 	ldr.w	r3, [r5], #4
 8002248:	3601      	adds	r6, #1
 800224a:	4798      	blx	r3
 800224c:	e7ee      	b.n	800222c <__libc_init_array+0xc>
 800224e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002252:	3601      	adds	r6, #1
 8002254:	4798      	blx	r3
 8002256:	e7f2      	b.n	800223e <__libc_init_array+0x1e>
 8002258:	080046d0 	.word	0x080046d0
 800225c:	080046d0 	.word	0x080046d0
 8002260:	080046d0 	.word	0x080046d0
 8002264:	080046d4 	.word	0x080046d4

08002268 <__retarget_lock_init_recursive>:
 8002268:	4770      	bx	lr

0800226a <__retarget_lock_acquire_recursive>:
 800226a:	4770      	bx	lr

0800226c <__retarget_lock_release_recursive>:
 800226c:	4770      	bx	lr

0800226e <memchr>:
 800226e:	b2c9      	uxtb	r1, r1
 8002270:	4603      	mov	r3, r0
 8002272:	4402      	add	r2, r0
 8002274:	b510      	push	{r4, lr}
 8002276:	4293      	cmp	r3, r2
 8002278:	4618      	mov	r0, r3
 800227a:	d101      	bne.n	8002280 <memchr+0x12>
 800227c:	2000      	movs	r0, #0
 800227e:	e003      	b.n	8002288 <memchr+0x1a>
 8002280:	7804      	ldrb	r4, [r0, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	428c      	cmp	r4, r1
 8002286:	d1f6      	bne.n	8002276 <memchr+0x8>
 8002288:	bd10      	pop	{r4, pc}

0800228a <quorem>:
 800228a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800228e:	6903      	ldr	r3, [r0, #16]
 8002290:	4607      	mov	r7, r0
 8002292:	690c      	ldr	r4, [r1, #16]
 8002294:	42a3      	cmp	r3, r4
 8002296:	f2c0 8083 	blt.w	80023a0 <quorem+0x116>
 800229a:	3c01      	subs	r4, #1
 800229c:	f100 0514 	add.w	r5, r0, #20
 80022a0:	f101 0814 	add.w	r8, r1, #20
 80022a4:	00a3      	lsls	r3, r4, #2
 80022a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80022aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80022ba:	3301      	adds	r3, #1
 80022bc:	429a      	cmp	r2, r3
 80022be:	fbb2 f6f3 	udiv	r6, r2, r3
 80022c2:	d331      	bcc.n	8002328 <quorem+0x9e>
 80022c4:	f04f 0a00 	mov.w	sl, #0
 80022c8:	46c4      	mov	ip, r8
 80022ca:	46ae      	mov	lr, r5
 80022cc:	46d3      	mov	fp, sl
 80022ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80022d2:	b298      	uxth	r0, r3
 80022d4:	45e1      	cmp	r9, ip
 80022d6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80022da:	fb06 a000 	mla	r0, r6, r0, sl
 80022de:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80022e2:	b280      	uxth	r0, r0
 80022e4:	fb06 2303 	mla	r3, r6, r3, r2
 80022e8:	f8de 2000 	ldr.w	r2, [lr]
 80022ec:	b292      	uxth	r2, r2
 80022ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80022f2:	eba2 0200 	sub.w	r2, r2, r0
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	f8de 0000 	ldr.w	r0, [lr]
 80022fc:	445a      	add	r2, fp
 80022fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002302:	b292      	uxth	r2, r2
 8002304:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002308:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800230c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002310:	f84e 2b04 	str.w	r2, [lr], #4
 8002314:	d2db      	bcs.n	80022ce <quorem+0x44>
 8002316:	9b00      	ldr	r3, [sp, #0]
 8002318:	58eb      	ldr	r3, [r5, r3]
 800231a:	b92b      	cbnz	r3, 8002328 <quorem+0x9e>
 800231c:	9b01      	ldr	r3, [sp, #4]
 800231e:	3b04      	subs	r3, #4
 8002320:	429d      	cmp	r5, r3
 8002322:	461a      	mov	r2, r3
 8002324:	d330      	bcc.n	8002388 <quorem+0xfe>
 8002326:	613c      	str	r4, [r7, #16]
 8002328:	4638      	mov	r0, r7
 800232a:	f001 f97d 	bl	8003628 <__mcmp>
 800232e:	2800      	cmp	r0, #0
 8002330:	db26      	blt.n	8002380 <quorem+0xf6>
 8002332:	4629      	mov	r1, r5
 8002334:	2000      	movs	r0, #0
 8002336:	f858 2b04 	ldr.w	r2, [r8], #4
 800233a:	f8d1 c000 	ldr.w	ip, [r1]
 800233e:	fa1f fe82 	uxth.w	lr, r2
 8002342:	45c1      	cmp	r9, r8
 8002344:	fa1f f38c 	uxth.w	r3, ip
 8002348:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800234c:	eba3 030e 	sub.w	r3, r3, lr
 8002350:	4403      	add	r3, r0
 8002352:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002356:	b29b      	uxth	r3, r3
 8002358:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800235c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002360:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002364:	f841 3b04 	str.w	r3, [r1], #4
 8002368:	d2e5      	bcs.n	8002336 <quorem+0xac>
 800236a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800236e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002372:	b922      	cbnz	r2, 800237e <quorem+0xf4>
 8002374:	3b04      	subs	r3, #4
 8002376:	429d      	cmp	r5, r3
 8002378:	461a      	mov	r2, r3
 800237a:	d30b      	bcc.n	8002394 <quorem+0x10a>
 800237c:	613c      	str	r4, [r7, #16]
 800237e:	3601      	adds	r6, #1
 8002380:	4630      	mov	r0, r6
 8002382:	b003      	add	sp, #12
 8002384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	3b04      	subs	r3, #4
 800238c:	2a00      	cmp	r2, #0
 800238e:	d1ca      	bne.n	8002326 <quorem+0x9c>
 8002390:	3c01      	subs	r4, #1
 8002392:	e7c5      	b.n	8002320 <quorem+0x96>
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	3b04      	subs	r3, #4
 8002398:	2a00      	cmp	r2, #0
 800239a:	d1ef      	bne.n	800237c <quorem+0xf2>
 800239c:	3c01      	subs	r4, #1
 800239e:	e7ea      	b.n	8002376 <quorem+0xec>
 80023a0:	2000      	movs	r0, #0
 80023a2:	e7ee      	b.n	8002382 <quorem+0xf8>
 80023a4:	0000      	movs	r0, r0
	...

080023a8 <_dtoa_r>:
 80023a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ac:	69c7      	ldr	r7, [r0, #28]
 80023ae:	b099      	sub	sp, #100	@ 0x64
 80023b0:	4683      	mov	fp, r0
 80023b2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80023b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80023b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80023b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80023ba:	ec55 4b10 	vmov	r4, r5, d0
 80023be:	ed8d 0b02 	vstr	d0, [sp, #8]
 80023c2:	b97f      	cbnz	r7, 80023e4 <_dtoa_r+0x3c>
 80023c4:	2010      	movs	r0, #16
 80023c6:	f000 fdfd 	bl	8002fc4 <malloc>
 80023ca:	4602      	mov	r2, r0
 80023cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80023d0:	b920      	cbnz	r0, 80023dc <_dtoa_r+0x34>
 80023d2:	4ba7      	ldr	r3, [pc, #668]	@ (8002670 <_dtoa_r+0x2c8>)
 80023d4:	21ef      	movs	r1, #239	@ 0xef
 80023d6:	48a7      	ldr	r0, [pc, #668]	@ (8002674 <_dtoa_r+0x2cc>)
 80023d8:	f001 fc6e 	bl	8003cb8 <__assert_func>
 80023dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80023e0:	6007      	str	r7, [r0, #0]
 80023e2:	60c7      	str	r7, [r0, #12]
 80023e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	b159      	cbz	r1, 8002404 <_dtoa_r+0x5c>
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	2301      	movs	r3, #1
 80023f0:	4658      	mov	r0, fp
 80023f2:	4093      	lsls	r3, r2
 80023f4:	604a      	str	r2, [r1, #4]
 80023f6:	608b      	str	r3, [r1, #8]
 80023f8:	f000 feda 	bl	80031b0 <_Bfree>
 80023fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	1e2b      	subs	r3, r5, #0
 8002406:	bfb7      	itett	lt
 8002408:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800240c:	2300      	movge	r3, #0
 800240e:	2201      	movlt	r2, #1
 8002410:	9303      	strlt	r3, [sp, #12]
 8002412:	bfa8      	it	ge
 8002414:	6033      	strge	r3, [r6, #0]
 8002416:	9f03      	ldr	r7, [sp, #12]
 8002418:	4b97      	ldr	r3, [pc, #604]	@ (8002678 <_dtoa_r+0x2d0>)
 800241a:	bfb8      	it	lt
 800241c:	6032      	strlt	r2, [r6, #0]
 800241e:	43bb      	bics	r3, r7
 8002420:	d112      	bne.n	8002448 <_dtoa_r+0xa0>
 8002422:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002426:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800242e:	4323      	orrs	r3, r4
 8002430:	f000 854c 	beq.w	8002ecc <_dtoa_r+0xb24>
 8002434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002436:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800268c <_dtoa_r+0x2e4>
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 854e 	beq.w	8002edc <_dtoa_r+0xb34>
 8002440:	f10a 0303 	add.w	r3, sl, #3
 8002444:	f000 bd48 	b.w	8002ed8 <_dtoa_r+0xb30>
 8002448:	ed9d 7b02 	vldr	d7, [sp, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	2300      	movs	r3, #0
 8002450:	ec51 0b17 	vmov	r0, r1, d7
 8002454:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002458:	f7fe fb1a 	bl	8000a90 <__aeabi_dcmpeq>
 800245c:	4680      	mov	r8, r0
 800245e:	b158      	cbz	r0, 8002478 <_dtoa_r+0xd0>
 8002460:	2301      	movs	r3, #1
 8002462:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002468:	b113      	cbz	r3, 8002470 <_dtoa_r+0xc8>
 800246a:	4b84      	ldr	r3, [pc, #528]	@ (800267c <_dtoa_r+0x2d4>)
 800246c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8002690 <_dtoa_r+0x2e8>
 8002474:	f000 bd32 	b.w	8002edc <_dtoa_r+0xb34>
 8002478:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800247c:	aa16      	add	r2, sp, #88	@ 0x58
 800247e:	a917      	add	r1, sp, #92	@ 0x5c
 8002480:	4658      	mov	r0, fp
 8002482:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002486:	f001 f983 	bl	8003790 <__d2b>
 800248a:	4681      	mov	r9, r0
 800248c:	2e00      	cmp	r6, #0
 800248e:	d075      	beq.n	800257c <_dtoa_r+0x1d4>
 8002490:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002492:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002496:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800249a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80024a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80024a6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80024aa:	4619      	mov	r1, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	4b74      	ldr	r3, [pc, #464]	@ (8002680 <_dtoa_r+0x2d8>)
 80024b0:	f7fd fece 	bl	8000250 <__aeabi_dsub>
 80024b4:	a368      	add	r3, pc, #416	@ (adr r3, 8002658 <_dtoa_r+0x2b0>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f881 	bl	80005c0 <__aeabi_dmul>
 80024be:	a368      	add	r3, pc, #416	@ (adr r3, 8002660 <_dtoa_r+0x2b8>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fd fec6 	bl	8000254 <__adddf3>
 80024c8:	4604      	mov	r4, r0
 80024ca:	460d      	mov	r5, r1
 80024cc:	4630      	mov	r0, r6
 80024ce:	f7fe f80d 	bl	80004ec <__aeabi_i2d>
 80024d2:	a365      	add	r3, pc, #404	@ (adr r3, 8002668 <_dtoa_r+0x2c0>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe f872 	bl	80005c0 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fd feb6 	bl	8000254 <__adddf3>
 80024e8:	4604      	mov	r4, r0
 80024ea:	460d      	mov	r5, r1
 80024ec:	f7fe fb18 	bl	8000b20 <__aeabi_d2iz>
 80024f0:	2200      	movs	r2, #0
 80024f2:	4607      	mov	r7, r0
 80024f4:	2300      	movs	r3, #0
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f7fe fad3 	bl	8000aa4 <__aeabi_dcmplt>
 80024fe:	b140      	cbz	r0, 8002512 <_dtoa_r+0x16a>
 8002500:	4638      	mov	r0, r7
 8002502:	f7fd fff3 	bl	80004ec <__aeabi_i2d>
 8002506:	4622      	mov	r2, r4
 8002508:	462b      	mov	r3, r5
 800250a:	f7fe fac1 	bl	8000a90 <__aeabi_dcmpeq>
 800250e:	b900      	cbnz	r0, 8002512 <_dtoa_r+0x16a>
 8002510:	3f01      	subs	r7, #1
 8002512:	2f16      	cmp	r7, #22
 8002514:	d851      	bhi.n	80025ba <_dtoa_r+0x212>
 8002516:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <_dtoa_r+0x2dc>)
 8002518:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800251c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe fabe 	bl	8000aa4 <__aeabi_dcmplt>
 8002528:	2800      	cmp	r0, #0
 800252a:	d048      	beq.n	80025be <_dtoa_r+0x216>
 800252c:	3f01      	subs	r7, #1
 800252e:	2300      	movs	r3, #0
 8002530:	9312      	str	r3, [sp, #72]	@ 0x48
 8002532:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002534:	1b9b      	subs	r3, r3, r6
 8002536:	1e5a      	subs	r2, r3, #1
 8002538:	bf46      	itte	mi
 800253a:	f1c3 0801 	rsbmi	r8, r3, #1
 800253e:	2300      	movmi	r3, #0
 8002540:	f04f 0800 	movpl.w	r8, #0
 8002544:	9208      	str	r2, [sp, #32]
 8002546:	bf48      	it	mi
 8002548:	9308      	strmi	r3, [sp, #32]
 800254a:	2f00      	cmp	r7, #0
 800254c:	db39      	blt.n	80025c2 <_dtoa_r+0x21a>
 800254e:	9b08      	ldr	r3, [sp, #32]
 8002550:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002552:	443b      	add	r3, r7
 8002554:	9308      	str	r3, [sp, #32]
 8002556:	2300      	movs	r3, #0
 8002558:	930a      	str	r3, [sp, #40]	@ 0x28
 800255a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800255c:	2b09      	cmp	r3, #9
 800255e:	d864      	bhi.n	800262a <_dtoa_r+0x282>
 8002560:	2b05      	cmp	r3, #5
 8002562:	bfc5      	ittet	gt
 8002564:	3b04      	subgt	r3, #4
 8002566:	2400      	movgt	r4, #0
 8002568:	2401      	movle	r4, #1
 800256a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800256c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800256e:	3b02      	subs	r3, #2
 8002570:	2b03      	cmp	r3, #3
 8002572:	d865      	bhi.n	8002640 <_dtoa_r+0x298>
 8002574:	e8df f003 	tbb	[pc, r3]
 8002578:	5737392c 	.word	0x5737392c
 800257c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002580:	441e      	add	r6, r3
 8002582:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002586:	2b20      	cmp	r3, #32
 8002588:	bfc9      	itett	gt
 800258a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800258e:	f1c3 0320 	rsble	r3, r3, #32
 8002592:	409f      	lslgt	r7, r3
 8002594:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002598:	bfd8      	it	le
 800259a:	fa04 f003 	lslle.w	r0, r4, r3
 800259e:	f106 36ff 	add.w	r6, r6, #4294967295
 80025a2:	bfc4      	itt	gt
 80025a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80025a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80025ac:	f7fd ff8e 	bl	80004cc <__aeabi_ui2d>
 80025b0:	2201      	movs	r2, #1
 80025b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80025b6:	9214      	str	r2, [sp, #80]	@ 0x50
 80025b8:	e777      	b.n	80024aa <_dtoa_r+0x102>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e7b8      	b.n	8002530 <_dtoa_r+0x188>
 80025be:	9012      	str	r0, [sp, #72]	@ 0x48
 80025c0:	e7b7      	b.n	8002532 <_dtoa_r+0x18a>
 80025c2:	427b      	negs	r3, r7
 80025c4:	eba8 0807 	sub.w	r8, r8, r7
 80025c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80025ca:	2300      	movs	r3, #0
 80025cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80025ce:	e7c4      	b.n	800255a <_dtoa_r+0x1b2>
 80025d0:	2300      	movs	r3, #0
 80025d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80025d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dc35      	bgt.n	8002646 <_dtoa_r+0x29e>
 80025da:	2301      	movs	r3, #1
 80025dc:	461a      	mov	r2, r3
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	9307      	str	r3, [sp, #28]
 80025e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80025e4:	e00b      	b.n	80025fe <_dtoa_r+0x256>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e7f3      	b.n	80025d2 <_dtoa_r+0x22a>
 80025ea:	2300      	movs	r3, #0
 80025ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80025ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	9307      	str	r3, [sp, #28]
 80025fa:	bfb8      	it	lt
 80025fc:	2301      	movlt	r3, #1
 80025fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002602:	2100      	movs	r1, #0
 8002604:	2204      	movs	r2, #4
 8002606:	f102 0514 	add.w	r5, r2, #20
 800260a:	429d      	cmp	r5, r3
 800260c:	d91f      	bls.n	800264e <_dtoa_r+0x2a6>
 800260e:	6041      	str	r1, [r0, #4]
 8002610:	4658      	mov	r0, fp
 8002612:	f000 fd8d 	bl	8003130 <_Balloc>
 8002616:	4682      	mov	sl, r0
 8002618:	2800      	cmp	r0, #0
 800261a:	d13b      	bne.n	8002694 <_dtoa_r+0x2ec>
 800261c:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <_dtoa_r+0x2e0>)
 800261e:	4602      	mov	r2, r0
 8002620:	f240 11af 	movw	r1, #431	@ 0x1af
 8002624:	e6d7      	b.n	80023d6 <_dtoa_r+0x2e>
 8002626:	2301      	movs	r3, #1
 8002628:	e7e0      	b.n	80025ec <_dtoa_r+0x244>
 800262a:	2401      	movs	r4, #1
 800262c:	2300      	movs	r3, #0
 800262e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002630:	9309      	str	r3, [sp, #36]	@ 0x24
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	2200      	movs	r2, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	9307      	str	r3, [sp, #28]
 800263c:	2312      	movs	r3, #18
 800263e:	e7d0      	b.n	80025e2 <_dtoa_r+0x23a>
 8002640:	2301      	movs	r3, #1
 8002642:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002644:	e7f5      	b.n	8002632 <_dtoa_r+0x28a>
 8002646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	9307      	str	r3, [sp, #28]
 800264c:	e7d7      	b.n	80025fe <_dtoa_r+0x256>
 800264e:	3101      	adds	r1, #1
 8002650:	0052      	lsls	r2, r2, #1
 8002652:	e7d8      	b.n	8002606 <_dtoa_r+0x25e>
 8002654:	f3af 8000 	nop.w
 8002658:	636f4361 	.word	0x636f4361
 800265c:	3fd287a7 	.word	0x3fd287a7
 8002660:	8b60c8b3 	.word	0x8b60c8b3
 8002664:	3fc68a28 	.word	0x3fc68a28
 8002668:	509f79fb 	.word	0x509f79fb
 800266c:	3fd34413 	.word	0x3fd34413
 8002670:	0800439b 	.word	0x0800439b
 8002674:	080043b2 	.word	0x080043b2
 8002678:	7ff00000 	.word	0x7ff00000
 800267c:	0800436b 	.word	0x0800436b
 8002680:	3ff80000 	.word	0x3ff80000
 8002684:	080044a8 	.word	0x080044a8
 8002688:	0800440a 	.word	0x0800440a
 800268c:	08004397 	.word	0x08004397
 8002690:	0800436a 	.word	0x0800436a
 8002694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002698:	6018      	str	r0, [r3, #0]
 800269a:	9b07      	ldr	r3, [sp, #28]
 800269c:	2b0e      	cmp	r3, #14
 800269e:	f200 80a4 	bhi.w	80027ea <_dtoa_r+0x442>
 80026a2:	2c00      	cmp	r4, #0
 80026a4:	f000 80a1 	beq.w	80027ea <_dtoa_r+0x442>
 80026a8:	2f00      	cmp	r7, #0
 80026aa:	dd33      	ble.n	8002714 <_dtoa_r+0x36c>
 80026ac:	f007 020f 	and.w	r2, r7, #15
 80026b0:	4bac      	ldr	r3, [pc, #688]	@ (8002964 <_dtoa_r+0x5bc>)
 80026b2:	05f8      	lsls	r0, r7, #23
 80026b4:	ea4f 1427 	mov.w	r4, r7, asr #4
 80026b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026bc:	ed93 7b00 	vldr	d7, [r3]
 80026c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80026c4:	d516      	bpl.n	80026f4 <_dtoa_r+0x34c>
 80026c6:	4ba8      	ldr	r3, [pc, #672]	@ (8002968 <_dtoa_r+0x5c0>)
 80026c8:	f004 040f 	and.w	r4, r4, #15
 80026cc:	2603      	movs	r6, #3
 80026ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80026d6:	f7fe f89d 	bl	8000814 <__aeabi_ddiv>
 80026da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026de:	4da2      	ldr	r5, [pc, #648]	@ (8002968 <_dtoa_r+0x5c0>)
 80026e0:	b954      	cbnz	r4, 80026f8 <_dtoa_r+0x350>
 80026e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026ea:	f7fe f893 	bl	8000814 <__aeabi_ddiv>
 80026ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026f2:	e028      	b.n	8002746 <_dtoa_r+0x39e>
 80026f4:	2602      	movs	r6, #2
 80026f6:	e7f2      	b.n	80026de <_dtoa_r+0x336>
 80026f8:	07e1      	lsls	r1, r4, #31
 80026fa:	d508      	bpl.n	800270e <_dtoa_r+0x366>
 80026fc:	3601      	adds	r6, #1
 80026fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002702:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002706:	f7fd ff5b 	bl	80005c0 <__aeabi_dmul>
 800270a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800270e:	1064      	asrs	r4, r4, #1
 8002710:	3508      	adds	r5, #8
 8002712:	e7e5      	b.n	80026e0 <_dtoa_r+0x338>
 8002714:	f000 80d2 	beq.w	80028bc <_dtoa_r+0x514>
 8002718:	427c      	negs	r4, r7
 800271a:	4b92      	ldr	r3, [pc, #584]	@ (8002964 <_dtoa_r+0x5bc>)
 800271c:	4d92      	ldr	r5, [pc, #584]	@ (8002968 <_dtoa_r+0x5c0>)
 800271e:	2602      	movs	r6, #2
 8002720:	f004 020f 	and.w	r2, r4, #15
 8002724:	1124      	asrs	r4, r4, #4
 8002726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800272a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd ff45 	bl	80005c0 <__aeabi_dmul>
 8002736:	2300      	movs	r3, #0
 8002738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800273c:	2c00      	cmp	r4, #0
 800273e:	f040 80b2 	bne.w	80028a6 <_dtoa_r+0x4fe>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1d3      	bne.n	80026ee <_dtoa_r+0x346>
 8002746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002748:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80b7 	beq.w	80028c0 <_dtoa_r+0x518>
 8002752:	2200      	movs	r2, #0
 8002754:	4b85      	ldr	r3, [pc, #532]	@ (800296c <_dtoa_r+0x5c4>)
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f7fe f9a3 	bl	8000aa4 <__aeabi_dcmplt>
 800275e:	2800      	cmp	r0, #0
 8002760:	f000 80ae 	beq.w	80028c0 <_dtoa_r+0x518>
 8002764:	9b07      	ldr	r3, [sp, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 80aa 	beq.w	80028c0 <_dtoa_r+0x518>
 800276c:	9b00      	ldr	r3, [sp, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	dd37      	ble.n	80027e2 <_dtoa_r+0x43a>
 8002772:	1e7b      	subs	r3, r7, #1
 8002774:	4620      	mov	r0, r4
 8002776:	2200      	movs	r2, #0
 8002778:	4629      	mov	r1, r5
 800277a:	9304      	str	r3, [sp, #16]
 800277c:	3601      	adds	r6, #1
 800277e:	4b7c      	ldr	r3, [pc, #496]	@ (8002970 <_dtoa_r+0x5c8>)
 8002780:	f7fd ff1e 	bl	80005c0 <__aeabi_dmul>
 8002784:	9c00      	ldr	r4, [sp, #0]
 8002786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800278a:	4630      	mov	r0, r6
 800278c:	f7fd feae 	bl	80004ec <__aeabi_i2d>
 8002790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002794:	f7fd ff14 	bl	80005c0 <__aeabi_dmul>
 8002798:	2200      	movs	r2, #0
 800279a:	4b76      	ldr	r3, [pc, #472]	@ (8002974 <_dtoa_r+0x5cc>)
 800279c:	f7fd fd5a 	bl	8000254 <__adddf3>
 80027a0:	4605      	mov	r5, r0
 80027a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	f040 808d 	bne.w	80028c6 <_dtoa_r+0x51e>
 80027ac:	2200      	movs	r2, #0
 80027ae:	4b72      	ldr	r3, [pc, #456]	@ (8002978 <_dtoa_r+0x5d0>)
 80027b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80027b4:	f7fd fd4c 	bl	8000250 <__aeabi_dsub>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027c0:	462a      	mov	r2, r5
 80027c2:	4633      	mov	r3, r6
 80027c4:	f7fe f98c 	bl	8000ae0 <__aeabi_dcmpgt>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	f040 828b 	bne.w	8002ce4 <_dtoa_r+0x93c>
 80027ce:	462a      	mov	r2, r5
 80027d0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80027d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80027d8:	f7fe f964 	bl	8000aa4 <__aeabi_dcmplt>
 80027dc:	2800      	cmp	r0, #0
 80027de:	f040 8128 	bne.w	8002a32 <_dtoa_r+0x68a>
 80027e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80027e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80027ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f2c0 815a 	blt.w	8002aa6 <_dtoa_r+0x6fe>
 80027f2:	2f0e      	cmp	r7, #14
 80027f4:	f300 8157 	bgt.w	8002aa6 <_dtoa_r+0x6fe>
 80027f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002964 <_dtoa_r+0x5bc>)
 80027fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80027fe:	ed93 7b00 	vldr	d7, [r3]
 8002802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002804:	2b00      	cmp	r3, #0
 8002806:	ed8d 7b00 	vstr	d7, [sp]
 800280a:	da03      	bge.n	8002814 <_dtoa_r+0x46c>
 800280c:	9b07      	ldr	r3, [sp, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f340 8101 	ble.w	8002a16 <_dtoa_r+0x66e>
 8002814:	4656      	mov	r6, sl
 8002816:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800281a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800281e:	4620      	mov	r0, r4
 8002820:	4629      	mov	r1, r5
 8002822:	f7fd fff7 	bl	8000814 <__aeabi_ddiv>
 8002826:	f7fe f97b 	bl	8000b20 <__aeabi_d2iz>
 800282a:	4680      	mov	r8, r0
 800282c:	f7fd fe5e 	bl	80004ec <__aeabi_i2d>
 8002830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002834:	f7fd fec4 	bl	80005c0 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	4620      	mov	r0, r4
 800283c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8002840:	460b      	mov	r3, r1
 8002842:	4629      	mov	r1, r5
 8002844:	f7fd fd04 	bl	8000250 <__aeabi_dsub>
 8002848:	9d07      	ldr	r5, [sp, #28]
 800284a:	f806 4b01 	strb.w	r4, [r6], #1
 800284e:	eba6 040a 	sub.w	r4, r6, sl
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	42a5      	cmp	r5, r4
 8002858:	f040 8117 	bne.w	8002a8a <_dtoa_r+0x6e2>
 800285c:	f7fd fcfa 	bl	8000254 <__adddf3>
 8002860:	4604      	mov	r4, r0
 8002862:	460d      	mov	r5, r1
 8002864:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002868:	f7fe f93a 	bl	8000ae0 <__aeabi_dcmpgt>
 800286c:	2800      	cmp	r0, #0
 800286e:	f040 80f9 	bne.w	8002a64 <_dtoa_r+0x6bc>
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800287a:	f7fe f909 	bl	8000a90 <__aeabi_dcmpeq>
 800287e:	b118      	cbz	r0, 8002888 <_dtoa_r+0x4e0>
 8002880:	f018 0f01 	tst.w	r8, #1
 8002884:	f040 80ee 	bne.w	8002a64 <_dtoa_r+0x6bc>
 8002888:	4649      	mov	r1, r9
 800288a:	4658      	mov	r0, fp
 800288c:	f000 fc90 	bl	80031b0 <_Bfree>
 8002890:	2300      	movs	r3, #0
 8002892:	3701      	adds	r7, #1
 8002894:	7033      	strb	r3, [r6, #0]
 8002896:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002898:	601f      	str	r7, [r3, #0]
 800289a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 831d 	beq.w	8002edc <_dtoa_r+0xb34>
 80028a2:	601e      	str	r6, [r3, #0]
 80028a4:	e31a      	b.n	8002edc <_dtoa_r+0xb34>
 80028a6:	07e2      	lsls	r2, r4, #31
 80028a8:	d505      	bpl.n	80028b6 <_dtoa_r+0x50e>
 80028aa:	3601      	adds	r6, #1
 80028ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80028b0:	f7fd fe86 	bl	80005c0 <__aeabi_dmul>
 80028b4:	2301      	movs	r3, #1
 80028b6:	1064      	asrs	r4, r4, #1
 80028b8:	3508      	adds	r5, #8
 80028ba:	e73f      	b.n	800273c <_dtoa_r+0x394>
 80028bc:	2602      	movs	r6, #2
 80028be:	e742      	b.n	8002746 <_dtoa_r+0x39e>
 80028c0:	9c07      	ldr	r4, [sp, #28]
 80028c2:	9704      	str	r7, [sp, #16]
 80028c4:	e761      	b.n	800278a <_dtoa_r+0x3e2>
 80028c6:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <_dtoa_r+0x5bc>)
 80028c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80028ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80028ce:	4454      	add	r4, sl
 80028d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80028d4:	2900      	cmp	r1, #0
 80028d6:	d053      	beq.n	8002980 <_dtoa_r+0x5d8>
 80028d8:	2000      	movs	r0, #0
 80028da:	4928      	ldr	r1, [pc, #160]	@ (800297c <_dtoa_r+0x5d4>)
 80028dc:	f7fd ff9a 	bl	8000814 <__aeabi_ddiv>
 80028e0:	4633      	mov	r3, r6
 80028e2:	4656      	mov	r6, sl
 80028e4:	462a      	mov	r2, r5
 80028e6:	f7fd fcb3 	bl	8000250 <__aeabi_dsub>
 80028ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80028ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028f2:	f7fe f915 	bl	8000b20 <__aeabi_d2iz>
 80028f6:	4605      	mov	r5, r0
 80028f8:	f7fd fdf8 	bl	80004ec <__aeabi_i2d>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	3530      	adds	r5, #48	@ 0x30
 8002902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002906:	f7fd fca3 	bl	8000250 <__aeabi_dsub>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	f806 5b01 	strb.w	r5, [r6], #1
 8002912:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800291a:	f7fe f8c3 	bl	8000aa4 <__aeabi_dcmplt>
 800291e:	2800      	cmp	r0, #0
 8002920:	d171      	bne.n	8002a06 <_dtoa_r+0x65e>
 8002922:	2000      	movs	r0, #0
 8002924:	4911      	ldr	r1, [pc, #68]	@ (800296c <_dtoa_r+0x5c4>)
 8002926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800292a:	f7fd fc91 	bl	8000250 <__aeabi_dsub>
 800292e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002932:	f7fe f8b7 	bl	8000aa4 <__aeabi_dcmplt>
 8002936:	2800      	cmp	r0, #0
 8002938:	f040 8095 	bne.w	8002a66 <_dtoa_r+0x6be>
 800293c:	42a6      	cmp	r6, r4
 800293e:	f43f af50 	beq.w	80027e2 <_dtoa_r+0x43a>
 8002942:	2200      	movs	r2, #0
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <_dtoa_r+0x5c8>)
 8002946:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800294a:	f7fd fe39 	bl	80005c0 <__aeabi_dmul>
 800294e:	2200      	movs	r2, #0
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <_dtoa_r+0x5c8>)
 8002952:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800295a:	f7fd fe31 	bl	80005c0 <__aeabi_dmul>
 800295e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002962:	e7c4      	b.n	80028ee <_dtoa_r+0x546>
 8002964:	080044a8 	.word	0x080044a8
 8002968:	08004480 	.word	0x08004480
 800296c:	3ff00000 	.word	0x3ff00000
 8002970:	40240000 	.word	0x40240000
 8002974:	401c0000 	.word	0x401c0000
 8002978:	40140000 	.word	0x40140000
 800297c:	3fe00000 	.word	0x3fe00000
 8002980:	4631      	mov	r1, r6
 8002982:	4656      	mov	r6, sl
 8002984:	4628      	mov	r0, r5
 8002986:	f7fd fe1b 	bl	80005c0 <__aeabi_dmul>
 800298a:	9415      	str	r4, [sp, #84]	@ 0x54
 800298c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002994:	f7fe f8c4 	bl	8000b20 <__aeabi_d2iz>
 8002998:	4605      	mov	r5, r0
 800299a:	f7fd fda7 	bl	80004ec <__aeabi_i2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	3530      	adds	r5, #48	@ 0x30
 80029a2:	460b      	mov	r3, r1
 80029a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029a8:	f7fd fc52 	bl	8000250 <__aeabi_dsub>
 80029ac:	f806 5b01 	strb.w	r5, [r6], #1
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	d124      	bne.n	8002a0a <_dtoa_r+0x662>
 80029c0:	4bac      	ldr	r3, [pc, #688]	@ (8002c74 <_dtoa_r+0x8cc>)
 80029c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80029c6:	f7fd fc45 	bl	8000254 <__adddf3>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029d2:	f7fe f885 	bl	8000ae0 <__aeabi_dcmpgt>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d145      	bne.n	8002a66 <_dtoa_r+0x6be>
 80029da:	2000      	movs	r0, #0
 80029dc:	49a5      	ldr	r1, [pc, #660]	@ (8002c74 <_dtoa_r+0x8cc>)
 80029de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80029e2:	f7fd fc35 	bl	8000250 <__aeabi_dsub>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029ee:	f7fe f859 	bl	8000aa4 <__aeabi_dcmplt>
 80029f2:	2800      	cmp	r0, #0
 80029f4:	f43f aef5 	beq.w	80027e2 <_dtoa_r+0x43a>
 80029f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80029fa:	1e73      	subs	r3, r6, #1
 80029fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80029fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002a02:	2b30      	cmp	r3, #48	@ 0x30
 8002a04:	d0f8      	beq.n	80029f8 <_dtoa_r+0x650>
 8002a06:	9f04      	ldr	r7, [sp, #16]
 8002a08:	e73e      	b.n	8002888 <_dtoa_r+0x4e0>
 8002a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8002c78 <_dtoa_r+0x8d0>)
 8002a0c:	f7fd fdd8 	bl	80005c0 <__aeabi_dmul>
 8002a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a14:	e7bc      	b.n	8002990 <_dtoa_r+0x5e8>
 8002a16:	d10c      	bne.n	8002a32 <_dtoa_r+0x68a>
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4b98      	ldr	r3, [pc, #608]	@ (8002c7c <_dtoa_r+0x8d4>)
 8002a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a20:	f7fd fdce 	bl	80005c0 <__aeabi_dmul>
 8002a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a28:	f7fe f850 	bl	8000acc <__aeabi_dcmpge>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	f000 8157 	beq.w	8002ce0 <_dtoa_r+0x938>
 8002a32:	2400      	movs	r4, #0
 8002a34:	4625      	mov	r5, r4
 8002a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002a38:	4656      	mov	r6, sl
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	2700      	movs	r7, #0
 8002a40:	4621      	mov	r1, r4
 8002a42:	4658      	mov	r0, fp
 8002a44:	f000 fbb4 	bl	80031b0 <_Bfree>
 8002a48:	2d00      	cmp	r5, #0
 8002a4a:	d0dc      	beq.n	8002a06 <_dtoa_r+0x65e>
 8002a4c:	b12f      	cbz	r7, 8002a5a <_dtoa_r+0x6b2>
 8002a4e:	42af      	cmp	r7, r5
 8002a50:	d003      	beq.n	8002a5a <_dtoa_r+0x6b2>
 8002a52:	4639      	mov	r1, r7
 8002a54:	4658      	mov	r0, fp
 8002a56:	f000 fbab 	bl	80031b0 <_Bfree>
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	4658      	mov	r0, fp
 8002a5e:	f000 fba7 	bl	80031b0 <_Bfree>
 8002a62:	e7d0      	b.n	8002a06 <_dtoa_r+0x65e>
 8002a64:	9704      	str	r7, [sp, #16]
 8002a66:	4633      	mov	r3, r6
 8002a68:	461e      	mov	r6, r3
 8002a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002a6e:	2a39      	cmp	r2, #57	@ 0x39
 8002a70:	d107      	bne.n	8002a82 <_dtoa_r+0x6da>
 8002a72:	459a      	cmp	sl, r3
 8002a74:	d1f8      	bne.n	8002a68 <_dtoa_r+0x6c0>
 8002a76:	9a04      	ldr	r2, [sp, #16]
 8002a78:	3201      	adds	r2, #1
 8002a7a:	9204      	str	r2, [sp, #16]
 8002a7c:	2230      	movs	r2, #48	@ 0x30
 8002a7e:	f88a 2000 	strb.w	r2, [sl]
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	3201      	adds	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e7bd      	b.n	8002a06 <_dtoa_r+0x65e>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002c78 <_dtoa_r+0x8d0>)
 8002a8e:	f7fd fd97 	bl	80005c0 <__aeabi_dmul>
 8002a92:	2200      	movs	r2, #0
 8002a94:	2300      	movs	r3, #0
 8002a96:	4604      	mov	r4, r0
 8002a98:	460d      	mov	r5, r1
 8002a9a:	f7fd fff9 	bl	8000a90 <__aeabi_dcmpeq>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	f43f aebb 	beq.w	800281a <_dtoa_r+0x472>
 8002aa4:	e6f0      	b.n	8002888 <_dtoa_r+0x4e0>
 8002aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	f000 80db 	beq.w	8002c64 <_dtoa_r+0x8bc>
 8002aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ab0:	2a01      	cmp	r2, #1
 8002ab2:	f300 80bf 	bgt.w	8002c34 <_dtoa_r+0x88c>
 8002ab6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	f000 80b7 	beq.w	8002c2c <_dtoa_r+0x884>
 8002abe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8002ac2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002ac4:	4646      	mov	r6, r8
 8002ac6:	9a08      	ldr	r2, [sp, #32]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4658      	mov	r0, fp
 8002acc:	4498      	add	r8, r3
 8002ace:	441a      	add	r2, r3
 8002ad0:	9208      	str	r2, [sp, #32]
 8002ad2:	f000 fc23 	bl	800331c <__i2b>
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	b15e      	cbz	r6, 8002af2 <_dtoa_r+0x74a>
 8002ada:	9b08      	ldr	r3, [sp, #32]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	dd08      	ble.n	8002af2 <_dtoa_r+0x74a>
 8002ae0:	42b3      	cmp	r3, r6
 8002ae2:	9a08      	ldr	r2, [sp, #32]
 8002ae4:	bfa8      	it	ge
 8002ae6:	4633      	movge	r3, r6
 8002ae8:	eba8 0803 	sub.w	r8, r8, r3
 8002aec:	1af6      	subs	r6, r6, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	9308      	str	r3, [sp, #32]
 8002af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002af4:	b1f3      	cbz	r3, 8002b34 <_dtoa_r+0x78c>
 8002af6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80b7 	beq.w	8002c6c <_dtoa_r+0x8c4>
 8002afe:	b18c      	cbz	r4, 8002b24 <_dtoa_r+0x77c>
 8002b00:	4629      	mov	r1, r5
 8002b02:	4622      	mov	r2, r4
 8002b04:	4658      	mov	r0, fp
 8002b06:	f000 fcc9 	bl	800349c <__pow5mult>
 8002b0a:	464a      	mov	r2, r9
 8002b0c:	4601      	mov	r1, r0
 8002b0e:	4605      	mov	r5, r0
 8002b10:	4658      	mov	r0, fp
 8002b12:	f000 fc19 	bl	8003348 <__multiply>
 8002b16:	4649      	mov	r1, r9
 8002b18:	9004      	str	r0, [sp, #16]
 8002b1a:	4658      	mov	r0, fp
 8002b1c:	f000 fb48 	bl	80031b0 <_Bfree>
 8002b20:	9b04      	ldr	r3, [sp, #16]
 8002b22:	4699      	mov	r9, r3
 8002b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b26:	1b1a      	subs	r2, r3, r4
 8002b28:	d004      	beq.n	8002b34 <_dtoa_r+0x78c>
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	4658      	mov	r0, fp
 8002b2e:	f000 fcb5 	bl	800349c <__pow5mult>
 8002b32:	4681      	mov	r9, r0
 8002b34:	2101      	movs	r1, #1
 8002b36:	4658      	mov	r0, fp
 8002b38:	f000 fbf0 	bl	800331c <__i2b>
 8002b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002b3e:	4604      	mov	r4, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 81cf 	beq.w	8002ee4 <_dtoa_r+0xb3c>
 8002b46:	461a      	mov	r2, r3
 8002b48:	4601      	mov	r1, r0
 8002b4a:	4658      	mov	r0, fp
 8002b4c:	f000 fca6 	bl	800349c <__pow5mult>
 8002b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b52:	4604      	mov	r4, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	f300 8095 	bgt.w	8002c84 <_dtoa_r+0x8dc>
 8002b5a:	9b02      	ldr	r3, [sp, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f040 8087 	bne.w	8002c70 <_dtoa_r+0x8c8>
 8002b62:	9b03      	ldr	r3, [sp, #12]
 8002b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 8089 	bne.w	8002c80 <_dtoa_r+0x8d8>
 8002b6e:	9b03      	ldr	r3, [sp, #12]
 8002b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b74:	0d1b      	lsrs	r3, r3, #20
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	b12b      	cbz	r3, 8002b86 <_dtoa_r+0x7de>
 8002b7a:	9b08      	ldr	r3, [sp, #32]
 8002b7c:	f108 0801 	add.w	r8, r8, #1
 8002b80:	3301      	adds	r3, #1
 8002b82:	9308      	str	r3, [sp, #32]
 8002b84:	2301      	movs	r3, #1
 8002b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 81b0 	beq.w	8002ef0 <_dtoa_r+0xb48>
 8002b90:	6923      	ldr	r3, [r4, #16]
 8002b92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b96:	6918      	ldr	r0, [r3, #16]
 8002b98:	f000 fb74 	bl	8003284 <__hi0bits>
 8002b9c:	f1c0 0020 	rsb	r0, r0, #32
 8002ba0:	9b08      	ldr	r3, [sp, #32]
 8002ba2:	4418      	add	r0, r3
 8002ba4:	f010 001f 	ands.w	r0, r0, #31
 8002ba8:	d077      	beq.n	8002c9a <_dtoa_r+0x8f2>
 8002baa:	f1c0 0320 	rsb	r3, r0, #32
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	dd6b      	ble.n	8002c8a <_dtoa_r+0x8e2>
 8002bb2:	f1c0 001c 	rsb	r0, r0, #28
 8002bb6:	9b08      	ldr	r3, [sp, #32]
 8002bb8:	4480      	add	r8, r0
 8002bba:	4403      	add	r3, r0
 8002bbc:	4406      	add	r6, r0
 8002bbe:	9308      	str	r3, [sp, #32]
 8002bc0:	f1b8 0f00 	cmp.w	r8, #0
 8002bc4:	dd05      	ble.n	8002bd2 <_dtoa_r+0x82a>
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	4642      	mov	r2, r8
 8002bca:	4658      	mov	r0, fp
 8002bcc:	f000 fcc0 	bl	8003550 <__lshift>
 8002bd0:	4681      	mov	r9, r0
 8002bd2:	9b08      	ldr	r3, [sp, #32]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	dd05      	ble.n	8002be4 <_dtoa_r+0x83c>
 8002bd8:	4621      	mov	r1, r4
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4658      	mov	r0, fp
 8002bde:	f000 fcb7 	bl	8003550 <__lshift>
 8002be2:	4604      	mov	r4, r0
 8002be4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d059      	beq.n	8002c9e <_dtoa_r+0x8f6>
 8002bea:	4621      	mov	r1, r4
 8002bec:	4648      	mov	r0, r9
 8002bee:	f000 fd1b 	bl	8003628 <__mcmp>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	da53      	bge.n	8002c9e <_dtoa_r+0x8f6>
 8002bf6:	1e7b      	subs	r3, r7, #1
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	220a      	movs	r2, #10
 8002bfc:	4658      	mov	r0, fp
 8002bfe:	9304      	str	r3, [sp, #16]
 8002c00:	2300      	movs	r3, #0
 8002c02:	f000 faf7 	bl	80031f4 <__multadd>
 8002c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002c08:	4681      	mov	r9, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8172 	beq.w	8002ef4 <_dtoa_r+0xb4c>
 8002c10:	2300      	movs	r3, #0
 8002c12:	4629      	mov	r1, r5
 8002c14:	220a      	movs	r2, #10
 8002c16:	4658      	mov	r0, fp
 8002c18:	f000 faec 	bl	80031f4 <__multadd>
 8002c1c:	9b00      	ldr	r3, [sp, #0]
 8002c1e:	4605      	mov	r5, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	dc67      	bgt.n	8002cf4 <_dtoa_r+0x94c>
 8002c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	dc41      	bgt.n	8002cae <_dtoa_r+0x906>
 8002c2a:	e063      	b.n	8002cf4 <_dtoa_r+0x94c>
 8002c2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002c2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8002c32:	e746      	b.n	8002ac2 <_dtoa_r+0x71a>
 8002c34:	9b07      	ldr	r3, [sp, #28]
 8002c36:	1e5c      	subs	r4, r3, #1
 8002c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c3a:	42a3      	cmp	r3, r4
 8002c3c:	bfb7      	itett	lt
 8002c3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8002c40:	1b1c      	subge	r4, r3, r4
 8002c42:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8002c44:	1ae3      	sublt	r3, r4, r3
 8002c46:	bfbe      	ittt	lt
 8002c48:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8002c4a:	2400      	movlt	r4, #0
 8002c4c:	18d2      	addlt	r2, r2, r3
 8002c4e:	9b07      	ldr	r3, [sp, #28]
 8002c50:	bfb8      	it	lt
 8002c52:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bfb5      	itete	lt
 8002c58:	eba8 0603 	sublt.w	r6, r8, r3
 8002c5c:	4646      	movge	r6, r8
 8002c5e:	2300      	movlt	r3, #0
 8002c60:	9b07      	ldrge	r3, [sp, #28]
 8002c62:	e730      	b.n	8002ac6 <_dtoa_r+0x71e>
 8002c64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002c66:	4646      	mov	r6, r8
 8002c68:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8002c6a:	e735      	b.n	8002ad8 <_dtoa_r+0x730>
 8002c6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002c6e:	e75c      	b.n	8002b2a <_dtoa_r+0x782>
 8002c70:	2300      	movs	r3, #0
 8002c72:	e788      	b.n	8002b86 <_dtoa_r+0x7de>
 8002c74:	3fe00000 	.word	0x3fe00000
 8002c78:	40240000 	.word	0x40240000
 8002c7c:	40140000 	.word	0x40140000
 8002c80:	9b02      	ldr	r3, [sp, #8]
 8002c82:	e780      	b.n	8002b86 <_dtoa_r+0x7de>
 8002c84:	2300      	movs	r3, #0
 8002c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8002c88:	e782      	b.n	8002b90 <_dtoa_r+0x7e8>
 8002c8a:	d099      	beq.n	8002bc0 <_dtoa_r+0x818>
 8002c8c:	331c      	adds	r3, #28
 8002c8e:	9a08      	ldr	r2, [sp, #32]
 8002c90:	441a      	add	r2, r3
 8002c92:	4498      	add	r8, r3
 8002c94:	441e      	add	r6, r3
 8002c96:	9208      	str	r2, [sp, #32]
 8002c98:	e792      	b.n	8002bc0 <_dtoa_r+0x818>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	e7f6      	b.n	8002c8c <_dtoa_r+0x8e4>
 8002c9e:	9b07      	ldr	r3, [sp, #28]
 8002ca0:	9704      	str	r7, [sp, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	dc20      	bgt.n	8002ce8 <_dtoa_r+0x940>
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	dd1e      	ble.n	8002cec <_dtoa_r+0x944>
 8002cae:	9b00      	ldr	r3, [sp, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f aec0 	bne.w	8002a36 <_dtoa_r+0x68e>
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	2205      	movs	r2, #5
 8002cba:	4658      	mov	r0, fp
 8002cbc:	f000 fa9a 	bl	80031f4 <__multadd>
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4648      	mov	r0, r9
 8002cc6:	f000 fcaf 	bl	8003628 <__mcmp>
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	f77f aeb3 	ble.w	8002a36 <_dtoa_r+0x68e>
 8002cd0:	2331      	movs	r3, #49	@ 0x31
 8002cd2:	4656      	mov	r6, sl
 8002cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8002cd8:	9b04      	ldr	r3, [sp, #16]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	9304      	str	r3, [sp, #16]
 8002cde:	e6ae      	b.n	8002a3e <_dtoa_r+0x696>
 8002ce0:	9c07      	ldr	r4, [sp, #28]
 8002ce2:	9704      	str	r7, [sp, #16]
 8002ce4:	4625      	mov	r5, r4
 8002ce6:	e7f3      	b.n	8002cd0 <_dtoa_r+0x928>
 8002ce8:	9b07      	ldr	r3, [sp, #28]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8104 	beq.w	8002efc <_dtoa_r+0xb54>
 8002cf4:	2e00      	cmp	r6, #0
 8002cf6:	dd05      	ble.n	8002d04 <_dtoa_r+0x95c>
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4632      	mov	r2, r6
 8002cfc:	4658      	mov	r0, fp
 8002cfe:	f000 fc27 	bl	8003550 <__lshift>
 8002d02:	4605      	mov	r5, r0
 8002d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d05a      	beq.n	8002dc0 <_dtoa_r+0xa18>
 8002d0a:	6869      	ldr	r1, [r5, #4]
 8002d0c:	4658      	mov	r0, fp
 8002d0e:	f000 fa0f 	bl	8003130 <_Balloc>
 8002d12:	4606      	mov	r6, r0
 8002d14:	b928      	cbnz	r0, 8002d22 <_dtoa_r+0x97a>
 8002d16:	4b84      	ldr	r3, [pc, #528]	@ (8002f28 <_dtoa_r+0xb80>)
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8002d1e:	f7ff bb5a 	b.w	80023d6 <_dtoa_r+0x2e>
 8002d22:	692a      	ldr	r2, [r5, #16]
 8002d24:	f105 010c 	add.w	r1, r5, #12
 8002d28:	300c      	adds	r0, #12
 8002d2a:	3202      	adds	r2, #2
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	f000 ffb5 	bl	8003c9c <memcpy>
 8002d32:	2201      	movs	r2, #1
 8002d34:	4631      	mov	r1, r6
 8002d36:	4658      	mov	r0, fp
 8002d38:	f000 fc0a 	bl	8003550 <__lshift>
 8002d3c:	f10a 0301 	add.w	r3, sl, #1
 8002d40:	462f      	mov	r7, r5
 8002d42:	4605      	mov	r5, r0
 8002d44:	9307      	str	r3, [sp, #28]
 8002d46:	9b00      	ldr	r3, [sp, #0]
 8002d48:	4453      	add	r3, sl
 8002d4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d4c:	9b02      	ldr	r3, [sp, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d54:	9b07      	ldr	r3, [sp, #28]
 8002d56:	4621      	mov	r1, r4
 8002d58:	4648      	mov	r0, r9
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	f7ff fa94 	bl	800228a <quorem>
 8002d62:	4639      	mov	r1, r7
 8002d64:	9002      	str	r0, [sp, #8]
 8002d66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8002d6a:	4648      	mov	r0, r9
 8002d6c:	f000 fc5c 	bl	8003628 <__mcmp>
 8002d70:	462a      	mov	r2, r5
 8002d72:	9008      	str	r0, [sp, #32]
 8002d74:	4621      	mov	r1, r4
 8002d76:	4658      	mov	r0, fp
 8002d78:	f000 fc72 	bl	8003660 <__mdiff>
 8002d7c:	68c2      	ldr	r2, [r0, #12]
 8002d7e:	4606      	mov	r6, r0
 8002d80:	bb02      	cbnz	r2, 8002dc4 <_dtoa_r+0xa1c>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4648      	mov	r0, r9
 8002d86:	f000 fc4f 	bl	8003628 <__mcmp>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4631      	mov	r1, r6
 8002d8e:	4658      	mov	r0, fp
 8002d90:	920e      	str	r2, [sp, #56]	@ 0x38
 8002d92:	f000 fa0d 	bl	80031b0 <_Bfree>
 8002d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d9a:	9e07      	ldr	r6, [sp, #28]
 8002d9c:	ea43 0102 	orr.w	r1, r3, r2
 8002da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002da2:	4319      	orrs	r1, r3
 8002da4:	d110      	bne.n	8002dc8 <_dtoa_r+0xa20>
 8002da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002daa:	d029      	beq.n	8002e00 <_dtoa_r+0xa58>
 8002dac:	9b08      	ldr	r3, [sp, #32]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	dd02      	ble.n	8002db8 <_dtoa_r+0xa10>
 8002db2:	9b02      	ldr	r3, [sp, #8]
 8002db4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8002db8:	9b00      	ldr	r3, [sp, #0]
 8002dba:	f883 8000 	strb.w	r8, [r3]
 8002dbe:	e63f      	b.n	8002a40 <_dtoa_r+0x698>
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	e7bb      	b.n	8002d3c <_dtoa_r+0x994>
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	e7e1      	b.n	8002d8c <_dtoa_r+0x9e4>
 8002dc8:	9b08      	ldr	r3, [sp, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db04      	blt.n	8002dd8 <_dtoa_r+0xa30>
 8002dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	d120      	bne.n	8002e1a <_dtoa_r+0xa72>
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	dded      	ble.n	8002db8 <_dtoa_r+0xa10>
 8002ddc:	4649      	mov	r1, r9
 8002dde:	2201      	movs	r2, #1
 8002de0:	4658      	mov	r0, fp
 8002de2:	f000 fbb5 	bl	8003550 <__lshift>
 8002de6:	4621      	mov	r1, r4
 8002de8:	4681      	mov	r9, r0
 8002dea:	f000 fc1d 	bl	8003628 <__mcmp>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	dc03      	bgt.n	8002dfa <_dtoa_r+0xa52>
 8002df2:	d1e1      	bne.n	8002db8 <_dtoa_r+0xa10>
 8002df4:	f018 0f01 	tst.w	r8, #1
 8002df8:	d0de      	beq.n	8002db8 <_dtoa_r+0xa10>
 8002dfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002dfe:	d1d8      	bne.n	8002db2 <_dtoa_r+0xa0a>
 8002e00:	2339      	movs	r3, #57	@ 0x39
 8002e02:	9a00      	ldr	r2, [sp, #0]
 8002e04:	7013      	strb	r3, [r2, #0]
 8002e06:	4633      	mov	r3, r6
 8002e08:	461e      	mov	r6, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8002e10:	2a39      	cmp	r2, #57	@ 0x39
 8002e12:	d052      	beq.n	8002eba <_dtoa_r+0xb12>
 8002e14:	3201      	adds	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e612      	b.n	8002a40 <_dtoa_r+0x698>
 8002e1a:	2a00      	cmp	r2, #0
 8002e1c:	dd07      	ble.n	8002e2e <_dtoa_r+0xa86>
 8002e1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002e22:	d0ed      	beq.n	8002e00 <_dtoa_r+0xa58>
 8002e24:	f108 0301 	add.w	r3, r8, #1
 8002e28:	9a00      	ldr	r2, [sp, #0]
 8002e2a:	7013      	strb	r3, [r2, #0]
 8002e2c:	e608      	b.n	8002a40 <_dtoa_r+0x698>
 8002e2e:	9b07      	ldr	r3, [sp, #28]
 8002e30:	9a07      	ldr	r2, [sp, #28]
 8002e32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8002e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d028      	beq.n	8002e8e <_dtoa_r+0xae6>
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	2300      	movs	r3, #0
 8002e40:	220a      	movs	r2, #10
 8002e42:	4658      	mov	r0, fp
 8002e44:	f000 f9d6 	bl	80031f4 <__multadd>
 8002e48:	42af      	cmp	r7, r5
 8002e4a:	4681      	mov	r9, r0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f04f 020a 	mov.w	r2, #10
 8002e54:	4639      	mov	r1, r7
 8002e56:	4658      	mov	r0, fp
 8002e58:	d107      	bne.n	8002e6a <_dtoa_r+0xac2>
 8002e5a:	f000 f9cb 	bl	80031f4 <__multadd>
 8002e5e:	4607      	mov	r7, r0
 8002e60:	4605      	mov	r5, r0
 8002e62:	9b07      	ldr	r3, [sp, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	9307      	str	r3, [sp, #28]
 8002e68:	e774      	b.n	8002d54 <_dtoa_r+0x9ac>
 8002e6a:	f000 f9c3 	bl	80031f4 <__multadd>
 8002e6e:	4629      	mov	r1, r5
 8002e70:	4607      	mov	r7, r0
 8002e72:	2300      	movs	r3, #0
 8002e74:	220a      	movs	r2, #10
 8002e76:	4658      	mov	r0, fp
 8002e78:	f000 f9bc 	bl	80031f4 <__multadd>
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	e7f0      	b.n	8002e62 <_dtoa_r+0xaba>
 8002e80:	9b00      	ldr	r3, [sp, #0]
 8002e82:	2700      	movs	r7, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bfcc      	ite	gt
 8002e88:	461e      	movgt	r6, r3
 8002e8a:	2601      	movle	r6, #1
 8002e8c:	4456      	add	r6, sl
 8002e8e:	4649      	mov	r1, r9
 8002e90:	2201      	movs	r2, #1
 8002e92:	4658      	mov	r0, fp
 8002e94:	f000 fb5c 	bl	8003550 <__lshift>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4681      	mov	r9, r0
 8002e9c:	f000 fbc4 	bl	8003628 <__mcmp>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	dcb0      	bgt.n	8002e06 <_dtoa_r+0xa5e>
 8002ea4:	d102      	bne.n	8002eac <_dtoa_r+0xb04>
 8002ea6:	f018 0f01 	tst.w	r8, #1
 8002eaa:	d1ac      	bne.n	8002e06 <_dtoa_r+0xa5e>
 8002eac:	4633      	mov	r3, r6
 8002eae:	461e      	mov	r6, r3
 8002eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002eb4:	2a30      	cmp	r2, #48	@ 0x30
 8002eb6:	d0fa      	beq.n	8002eae <_dtoa_r+0xb06>
 8002eb8:	e5c2      	b.n	8002a40 <_dtoa_r+0x698>
 8002eba:	459a      	cmp	sl, r3
 8002ebc:	d1a4      	bne.n	8002e08 <_dtoa_r+0xa60>
 8002ebe:	9b04      	ldr	r3, [sp, #16]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	9304      	str	r3, [sp, #16]
 8002ec4:	2331      	movs	r3, #49	@ 0x31
 8002ec6:	f88a 3000 	strb.w	r3, [sl]
 8002eca:	e5b9      	b.n	8002a40 <_dtoa_r+0x698>
 8002ecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002ece:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8002f2c <_dtoa_r+0xb84>
 8002ed2:	b11b      	cbz	r3, 8002edc <_dtoa_r+0xb34>
 8002ed4:	f10a 0308 	add.w	r3, sl, #8
 8002ed8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4650      	mov	r0, sl
 8002ede:	b019      	add	sp, #100	@ 0x64
 8002ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	f77f ae37 	ble.w	8002b5a <_dtoa_r+0x7b2>
 8002eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	e655      	b.n	8002ba0 <_dtoa_r+0x7f8>
 8002ef4:	9b00      	ldr	r3, [sp, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f77f aed6 	ble.w	8002ca8 <_dtoa_r+0x900>
 8002efc:	4656      	mov	r6, sl
 8002efe:	4621      	mov	r1, r4
 8002f00:	4648      	mov	r0, r9
 8002f02:	f7ff f9c2 	bl	800228a <quorem>
 8002f06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8002f0a:	9b00      	ldr	r3, [sp, #0]
 8002f0c:	f806 8b01 	strb.w	r8, [r6], #1
 8002f10:	eba6 020a 	sub.w	r2, r6, sl
 8002f14:	4293      	cmp	r3, r2
 8002f16:	ddb3      	ble.n	8002e80 <_dtoa_r+0xad8>
 8002f18:	4649      	mov	r1, r9
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	220a      	movs	r2, #10
 8002f1e:	4658      	mov	r0, fp
 8002f20:	f000 f968 	bl	80031f4 <__multadd>
 8002f24:	4681      	mov	r9, r0
 8002f26:	e7ea      	b.n	8002efe <_dtoa_r+0xb56>
 8002f28:	0800440a 	.word	0x0800440a
 8002f2c:	0800438e 	.word	0x0800438e

08002f30 <_free_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4605      	mov	r5, r0
 8002f34:	2900      	cmp	r1, #0
 8002f36:	d041      	beq.n	8002fbc <_free_r+0x8c>
 8002f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f3c:	1f0c      	subs	r4, r1, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bfb8      	it	lt
 8002f42:	18e4      	addlt	r4, r4, r3
 8002f44:	f000 f8e8 	bl	8003118 <__malloc_lock>
 8002f48:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <_free_r+0x90>)
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	b933      	cbnz	r3, 8002f5c <_free_r+0x2c>
 8002f4e:	6063      	str	r3, [r4, #4]
 8002f50:	6014      	str	r4, [r2, #0]
 8002f52:	4628      	mov	r0, r5
 8002f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f58:	f000 b8e4 	b.w	8003124 <__malloc_unlock>
 8002f5c:	42a3      	cmp	r3, r4
 8002f5e:	d908      	bls.n	8002f72 <_free_r+0x42>
 8002f60:	6820      	ldr	r0, [r4, #0]
 8002f62:	1821      	adds	r1, r4, r0
 8002f64:	428b      	cmp	r3, r1
 8002f66:	bf01      	itttt	eq
 8002f68:	6819      	ldreq	r1, [r3, #0]
 8002f6a:	685b      	ldreq	r3, [r3, #4]
 8002f6c:	1809      	addeq	r1, r1, r0
 8002f6e:	6021      	streq	r1, [r4, #0]
 8002f70:	e7ed      	b.n	8002f4e <_free_r+0x1e>
 8002f72:	461a      	mov	r2, r3
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	b10b      	cbz	r3, 8002f7c <_free_r+0x4c>
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	d9fa      	bls.n	8002f72 <_free_r+0x42>
 8002f7c:	6811      	ldr	r1, [r2, #0]
 8002f7e:	1850      	adds	r0, r2, r1
 8002f80:	42a0      	cmp	r0, r4
 8002f82:	d10b      	bne.n	8002f9c <_free_r+0x6c>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	4401      	add	r1, r0
 8002f88:	1850      	adds	r0, r2, r1
 8002f8a:	6011      	str	r1, [r2, #0]
 8002f8c:	4283      	cmp	r3, r0
 8002f8e:	d1e0      	bne.n	8002f52 <_free_r+0x22>
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4408      	add	r0, r1
 8002f96:	6053      	str	r3, [r2, #4]
 8002f98:	6010      	str	r0, [r2, #0]
 8002f9a:	e7da      	b.n	8002f52 <_free_r+0x22>
 8002f9c:	d902      	bls.n	8002fa4 <_free_r+0x74>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	e7d6      	b.n	8002f52 <_free_r+0x22>
 8002fa4:	6820      	ldr	r0, [r4, #0]
 8002fa6:	1821      	adds	r1, r4, r0
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	bf02      	ittt	eq
 8002fac:	6819      	ldreq	r1, [r3, #0]
 8002fae:	685b      	ldreq	r3, [r3, #4]
 8002fb0:	1809      	addeq	r1, r1, r0
 8002fb2:	6063      	str	r3, [r4, #4]
 8002fb4:	bf08      	it	eq
 8002fb6:	6021      	streq	r1, [r4, #0]
 8002fb8:	6054      	str	r4, [r2, #4]
 8002fba:	e7ca      	b.n	8002f52 <_free_r+0x22>
 8002fbc:	bd38      	pop	{r3, r4, r5, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000470 	.word	0x20000470

08002fc4 <malloc>:
 8002fc4:	4b02      	ldr	r3, [pc, #8]	@ (8002fd0 <malloc+0xc>)
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	f000 b825 	b.w	8003018 <_malloc_r>
 8002fce:	bf00      	nop
 8002fd0:	20000010 	.word	0x20000010

08002fd4 <sbrk_aligned>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8003014 <sbrk_aligned+0x40>)
 8002fd8:	460c      	mov	r4, r1
 8002fda:	4605      	mov	r5, r0
 8002fdc:	6831      	ldr	r1, [r6, #0]
 8002fde:	b911      	cbnz	r1, 8002fe6 <sbrk_aligned+0x12>
 8002fe0:	f000 fe4c 	bl	8003c7c <_sbrk_r>
 8002fe4:	6030      	str	r0, [r6, #0]
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f000 fe47 	bl	8003c7c <_sbrk_r>
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	d103      	bne.n	8002ffa <sbrk_aligned+0x26>
 8002ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	1cc4      	adds	r4, r0, #3
 8002ffc:	f024 0403 	bic.w	r4, r4, #3
 8003000:	42a0      	cmp	r0, r4
 8003002:	d0f8      	beq.n	8002ff6 <sbrk_aligned+0x22>
 8003004:	1a21      	subs	r1, r4, r0
 8003006:	4628      	mov	r0, r5
 8003008:	f000 fe38 	bl	8003c7c <_sbrk_r>
 800300c:	3001      	adds	r0, #1
 800300e:	d1f2      	bne.n	8002ff6 <sbrk_aligned+0x22>
 8003010:	e7ef      	b.n	8002ff2 <sbrk_aligned+0x1e>
 8003012:	bf00      	nop
 8003014:	2000046c 	.word	0x2000046c

08003018 <_malloc_r>:
 8003018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800301c:	1ccd      	adds	r5, r1, #3
 800301e:	4606      	mov	r6, r0
 8003020:	f025 0503 	bic.w	r5, r5, #3
 8003024:	3508      	adds	r5, #8
 8003026:	2d0c      	cmp	r5, #12
 8003028:	bf38      	it	cc
 800302a:	250c      	movcc	r5, #12
 800302c:	2d00      	cmp	r5, #0
 800302e:	db01      	blt.n	8003034 <_malloc_r+0x1c>
 8003030:	42a9      	cmp	r1, r5
 8003032:	d904      	bls.n	800303e <_malloc_r+0x26>
 8003034:	230c      	movs	r3, #12
 8003036:	6033      	str	r3, [r6, #0]
 8003038:	2000      	movs	r0, #0
 800303a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800303e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003114 <_malloc_r+0xfc>
 8003042:	f000 f869 	bl	8003118 <__malloc_lock>
 8003046:	f8d8 3000 	ldr.w	r3, [r8]
 800304a:	461c      	mov	r4, r3
 800304c:	bb44      	cbnz	r4, 80030a0 <_malloc_r+0x88>
 800304e:	4629      	mov	r1, r5
 8003050:	4630      	mov	r0, r6
 8003052:	f7ff ffbf 	bl	8002fd4 <sbrk_aligned>
 8003056:	1c43      	adds	r3, r0, #1
 8003058:	4604      	mov	r4, r0
 800305a:	d158      	bne.n	800310e <_malloc_r+0xf6>
 800305c:	f8d8 4000 	ldr.w	r4, [r8]
 8003060:	4627      	mov	r7, r4
 8003062:	2f00      	cmp	r7, #0
 8003064:	d143      	bne.n	80030ee <_malloc_r+0xd6>
 8003066:	2c00      	cmp	r4, #0
 8003068:	d04b      	beq.n	8003102 <_malloc_r+0xea>
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	4639      	mov	r1, r7
 800306e:	4630      	mov	r0, r6
 8003070:	eb04 0903 	add.w	r9, r4, r3
 8003074:	f000 fe02 	bl	8003c7c <_sbrk_r>
 8003078:	4581      	cmp	r9, r0
 800307a:	d142      	bne.n	8003102 <_malloc_r+0xea>
 800307c:	6821      	ldr	r1, [r4, #0]
 800307e:	4630      	mov	r0, r6
 8003080:	1a6d      	subs	r5, r5, r1
 8003082:	4629      	mov	r1, r5
 8003084:	f7ff ffa6 	bl	8002fd4 <sbrk_aligned>
 8003088:	3001      	adds	r0, #1
 800308a:	d03a      	beq.n	8003102 <_malloc_r+0xea>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	442b      	add	r3, r5
 8003090:	6023      	str	r3, [r4, #0]
 8003092:	f8d8 3000 	ldr.w	r3, [r8]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	bb62      	cbnz	r2, 80030f4 <_malloc_r+0xdc>
 800309a:	f8c8 7000 	str.w	r7, [r8]
 800309e:	e00f      	b.n	80030c0 <_malloc_r+0xa8>
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	1b52      	subs	r2, r2, r5
 80030a4:	d420      	bmi.n	80030e8 <_malloc_r+0xd0>
 80030a6:	2a0b      	cmp	r2, #11
 80030a8:	d917      	bls.n	80030da <_malloc_r+0xc2>
 80030aa:	1961      	adds	r1, r4, r5
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	6025      	str	r5, [r4, #0]
 80030b0:	bf18      	it	ne
 80030b2:	6059      	strne	r1, [r3, #4]
 80030b4:	6863      	ldr	r3, [r4, #4]
 80030b6:	bf08      	it	eq
 80030b8:	f8c8 1000 	streq.w	r1, [r8]
 80030bc:	5162      	str	r2, [r4, r5]
 80030be:	604b      	str	r3, [r1, #4]
 80030c0:	4630      	mov	r0, r6
 80030c2:	f000 f82f 	bl	8003124 <__malloc_unlock>
 80030c6:	f104 000b 	add.w	r0, r4, #11
 80030ca:	1d23      	adds	r3, r4, #4
 80030cc:	f020 0007 	bic.w	r0, r0, #7
 80030d0:	1ac2      	subs	r2, r0, r3
 80030d2:	bf1c      	itt	ne
 80030d4:	1a1b      	subne	r3, r3, r0
 80030d6:	50a3      	strne	r3, [r4, r2]
 80030d8:	e7af      	b.n	800303a <_malloc_r+0x22>
 80030da:	6862      	ldr	r2, [r4, #4]
 80030dc:	42a3      	cmp	r3, r4
 80030de:	bf0c      	ite	eq
 80030e0:	f8c8 2000 	streq.w	r2, [r8]
 80030e4:	605a      	strne	r2, [r3, #4]
 80030e6:	e7eb      	b.n	80030c0 <_malloc_r+0xa8>
 80030e8:	4623      	mov	r3, r4
 80030ea:	6864      	ldr	r4, [r4, #4]
 80030ec:	e7ae      	b.n	800304c <_malloc_r+0x34>
 80030ee:	463c      	mov	r4, r7
 80030f0:	687f      	ldr	r7, [r7, #4]
 80030f2:	e7b6      	b.n	8003062 <_malloc_r+0x4a>
 80030f4:	461a      	mov	r2, r3
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d1fb      	bne.n	80030f4 <_malloc_r+0xdc>
 80030fc:	2300      	movs	r3, #0
 80030fe:	6053      	str	r3, [r2, #4]
 8003100:	e7de      	b.n	80030c0 <_malloc_r+0xa8>
 8003102:	230c      	movs	r3, #12
 8003104:	4630      	mov	r0, r6
 8003106:	6033      	str	r3, [r6, #0]
 8003108:	f000 f80c 	bl	8003124 <__malloc_unlock>
 800310c:	e794      	b.n	8003038 <_malloc_r+0x20>
 800310e:	6005      	str	r5, [r0, #0]
 8003110:	e7d6      	b.n	80030c0 <_malloc_r+0xa8>
 8003112:	bf00      	nop
 8003114:	20000470 	.word	0x20000470

08003118 <__malloc_lock>:
 8003118:	4801      	ldr	r0, [pc, #4]	@ (8003120 <__malloc_lock+0x8>)
 800311a:	f7ff b8a6 	b.w	800226a <__retarget_lock_acquire_recursive>
 800311e:	bf00      	nop
 8003120:	20000468 	.word	0x20000468

08003124 <__malloc_unlock>:
 8003124:	4801      	ldr	r0, [pc, #4]	@ (800312c <__malloc_unlock+0x8>)
 8003126:	f7ff b8a1 	b.w	800226c <__retarget_lock_release_recursive>
 800312a:	bf00      	nop
 800312c:	20000468 	.word	0x20000468

08003130 <_Balloc>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	69c6      	ldr	r6, [r0, #28]
 8003134:	4604      	mov	r4, r0
 8003136:	460d      	mov	r5, r1
 8003138:	b976      	cbnz	r6, 8003158 <_Balloc+0x28>
 800313a:	2010      	movs	r0, #16
 800313c:	f7ff ff42 	bl	8002fc4 <malloc>
 8003140:	4602      	mov	r2, r0
 8003142:	61e0      	str	r0, [r4, #28]
 8003144:	b920      	cbnz	r0, 8003150 <_Balloc+0x20>
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <_Balloc+0x78>)
 8003148:	216b      	movs	r1, #107	@ 0x6b
 800314a:	4818      	ldr	r0, [pc, #96]	@ (80031ac <_Balloc+0x7c>)
 800314c:	f000 fdb4 	bl	8003cb8 <__assert_func>
 8003150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003154:	6006      	str	r6, [r0, #0]
 8003156:	60c6      	str	r6, [r0, #12]
 8003158:	69e6      	ldr	r6, [r4, #28]
 800315a:	68f3      	ldr	r3, [r6, #12]
 800315c:	b183      	cbz	r3, 8003180 <_Balloc+0x50>
 800315e:	69e3      	ldr	r3, [r4, #28]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003166:	b9b8      	cbnz	r0, 8003198 <_Balloc+0x68>
 8003168:	2101      	movs	r1, #1
 800316a:	4620      	mov	r0, r4
 800316c:	fa01 f605 	lsl.w	r6, r1, r5
 8003170:	1d72      	adds	r2, r6, #5
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	f000 fdbe 	bl	8003cf4 <_calloc_r>
 8003178:	b160      	cbz	r0, 8003194 <_Balloc+0x64>
 800317a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800317e:	e00e      	b.n	800319e <_Balloc+0x6e>
 8003180:	2221      	movs	r2, #33	@ 0x21
 8003182:	2104      	movs	r1, #4
 8003184:	4620      	mov	r0, r4
 8003186:	f000 fdb5 	bl	8003cf4 <_calloc_r>
 800318a:	69e3      	ldr	r3, [r4, #28]
 800318c:	60f0      	str	r0, [r6, #12]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e4      	bne.n	800315e <_Balloc+0x2e>
 8003194:	2000      	movs	r0, #0
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	6802      	ldr	r2, [r0, #0]
 800319a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800319e:	2300      	movs	r3, #0
 80031a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80031a4:	e7f7      	b.n	8003196 <_Balloc+0x66>
 80031a6:	bf00      	nop
 80031a8:	0800439b 	.word	0x0800439b
 80031ac:	0800441b 	.word	0x0800441b

080031b0 <_Bfree>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	69c6      	ldr	r6, [r0, #28]
 80031b4:	4605      	mov	r5, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	b976      	cbnz	r6, 80031d8 <_Bfree+0x28>
 80031ba:	2010      	movs	r0, #16
 80031bc:	f7ff ff02 	bl	8002fc4 <malloc>
 80031c0:	4602      	mov	r2, r0
 80031c2:	61e8      	str	r0, [r5, #28]
 80031c4:	b920      	cbnz	r0, 80031d0 <_Bfree+0x20>
 80031c6:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <_Bfree+0x3c>)
 80031c8:	218f      	movs	r1, #143	@ 0x8f
 80031ca:	4809      	ldr	r0, [pc, #36]	@ (80031f0 <_Bfree+0x40>)
 80031cc:	f000 fd74 	bl	8003cb8 <__assert_func>
 80031d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80031d4:	6006      	str	r6, [r0, #0]
 80031d6:	60c6      	str	r6, [r0, #12]
 80031d8:	b13c      	cbz	r4, 80031ea <_Bfree+0x3a>
 80031da:	69eb      	ldr	r3, [r5, #28]
 80031dc:	6862      	ldr	r2, [r4, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031e4:	6021      	str	r1, [r4, #0]
 80031e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	0800439b 	.word	0x0800439b
 80031f0:	0800441b 	.word	0x0800441b

080031f4 <__multadd>:
 80031f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f8:	f101 0c14 	add.w	ip, r1, #20
 80031fc:	4607      	mov	r7, r0
 80031fe:	460c      	mov	r4, r1
 8003200:	461e      	mov	r6, r3
 8003202:	690d      	ldr	r5, [r1, #16]
 8003204:	2000      	movs	r0, #0
 8003206:	f8dc 3000 	ldr.w	r3, [ip]
 800320a:	3001      	adds	r0, #1
 800320c:	b299      	uxth	r1, r3
 800320e:	4285      	cmp	r5, r0
 8003210:	fb02 6101 	mla	r1, r2, r1, r6
 8003214:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003218:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800321c:	b289      	uxth	r1, r1
 800321e:	fb02 3306 	mla	r3, r2, r6, r3
 8003222:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800322a:	f84c 1b04 	str.w	r1, [ip], #4
 800322e:	dcea      	bgt.n	8003206 <__multadd+0x12>
 8003230:	b30e      	cbz	r6, 8003276 <__multadd+0x82>
 8003232:	68a3      	ldr	r3, [r4, #8]
 8003234:	42ab      	cmp	r3, r5
 8003236:	dc19      	bgt.n	800326c <__multadd+0x78>
 8003238:	6861      	ldr	r1, [r4, #4]
 800323a:	4638      	mov	r0, r7
 800323c:	3101      	adds	r1, #1
 800323e:	f7ff ff77 	bl	8003130 <_Balloc>
 8003242:	4680      	mov	r8, r0
 8003244:	b928      	cbnz	r0, 8003252 <__multadd+0x5e>
 8003246:	4602      	mov	r2, r0
 8003248:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <__multadd+0x88>)
 800324a:	21ba      	movs	r1, #186	@ 0xba
 800324c:	480c      	ldr	r0, [pc, #48]	@ (8003280 <__multadd+0x8c>)
 800324e:	f000 fd33 	bl	8003cb8 <__assert_func>
 8003252:	6922      	ldr	r2, [r4, #16]
 8003254:	f104 010c 	add.w	r1, r4, #12
 8003258:	300c      	adds	r0, #12
 800325a:	3202      	adds	r2, #2
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	f000 fd1d 	bl	8003c9c <memcpy>
 8003262:	4621      	mov	r1, r4
 8003264:	4644      	mov	r4, r8
 8003266:	4638      	mov	r0, r7
 8003268:	f7ff ffa2 	bl	80031b0 <_Bfree>
 800326c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003270:	3501      	adds	r5, #1
 8003272:	615e      	str	r6, [r3, #20]
 8003274:	6125      	str	r5, [r4, #16]
 8003276:	4620      	mov	r0, r4
 8003278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800327c:	0800440a 	.word	0x0800440a
 8003280:	0800441b 	.word	0x0800441b

08003284 <__hi0bits>:
 8003284:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003288:	4603      	mov	r3, r0
 800328a:	bf36      	itet	cc
 800328c:	0403      	lslcc	r3, r0, #16
 800328e:	2000      	movcs	r0, #0
 8003290:	2010      	movcc	r0, #16
 8003292:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003296:	bf3c      	itt	cc
 8003298:	021b      	lslcc	r3, r3, #8
 800329a:	3008      	addcc	r0, #8
 800329c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032a0:	bf3c      	itt	cc
 80032a2:	011b      	lslcc	r3, r3, #4
 80032a4:	3004      	addcc	r0, #4
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032aa:	bf3c      	itt	cc
 80032ac:	009b      	lslcc	r3, r3, #2
 80032ae:	3002      	addcc	r0, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db05      	blt.n	80032c0 <__hi0bits+0x3c>
 80032b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80032b8:	f100 0001 	add.w	r0, r0, #1
 80032bc:	bf08      	it	eq
 80032be:	2020      	moveq	r0, #32
 80032c0:	4770      	bx	lr

080032c2 <__lo0bits>:
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	4602      	mov	r2, r0
 80032c6:	f013 0007 	ands.w	r0, r3, #7
 80032ca:	d00b      	beq.n	80032e4 <__lo0bits+0x22>
 80032cc:	07d9      	lsls	r1, r3, #31
 80032ce:	d421      	bmi.n	8003314 <__lo0bits+0x52>
 80032d0:	0798      	lsls	r0, r3, #30
 80032d2:	bf47      	ittee	mi
 80032d4:	085b      	lsrmi	r3, r3, #1
 80032d6:	2001      	movmi	r0, #1
 80032d8:	089b      	lsrpl	r3, r3, #2
 80032da:	2002      	movpl	r0, #2
 80032dc:	bf4c      	ite	mi
 80032de:	6013      	strmi	r3, [r2, #0]
 80032e0:	6013      	strpl	r3, [r2, #0]
 80032e2:	4770      	bx	lr
 80032e4:	b299      	uxth	r1, r3
 80032e6:	b909      	cbnz	r1, 80032ec <__lo0bits+0x2a>
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	2010      	movs	r0, #16
 80032ec:	b2d9      	uxtb	r1, r3
 80032ee:	b909      	cbnz	r1, 80032f4 <__lo0bits+0x32>
 80032f0:	3008      	adds	r0, #8
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	0719      	lsls	r1, r3, #28
 80032f6:	bf04      	itt	eq
 80032f8:	091b      	lsreq	r3, r3, #4
 80032fa:	3004      	addeq	r0, #4
 80032fc:	0799      	lsls	r1, r3, #30
 80032fe:	bf04      	itt	eq
 8003300:	089b      	lsreq	r3, r3, #2
 8003302:	3002      	addeq	r0, #2
 8003304:	07d9      	lsls	r1, r3, #31
 8003306:	d403      	bmi.n	8003310 <__lo0bits+0x4e>
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	f100 0001 	add.w	r0, r0, #1
 800330e:	d003      	beq.n	8003318 <__lo0bits+0x56>
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4770      	bx	lr
 8003314:	2000      	movs	r0, #0
 8003316:	4770      	bx	lr
 8003318:	2020      	movs	r0, #32
 800331a:	4770      	bx	lr

0800331c <__i2b>:
 800331c:	b510      	push	{r4, lr}
 800331e:	460c      	mov	r4, r1
 8003320:	2101      	movs	r1, #1
 8003322:	f7ff ff05 	bl	8003130 <_Balloc>
 8003326:	4602      	mov	r2, r0
 8003328:	b928      	cbnz	r0, 8003336 <__i2b+0x1a>
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <__i2b+0x24>)
 800332c:	f240 1145 	movw	r1, #325	@ 0x145
 8003330:	4804      	ldr	r0, [pc, #16]	@ (8003344 <__i2b+0x28>)
 8003332:	f000 fcc1 	bl	8003cb8 <__assert_func>
 8003336:	2301      	movs	r3, #1
 8003338:	6144      	str	r4, [r0, #20]
 800333a:	6103      	str	r3, [r0, #16]
 800333c:	bd10      	pop	{r4, pc}
 800333e:	bf00      	nop
 8003340:	0800440a 	.word	0x0800440a
 8003344:	0800441b 	.word	0x0800441b

08003348 <__multiply>:
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	4614      	mov	r4, r2
 800334e:	690a      	ldr	r2, [r1, #16]
 8003350:	460f      	mov	r7, r1
 8003352:	b085      	sub	sp, #20
 8003354:	6923      	ldr	r3, [r4, #16]
 8003356:	429a      	cmp	r2, r3
 8003358:	bfa2      	ittt	ge
 800335a:	4623      	movge	r3, r4
 800335c:	460c      	movge	r4, r1
 800335e:	461f      	movge	r7, r3
 8003360:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003364:	68a3      	ldr	r3, [r4, #8]
 8003366:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800336a:	6861      	ldr	r1, [r4, #4]
 800336c:	eb0a 0609 	add.w	r6, sl, r9
 8003370:	42b3      	cmp	r3, r6
 8003372:	bfb8      	it	lt
 8003374:	3101      	addlt	r1, #1
 8003376:	f7ff fedb 	bl	8003130 <_Balloc>
 800337a:	b930      	cbnz	r0, 800338a <__multiply+0x42>
 800337c:	4602      	mov	r2, r0
 800337e:	4b45      	ldr	r3, [pc, #276]	@ (8003494 <__multiply+0x14c>)
 8003380:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003384:	4844      	ldr	r0, [pc, #272]	@ (8003498 <__multiply+0x150>)
 8003386:	f000 fc97 	bl	8003cb8 <__assert_func>
 800338a:	f100 0514 	add.w	r5, r0, #20
 800338e:	2200      	movs	r2, #0
 8003390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003394:	462b      	mov	r3, r5
 8003396:	4543      	cmp	r3, r8
 8003398:	d321      	bcc.n	80033de <__multiply+0x96>
 800339a:	f107 0114 	add.w	r1, r7, #20
 800339e:	f104 0214 	add.w	r2, r4, #20
 80033a2:	f104 0715 	add.w	r7, r4, #21
 80033a6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80033aa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	1b13      	subs	r3, r2, r4
 80033b2:	3b15      	subs	r3, #21
 80033b4:	f023 0303 	bic.w	r3, r3, #3
 80033b8:	3304      	adds	r3, #4
 80033ba:	42ba      	cmp	r2, r7
 80033bc:	bf38      	it	cc
 80033be:	2304      	movcc	r3, #4
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	9b02      	ldr	r3, [sp, #8]
 80033c4:	9103      	str	r1, [sp, #12]
 80033c6:	428b      	cmp	r3, r1
 80033c8:	d80c      	bhi.n	80033e4 <__multiply+0x9c>
 80033ca:	2e00      	cmp	r6, #0
 80033cc:	dd03      	ble.n	80033d6 <__multiply+0x8e>
 80033ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d05b      	beq.n	800348e <__multiply+0x146>
 80033d6:	6106      	str	r6, [r0, #16]
 80033d8:	b005      	add	sp, #20
 80033da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033de:	f843 2b04 	str.w	r2, [r3], #4
 80033e2:	e7d8      	b.n	8003396 <__multiply+0x4e>
 80033e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80033e8:	f1ba 0f00 	cmp.w	sl, #0
 80033ec:	d024      	beq.n	8003438 <__multiply+0xf0>
 80033ee:	f104 0e14 	add.w	lr, r4, #20
 80033f2:	46a9      	mov	r9, r5
 80033f4:	f04f 0c00 	mov.w	ip, #0
 80033f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80033fc:	f8d9 3000 	ldr.w	r3, [r9]
 8003400:	fa1f fb87 	uxth.w	fp, r7
 8003404:	4572      	cmp	r2, lr
 8003406:	b29b      	uxth	r3, r3
 8003408:	fb0a 330b 	mla	r3, sl, fp, r3
 800340c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003410:	f8d9 7000 	ldr.w	r7, [r9]
 8003414:	4463      	add	r3, ip
 8003416:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800341a:	fb0a c70b 	mla	r7, sl, fp, ip
 800341e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003422:	b29b      	uxth	r3, r3
 8003424:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003428:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800342c:	f849 3b04 	str.w	r3, [r9], #4
 8003430:	d8e2      	bhi.n	80033f8 <__multiply+0xb0>
 8003432:	9b01      	ldr	r3, [sp, #4]
 8003434:	f845 c003 	str.w	ip, [r5, r3]
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	3104      	adds	r1, #4
 800343c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003440:	f1b9 0f00 	cmp.w	r9, #0
 8003444:	d021      	beq.n	800348a <__multiply+0x142>
 8003446:	682b      	ldr	r3, [r5, #0]
 8003448:	f104 0c14 	add.w	ip, r4, #20
 800344c:	46ae      	mov	lr, r5
 800344e:	f04f 0a00 	mov.w	sl, #0
 8003452:	f8bc b000 	ldrh.w	fp, [ip]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800345c:	fb09 770b 	mla	r7, r9, fp, r7
 8003460:	4457      	add	r7, sl
 8003462:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003466:	f84e 3b04 	str.w	r3, [lr], #4
 800346a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800346e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003472:	f8be 3000 	ldrh.w	r3, [lr]
 8003476:	4562      	cmp	r2, ip
 8003478:	fb09 330a 	mla	r3, r9, sl, r3
 800347c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003484:	d8e5      	bhi.n	8003452 <__multiply+0x10a>
 8003486:	9f01      	ldr	r7, [sp, #4]
 8003488:	51eb      	str	r3, [r5, r7]
 800348a:	3504      	adds	r5, #4
 800348c:	e799      	b.n	80033c2 <__multiply+0x7a>
 800348e:	3e01      	subs	r6, #1
 8003490:	e79b      	b.n	80033ca <__multiply+0x82>
 8003492:	bf00      	nop
 8003494:	0800440a 	.word	0x0800440a
 8003498:	0800441b 	.word	0x0800441b

0800349c <__pow5mult>:
 800349c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a0:	4615      	mov	r5, r2
 80034a2:	f012 0203 	ands.w	r2, r2, #3
 80034a6:	4607      	mov	r7, r0
 80034a8:	460e      	mov	r6, r1
 80034aa:	d007      	beq.n	80034bc <__pow5mult+0x20>
 80034ac:	3a01      	subs	r2, #1
 80034ae:	4c25      	ldr	r4, [pc, #148]	@ (8003544 <__pow5mult+0xa8>)
 80034b0:	2300      	movs	r3, #0
 80034b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80034b6:	f7ff fe9d 	bl	80031f4 <__multadd>
 80034ba:	4606      	mov	r6, r0
 80034bc:	10ad      	asrs	r5, r5, #2
 80034be:	d03d      	beq.n	800353c <__pow5mult+0xa0>
 80034c0:	69fc      	ldr	r4, [r7, #28]
 80034c2:	b97c      	cbnz	r4, 80034e4 <__pow5mult+0x48>
 80034c4:	2010      	movs	r0, #16
 80034c6:	f7ff fd7d 	bl	8002fc4 <malloc>
 80034ca:	4602      	mov	r2, r0
 80034cc:	61f8      	str	r0, [r7, #28]
 80034ce:	b928      	cbnz	r0, 80034dc <__pow5mult+0x40>
 80034d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003548 <__pow5mult+0xac>)
 80034d2:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80034d6:	481d      	ldr	r0, [pc, #116]	@ (800354c <__pow5mult+0xb0>)
 80034d8:	f000 fbee 	bl	8003cb8 <__assert_func>
 80034dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80034e0:	6004      	str	r4, [r0, #0]
 80034e2:	60c4      	str	r4, [r0, #12]
 80034e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80034e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80034ec:	b94c      	cbnz	r4, 8003502 <__pow5mult+0x66>
 80034ee:	f240 2171 	movw	r1, #625	@ 0x271
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff ff12 	bl	800331c <__i2b>
 80034f8:	2300      	movs	r3, #0
 80034fa:	4604      	mov	r4, r0
 80034fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8003500:	6003      	str	r3, [r0, #0]
 8003502:	f04f 0900 	mov.w	r9, #0
 8003506:	07eb      	lsls	r3, r5, #31
 8003508:	d50a      	bpl.n	8003520 <__pow5mult+0x84>
 800350a:	4631      	mov	r1, r6
 800350c:	4622      	mov	r2, r4
 800350e:	4638      	mov	r0, r7
 8003510:	f7ff ff1a 	bl	8003348 <__multiply>
 8003514:	4680      	mov	r8, r0
 8003516:	4631      	mov	r1, r6
 8003518:	4638      	mov	r0, r7
 800351a:	4646      	mov	r6, r8
 800351c:	f7ff fe48 	bl	80031b0 <_Bfree>
 8003520:	106d      	asrs	r5, r5, #1
 8003522:	d00b      	beq.n	800353c <__pow5mult+0xa0>
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	b938      	cbnz	r0, 8003538 <__pow5mult+0x9c>
 8003528:	4622      	mov	r2, r4
 800352a:	4621      	mov	r1, r4
 800352c:	4638      	mov	r0, r7
 800352e:	f7ff ff0b 	bl	8003348 <__multiply>
 8003532:	6020      	str	r0, [r4, #0]
 8003534:	f8c0 9000 	str.w	r9, [r0]
 8003538:	4604      	mov	r4, r0
 800353a:	e7e4      	b.n	8003506 <__pow5mult+0x6a>
 800353c:	4630      	mov	r0, r6
 800353e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003542:	bf00      	nop
 8003544:	08004474 	.word	0x08004474
 8003548:	0800439b 	.word	0x0800439b
 800354c:	0800441b 	.word	0x0800441b

08003550 <__lshift>:
 8003550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003554:	460c      	mov	r4, r1
 8003556:	4607      	mov	r7, r0
 8003558:	4691      	mov	r9, r2
 800355a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800355e:	6923      	ldr	r3, [r4, #16]
 8003560:	6849      	ldr	r1, [r1, #4]
 8003562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003566:	68a3      	ldr	r3, [r4, #8]
 8003568:	f108 0601 	add.w	r6, r8, #1
 800356c:	42b3      	cmp	r3, r6
 800356e:	db0b      	blt.n	8003588 <__lshift+0x38>
 8003570:	4638      	mov	r0, r7
 8003572:	f7ff fddd 	bl	8003130 <_Balloc>
 8003576:	4605      	mov	r5, r0
 8003578:	b948      	cbnz	r0, 800358e <__lshift+0x3e>
 800357a:	4602      	mov	r2, r0
 800357c:	4b28      	ldr	r3, [pc, #160]	@ (8003620 <__lshift+0xd0>)
 800357e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003582:	4828      	ldr	r0, [pc, #160]	@ (8003624 <__lshift+0xd4>)
 8003584:	f000 fb98 	bl	8003cb8 <__assert_func>
 8003588:	3101      	adds	r1, #1
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	e7ee      	b.n	800356c <__lshift+0x1c>
 800358e:	2300      	movs	r3, #0
 8003590:	f100 0114 	add.w	r1, r0, #20
 8003594:	f100 0210 	add.w	r2, r0, #16
 8003598:	4618      	mov	r0, r3
 800359a:	4553      	cmp	r3, sl
 800359c:	db33      	blt.n	8003606 <__lshift+0xb6>
 800359e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80035a2:	f104 0314 	add.w	r3, r4, #20
 80035a6:	6920      	ldr	r0, [r4, #16]
 80035a8:	f019 091f 	ands.w	r9, r9, #31
 80035ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80035b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80035b4:	d02b      	beq.n	800360e <__lshift+0xbe>
 80035b6:	f1c9 0e20 	rsb	lr, r9, #32
 80035ba:	468a      	mov	sl, r1
 80035bc:	2200      	movs	r2, #0
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	fa00 f009 	lsl.w	r0, r0, r9
 80035c4:	4310      	orrs	r0, r2
 80035c6:	f84a 0b04 	str.w	r0, [sl], #4
 80035ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ce:	459c      	cmp	ip, r3
 80035d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80035d4:	d8f3      	bhi.n	80035be <__lshift+0x6e>
 80035d6:	ebac 0304 	sub.w	r3, ip, r4
 80035da:	f104 0015 	add.w	r0, r4, #21
 80035de:	3b15      	subs	r3, #21
 80035e0:	f023 0303 	bic.w	r3, r3, #3
 80035e4:	3304      	adds	r3, #4
 80035e6:	4584      	cmp	ip, r0
 80035e8:	bf38      	it	cc
 80035ea:	2304      	movcc	r3, #4
 80035ec:	50ca      	str	r2, [r1, r3]
 80035ee:	b10a      	cbz	r2, 80035f4 <__lshift+0xa4>
 80035f0:	f108 0602 	add.w	r6, r8, #2
 80035f4:	3e01      	subs	r6, #1
 80035f6:	4638      	mov	r0, r7
 80035f8:	4621      	mov	r1, r4
 80035fa:	612e      	str	r6, [r5, #16]
 80035fc:	f7ff fdd8 	bl	80031b0 <_Bfree>
 8003600:	4628      	mov	r0, r5
 8003602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003606:	3301      	adds	r3, #1
 8003608:	f842 0f04 	str.w	r0, [r2, #4]!
 800360c:	e7c5      	b.n	800359a <__lshift+0x4a>
 800360e:	3904      	subs	r1, #4
 8003610:	f853 2b04 	ldr.w	r2, [r3], #4
 8003614:	459c      	cmp	ip, r3
 8003616:	f841 2f04 	str.w	r2, [r1, #4]!
 800361a:	d8f9      	bhi.n	8003610 <__lshift+0xc0>
 800361c:	e7ea      	b.n	80035f4 <__lshift+0xa4>
 800361e:	bf00      	nop
 8003620:	0800440a 	.word	0x0800440a
 8003624:	0800441b 	.word	0x0800441b

08003628 <__mcmp>:
 8003628:	4603      	mov	r3, r0
 800362a:	690a      	ldr	r2, [r1, #16]
 800362c:	6900      	ldr	r0, [r0, #16]
 800362e:	1a80      	subs	r0, r0, r2
 8003630:	b530      	push	{r4, r5, lr}
 8003632:	d10e      	bne.n	8003652 <__mcmp+0x2a>
 8003634:	3314      	adds	r3, #20
 8003636:	3114      	adds	r1, #20
 8003638:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800363c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003644:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003648:	4295      	cmp	r5, r2
 800364a:	d003      	beq.n	8003654 <__mcmp+0x2c>
 800364c:	d205      	bcs.n	800365a <__mcmp+0x32>
 800364e:	f04f 30ff 	mov.w	r0, #4294967295
 8003652:	bd30      	pop	{r4, r5, pc}
 8003654:	42a3      	cmp	r3, r4
 8003656:	d3f3      	bcc.n	8003640 <__mcmp+0x18>
 8003658:	e7fb      	b.n	8003652 <__mcmp+0x2a>
 800365a:	2001      	movs	r0, #1
 800365c:	e7f9      	b.n	8003652 <__mcmp+0x2a>
	...

08003660 <__mdiff>:
 8003660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003664:	4689      	mov	r9, r1
 8003666:	4606      	mov	r6, r0
 8003668:	4611      	mov	r1, r2
 800366a:	4614      	mov	r4, r2
 800366c:	4648      	mov	r0, r9
 800366e:	f7ff ffdb 	bl	8003628 <__mcmp>
 8003672:	1e05      	subs	r5, r0, #0
 8003674:	d112      	bne.n	800369c <__mdiff+0x3c>
 8003676:	4629      	mov	r1, r5
 8003678:	4630      	mov	r0, r6
 800367a:	f7ff fd59 	bl	8003130 <_Balloc>
 800367e:	4602      	mov	r2, r0
 8003680:	b928      	cbnz	r0, 800368e <__mdiff+0x2e>
 8003682:	4b41      	ldr	r3, [pc, #260]	@ (8003788 <__mdiff+0x128>)
 8003684:	f240 2137 	movw	r1, #567	@ 0x237
 8003688:	4840      	ldr	r0, [pc, #256]	@ (800378c <__mdiff+0x12c>)
 800368a:	f000 fb15 	bl	8003cb8 <__assert_func>
 800368e:	2301      	movs	r3, #1
 8003690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003694:	4610      	mov	r0, r2
 8003696:	b003      	add	sp, #12
 8003698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369c:	bfbc      	itt	lt
 800369e:	464b      	movlt	r3, r9
 80036a0:	46a1      	movlt	r9, r4
 80036a2:	4630      	mov	r0, r6
 80036a4:	bfb8      	it	lt
 80036a6:	2501      	movlt	r5, #1
 80036a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80036ac:	bfb4      	ite	lt
 80036ae:	461c      	movlt	r4, r3
 80036b0:	2500      	movge	r5, #0
 80036b2:	f7ff fd3d 	bl	8003130 <_Balloc>
 80036b6:	4602      	mov	r2, r0
 80036b8:	b918      	cbnz	r0, 80036c2 <__mdiff+0x62>
 80036ba:	4b33      	ldr	r3, [pc, #204]	@ (8003788 <__mdiff+0x128>)
 80036bc:	f240 2145 	movw	r1, #581	@ 0x245
 80036c0:	e7e2      	b.n	8003688 <__mdiff+0x28>
 80036c2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80036c6:	f104 0e14 	add.w	lr, r4, #20
 80036ca:	6926      	ldr	r6, [r4, #16]
 80036cc:	f100 0b14 	add.w	fp, r0, #20
 80036d0:	60c5      	str	r5, [r0, #12]
 80036d2:	f109 0514 	add.w	r5, r9, #20
 80036d6:	f109 0310 	add.w	r3, r9, #16
 80036da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80036de:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80036e2:	46d9      	mov	r9, fp
 80036e4:	f04f 0c00 	mov.w	ip, #0
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	f85e 0b04 	ldr.w	r0, [lr], #4
 80036f0:	f853 af04 	ldr.w	sl, [r3, #4]!
 80036f4:	4576      	cmp	r6, lr
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	fa1f f38a 	uxth.w	r3, sl
 80036fc:	4619      	mov	r1, r3
 80036fe:	b283      	uxth	r3, r0
 8003700:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8003704:	eba1 0303 	sub.w	r3, r1, r3
 8003708:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800370c:	4463      	add	r3, ip
 800370e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003712:	b29b      	uxth	r3, r3
 8003714:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003718:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800371c:	f849 3b04 	str.w	r3, [r9], #4
 8003720:	d8e3      	bhi.n	80036ea <__mdiff+0x8a>
 8003722:	1b33      	subs	r3, r6, r4
 8003724:	3415      	adds	r4, #21
 8003726:	3b15      	subs	r3, #21
 8003728:	f023 0303 	bic.w	r3, r3, #3
 800372c:	3304      	adds	r3, #4
 800372e:	42a6      	cmp	r6, r4
 8003730:	bf38      	it	cc
 8003732:	2304      	movcc	r3, #4
 8003734:	441d      	add	r5, r3
 8003736:	445b      	add	r3, fp
 8003738:	462c      	mov	r4, r5
 800373a:	461e      	mov	r6, r3
 800373c:	4544      	cmp	r4, r8
 800373e:	d30e      	bcc.n	800375e <__mdiff+0xfe>
 8003740:	f108 0103 	add.w	r1, r8, #3
 8003744:	1b49      	subs	r1, r1, r5
 8003746:	3d03      	subs	r5, #3
 8003748:	f021 0103 	bic.w	r1, r1, #3
 800374c:	45a8      	cmp	r8, r5
 800374e:	bf38      	it	cc
 8003750:	2100      	movcc	r1, #0
 8003752:	440b      	add	r3, r1
 8003754:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003758:	b199      	cbz	r1, 8003782 <__mdiff+0x122>
 800375a:	6117      	str	r7, [r2, #16]
 800375c:	e79a      	b.n	8003694 <__mdiff+0x34>
 800375e:	f854 1b04 	ldr.w	r1, [r4], #4
 8003762:	46e6      	mov	lr, ip
 8003764:	fa1f fc81 	uxth.w	ip, r1
 8003768:	0c08      	lsrs	r0, r1, #16
 800376a:	4471      	add	r1, lr
 800376c:	44f4      	add	ip, lr
 800376e:	b289      	uxth	r1, r1
 8003770:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003774:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003778:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800377c:	f846 1b04 	str.w	r1, [r6], #4
 8003780:	e7dc      	b.n	800373c <__mdiff+0xdc>
 8003782:	3f01      	subs	r7, #1
 8003784:	e7e6      	b.n	8003754 <__mdiff+0xf4>
 8003786:	bf00      	nop
 8003788:	0800440a 	.word	0x0800440a
 800378c:	0800441b 	.word	0x0800441b

08003790 <__d2b>:
 8003790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003794:	460f      	mov	r7, r1
 8003796:	2101      	movs	r1, #1
 8003798:	4616      	mov	r6, r2
 800379a:	ec59 8b10 	vmov	r8, r9, d0
 800379e:	f7ff fcc7 	bl	8003130 <_Balloc>
 80037a2:	4604      	mov	r4, r0
 80037a4:	b930      	cbnz	r0, 80037b4 <__d2b+0x24>
 80037a6:	4602      	mov	r2, r0
 80037a8:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <__d2b+0xa8>)
 80037aa:	f240 310f 	movw	r1, #783	@ 0x30f
 80037ae:	4823      	ldr	r0, [pc, #140]	@ (800383c <__d2b+0xac>)
 80037b0:	f000 fa82 	bl	8003cb8 <__assert_func>
 80037b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80037b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80037bc:	b10d      	cbz	r5, 80037c2 <__d2b+0x32>
 80037be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	f1b8 0300 	subs.w	r3, r8, #0
 80037c8:	d023      	beq.n	8003812 <__d2b+0x82>
 80037ca:	4668      	mov	r0, sp
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f7ff fd78 	bl	80032c2 <__lo0bits>
 80037d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80037d6:	b1d0      	cbz	r0, 800380e <__d2b+0x7e>
 80037d8:	f1c0 0320 	rsb	r3, r0, #32
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	40c2      	lsrs	r2, r0
 80037e2:	430b      	orrs	r3, r1
 80037e4:	9201      	str	r2, [sp, #4]
 80037e6:	6163      	str	r3, [r4, #20]
 80037e8:	9b01      	ldr	r3, [sp, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	61a3      	str	r3, [r4, #24]
 80037ee:	bf0c      	ite	eq
 80037f0:	2201      	moveq	r2, #1
 80037f2:	2202      	movne	r2, #2
 80037f4:	6122      	str	r2, [r4, #16]
 80037f6:	b1a5      	cbz	r5, 8003822 <__d2b+0x92>
 80037f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80037fc:	4405      	add	r5, r0
 80037fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003802:	603d      	str	r5, [r7, #0]
 8003804:	6030      	str	r0, [r6, #0]
 8003806:	4620      	mov	r0, r4
 8003808:	b003      	add	sp, #12
 800380a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800380e:	6161      	str	r1, [r4, #20]
 8003810:	e7ea      	b.n	80037e8 <__d2b+0x58>
 8003812:	a801      	add	r0, sp, #4
 8003814:	f7ff fd55 	bl	80032c2 <__lo0bits>
 8003818:	9b01      	ldr	r3, [sp, #4]
 800381a:	3020      	adds	r0, #32
 800381c:	2201      	movs	r2, #1
 800381e:	6163      	str	r3, [r4, #20]
 8003820:	e7e8      	b.n	80037f4 <__d2b+0x64>
 8003822:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8003826:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800382a:	6038      	str	r0, [r7, #0]
 800382c:	6918      	ldr	r0, [r3, #16]
 800382e:	f7ff fd29 	bl	8003284 <__hi0bits>
 8003832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003836:	e7e5      	b.n	8003804 <__d2b+0x74>
 8003838:	0800440a 	.word	0x0800440a
 800383c:	0800441b 	.word	0x0800441b

08003840 <__ssputs_r>:
 8003840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003844:	461f      	mov	r7, r3
 8003846:	688e      	ldr	r6, [r1, #8]
 8003848:	4682      	mov	sl, r0
 800384a:	460c      	mov	r4, r1
 800384c:	42be      	cmp	r6, r7
 800384e:	4690      	mov	r8, r2
 8003850:	680b      	ldr	r3, [r1, #0]
 8003852:	d82d      	bhi.n	80038b0 <__ssputs_r+0x70>
 8003854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800385c:	d026      	beq.n	80038ac <__ssputs_r+0x6c>
 800385e:	6965      	ldr	r5, [r4, #20]
 8003860:	6909      	ldr	r1, [r1, #16]
 8003862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003866:	eba3 0901 	sub.w	r9, r3, r1
 800386a:	1c7b      	adds	r3, r7, #1
 800386c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003870:	444b      	add	r3, r9
 8003872:	106d      	asrs	r5, r5, #1
 8003874:	429d      	cmp	r5, r3
 8003876:	bf38      	it	cc
 8003878:	461d      	movcc	r5, r3
 800387a:	0553      	lsls	r3, r2, #21
 800387c:	d527      	bpl.n	80038ce <__ssputs_r+0x8e>
 800387e:	4629      	mov	r1, r5
 8003880:	f7ff fbca 	bl	8003018 <_malloc_r>
 8003884:	4606      	mov	r6, r0
 8003886:	b360      	cbz	r0, 80038e2 <__ssputs_r+0xa2>
 8003888:	464a      	mov	r2, r9
 800388a:	6921      	ldr	r1, [r4, #16]
 800388c:	f000 fa06 	bl	8003c9c <memcpy>
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	6126      	str	r6, [r4, #16]
 800389e:	444e      	add	r6, r9
 80038a0:	6165      	str	r5, [r4, #20]
 80038a2:	eba5 0509 	sub.w	r5, r5, r9
 80038a6:	6026      	str	r6, [r4, #0]
 80038a8:	463e      	mov	r6, r7
 80038aa:	60a5      	str	r5, [r4, #8]
 80038ac:	42be      	cmp	r6, r7
 80038ae:	d900      	bls.n	80038b2 <__ssputs_r+0x72>
 80038b0:	463e      	mov	r6, r7
 80038b2:	4632      	mov	r2, r6
 80038b4:	4641      	mov	r1, r8
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	f000 f9c6 	bl	8003c48 <memmove>
 80038bc:	68a3      	ldr	r3, [r4, #8]
 80038be:	2000      	movs	r0, #0
 80038c0:	1b9b      	subs	r3, r3, r6
 80038c2:	60a3      	str	r3, [r4, #8]
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	4433      	add	r3, r6
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ce:	462a      	mov	r2, r5
 80038d0:	f000 fa36 	bl	8003d40 <_realloc_r>
 80038d4:	4606      	mov	r6, r0
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d1e0      	bne.n	800389c <__ssputs_r+0x5c>
 80038da:	6921      	ldr	r1, [r4, #16]
 80038dc:	4650      	mov	r0, sl
 80038de:	f7ff fb27 	bl	8002f30 <_free_r>
 80038e2:	230c      	movs	r3, #12
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	f8ca 3000 	str.w	r3, [sl]
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038f2:	81a3      	strh	r3, [r4, #12]
 80038f4:	e7e9      	b.n	80038ca <__ssputs_r+0x8a>
	...

080038f8 <_svfiprintf_r>:
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	4698      	mov	r8, r3
 80038fe:	898b      	ldrh	r3, [r1, #12]
 8003900:	b09d      	sub	sp, #116	@ 0x74
 8003902:	4607      	mov	r7, r0
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	460d      	mov	r5, r1
 8003908:	4614      	mov	r4, r2
 800390a:	d510      	bpl.n	800392e <_svfiprintf_r+0x36>
 800390c:	690b      	ldr	r3, [r1, #16]
 800390e:	b973      	cbnz	r3, 800392e <_svfiprintf_r+0x36>
 8003910:	2140      	movs	r1, #64	@ 0x40
 8003912:	f7ff fb81 	bl	8003018 <_malloc_r>
 8003916:	6028      	str	r0, [r5, #0]
 8003918:	6128      	str	r0, [r5, #16]
 800391a:	b930      	cbnz	r0, 800392a <_svfiprintf_r+0x32>
 800391c:	230c      	movs	r3, #12
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	b01d      	add	sp, #116	@ 0x74
 8003926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392a:	2340      	movs	r3, #64	@ 0x40
 800392c:	616b      	str	r3, [r5, #20]
 800392e:	2300      	movs	r3, #0
 8003930:	f8cd 800c 	str.w	r8, [sp, #12]
 8003934:	f04f 0901 	mov.w	r9, #1
 8003938:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8003adc <_svfiprintf_r+0x1e4>
 800393c:	9309      	str	r3, [sp, #36]	@ 0x24
 800393e:	2320      	movs	r3, #32
 8003940:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003944:	2330      	movs	r3, #48	@ 0x30
 8003946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800394a:	4623      	mov	r3, r4
 800394c:	469a      	mov	sl, r3
 800394e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003952:	b10a      	cbz	r2, 8003958 <_svfiprintf_r+0x60>
 8003954:	2a25      	cmp	r2, #37	@ 0x25
 8003956:	d1f9      	bne.n	800394c <_svfiprintf_r+0x54>
 8003958:	ebba 0b04 	subs.w	fp, sl, r4
 800395c:	d00b      	beq.n	8003976 <_svfiprintf_r+0x7e>
 800395e:	465b      	mov	r3, fp
 8003960:	4622      	mov	r2, r4
 8003962:	4629      	mov	r1, r5
 8003964:	4638      	mov	r0, r7
 8003966:	f7ff ff6b 	bl	8003840 <__ssputs_r>
 800396a:	3001      	adds	r0, #1
 800396c:	f000 80a7 	beq.w	8003abe <_svfiprintf_r+0x1c6>
 8003970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003972:	445a      	add	r2, fp
 8003974:	9209      	str	r2, [sp, #36]	@ 0x24
 8003976:	f89a 3000 	ldrb.w	r3, [sl]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 809f 	beq.w	8003abe <_svfiprintf_r+0x1c6>
 8003980:	2300      	movs	r3, #0
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	f10a 0a01 	add.w	sl, sl, #1
 800398a:	9304      	str	r3, [sp, #16]
 800398c:	9307      	str	r3, [sp, #28]
 800398e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003992:	931a      	str	r3, [sp, #104]	@ 0x68
 8003994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003998:	4654      	mov	r4, sl
 800399a:	2205      	movs	r2, #5
 800399c:	484f      	ldr	r0, [pc, #316]	@ (8003adc <_svfiprintf_r+0x1e4>)
 800399e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a2:	f7fe fc64 	bl	800226e <memchr>
 80039a6:	9a04      	ldr	r2, [sp, #16]
 80039a8:	b9d8      	cbnz	r0, 80039e2 <_svfiprintf_r+0xea>
 80039aa:	06d0      	lsls	r0, r2, #27
 80039ac:	bf44      	itt	mi
 80039ae:	2320      	movmi	r3, #32
 80039b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039b4:	0711      	lsls	r1, r2, #28
 80039b6:	bf44      	itt	mi
 80039b8:	232b      	movmi	r3, #43	@ 0x2b
 80039ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039be:	f89a 3000 	ldrb.w	r3, [sl]
 80039c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80039c4:	d015      	beq.n	80039f2 <_svfiprintf_r+0xfa>
 80039c6:	9a07      	ldr	r2, [sp, #28]
 80039c8:	4654      	mov	r4, sl
 80039ca:	2000      	movs	r0, #0
 80039cc:	f04f 0c0a 	mov.w	ip, #10
 80039d0:	4621      	mov	r1, r4
 80039d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d6:	3b30      	subs	r3, #48	@ 0x30
 80039d8:	2b09      	cmp	r3, #9
 80039da:	d94b      	bls.n	8003a74 <_svfiprintf_r+0x17c>
 80039dc:	b1b0      	cbz	r0, 8003a0c <_svfiprintf_r+0x114>
 80039de:	9207      	str	r2, [sp, #28]
 80039e0:	e014      	b.n	8003a0c <_svfiprintf_r+0x114>
 80039e2:	eba0 0308 	sub.w	r3, r0, r8
 80039e6:	46a2      	mov	sl, r4
 80039e8:	fa09 f303 	lsl.w	r3, r9, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	e7d2      	b.n	8003998 <_svfiprintf_r+0xa0>
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	1d19      	adds	r1, r3, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	9103      	str	r1, [sp, #12]
 80039fc:	bfbb      	ittet	lt
 80039fe:	425b      	neglt	r3, r3
 8003a00:	f042 0202 	orrlt.w	r2, r2, #2
 8003a04:	9307      	strge	r3, [sp, #28]
 8003a06:	9307      	strlt	r3, [sp, #28]
 8003a08:	bfb8      	it	lt
 8003a0a:	9204      	strlt	r2, [sp, #16]
 8003a0c:	7823      	ldrb	r3, [r4, #0]
 8003a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a10:	d10a      	bne.n	8003a28 <_svfiprintf_r+0x130>
 8003a12:	7863      	ldrb	r3, [r4, #1]
 8003a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a16:	d132      	bne.n	8003a7e <_svfiprintf_r+0x186>
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	3402      	adds	r4, #2
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a24:	9203      	str	r2, [sp, #12]
 8003a26:	9305      	str	r3, [sp, #20]
 8003a28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003aec <_svfiprintf_r+0x1f4>
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	7821      	ldrb	r1, [r4, #0]
 8003a30:	4650      	mov	r0, sl
 8003a32:	f7fe fc1c 	bl	800226e <memchr>
 8003a36:	b138      	cbz	r0, 8003a48 <_svfiprintf_r+0x150>
 8003a38:	eba0 000a 	sub.w	r0, r0, sl
 8003a3c:	2240      	movs	r2, #64	@ 0x40
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	3401      	adds	r4, #1
 8003a42:	4082      	lsls	r2, r0
 8003a44:	4313      	orrs	r3, r2
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4c:	2206      	movs	r2, #6
 8003a4e:	4824      	ldr	r0, [pc, #144]	@ (8003ae0 <_svfiprintf_r+0x1e8>)
 8003a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a54:	f7fe fc0b 	bl	800226e <memchr>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d036      	beq.n	8003aca <_svfiprintf_r+0x1d2>
 8003a5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ae4 <_svfiprintf_r+0x1ec>)
 8003a5e:	bb1b      	cbnz	r3, 8003aa8 <_svfiprintf_r+0x1b0>
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	3307      	adds	r3, #7
 8003a64:	f023 0307 	bic.w	r3, r3, #7
 8003a68:	3308      	adds	r3, #8
 8003a6a:	9303      	str	r3, [sp, #12]
 8003a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a6e:	4433      	add	r3, r6
 8003a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a72:	e76a      	b.n	800394a <_svfiprintf_r+0x52>
 8003a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a78:	460c      	mov	r4, r1
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	e7a8      	b.n	80039d0 <_svfiprintf_r+0xd8>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	3401      	adds	r4, #1
 8003a82:	f04f 0c0a 	mov.w	ip, #10
 8003a86:	4619      	mov	r1, r3
 8003a88:	9305      	str	r3, [sp, #20]
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a90:	3a30      	subs	r2, #48	@ 0x30
 8003a92:	2a09      	cmp	r2, #9
 8003a94:	d903      	bls.n	8003a9e <_svfiprintf_r+0x1a6>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0c6      	beq.n	8003a28 <_svfiprintf_r+0x130>
 8003a9a:	9105      	str	r1, [sp, #20]
 8003a9c:	e7c4      	b.n	8003a28 <_svfiprintf_r+0x130>
 8003a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e7f0      	b.n	8003a8a <_svfiprintf_r+0x192>
 8003aa8:	ab03      	add	r3, sp, #12
 8003aaa:	462a      	mov	r2, r5
 8003aac:	a904      	add	r1, sp, #16
 8003aae:	4638      	mov	r0, r7
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <_svfiprintf_r+0x1f0>)
 8003ab4:	f7fd fe6c 	bl	8001790 <_printf_float>
 8003ab8:	1c42      	adds	r2, r0, #1
 8003aba:	4606      	mov	r6, r0
 8003abc:	d1d6      	bne.n	8003a6c <_svfiprintf_r+0x174>
 8003abe:	89ab      	ldrh	r3, [r5, #12]
 8003ac0:	065b      	lsls	r3, r3, #25
 8003ac2:	f53f af2d 	bmi.w	8003920 <_svfiprintf_r+0x28>
 8003ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ac8:	e72c      	b.n	8003924 <_svfiprintf_r+0x2c>
 8003aca:	ab03      	add	r3, sp, #12
 8003acc:	462a      	mov	r2, r5
 8003ace:	a904      	add	r1, sp, #16
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	4b04      	ldr	r3, [pc, #16]	@ (8003ae8 <_svfiprintf_r+0x1f0>)
 8003ad6:	f7fe f8f7 	bl	8001cc8 <_printf_i>
 8003ada:	e7ed      	b.n	8003ab8 <_svfiprintf_r+0x1c0>
 8003adc:	08004570 	.word	0x08004570
 8003ae0:	0800457a 	.word	0x0800457a
 8003ae4:	08001791 	.word	0x08001791
 8003ae8:	08003841 	.word	0x08003841
 8003aec:	08004576 	.word	0x08004576

08003af0 <__sflush_r>:
 8003af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af8:	0716      	lsls	r6, r2, #28
 8003afa:	4605      	mov	r5, r0
 8003afc:	460c      	mov	r4, r1
 8003afe:	d454      	bmi.n	8003baa <__sflush_r+0xba>
 8003b00:	684b      	ldr	r3, [r1, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	dc02      	bgt.n	8003b0c <__sflush_r+0x1c>
 8003b06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	dd48      	ble.n	8003b9e <__sflush_r+0xae>
 8003b0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b0e:	2e00      	cmp	r6, #0
 8003b10:	d045      	beq.n	8003b9e <__sflush_r+0xae>
 8003b12:	2300      	movs	r3, #0
 8003b14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b18:	682f      	ldr	r7, [r5, #0]
 8003b1a:	6a21      	ldr	r1, [r4, #32]
 8003b1c:	602b      	str	r3, [r5, #0]
 8003b1e:	d030      	beq.n	8003b82 <__sflush_r+0x92>
 8003b20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	0759      	lsls	r1, r3, #29
 8003b26:	d505      	bpl.n	8003b34 <__sflush_r+0x44>
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b2e:	b10b      	cbz	r3, 8003b34 <__sflush_r+0x44>
 8003b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	2300      	movs	r3, #0
 8003b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b38:	6a21      	ldr	r1, [r4, #32]
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	47b0      	blx	r6
 8003b3e:	1c43      	adds	r3, r0, #1
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	d106      	bne.n	8003b52 <__sflush_r+0x62>
 8003b44:	6829      	ldr	r1, [r5, #0]
 8003b46:	291d      	cmp	r1, #29
 8003b48:	d82b      	bhi.n	8003ba2 <__sflush_r+0xb2>
 8003b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf4 <__sflush_r+0x104>)
 8003b4c:	410a      	asrs	r2, r1
 8003b4e:	07d6      	lsls	r6, r2, #31
 8003b50:	d427      	bmi.n	8003ba2 <__sflush_r+0xb2>
 8003b52:	2200      	movs	r2, #0
 8003b54:	04d9      	lsls	r1, r3, #19
 8003b56:	6062      	str	r2, [r4, #4]
 8003b58:	6922      	ldr	r2, [r4, #16]
 8003b5a:	6022      	str	r2, [r4, #0]
 8003b5c:	d504      	bpl.n	8003b68 <__sflush_r+0x78>
 8003b5e:	1c42      	adds	r2, r0, #1
 8003b60:	d101      	bne.n	8003b66 <__sflush_r+0x76>
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	b903      	cbnz	r3, 8003b68 <__sflush_r+0x78>
 8003b66:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b6a:	602f      	str	r7, [r5, #0]
 8003b6c:	b1b9      	cbz	r1, 8003b9e <__sflush_r+0xae>
 8003b6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b72:	4299      	cmp	r1, r3
 8003b74:	d002      	beq.n	8003b7c <__sflush_r+0x8c>
 8003b76:	4628      	mov	r0, r5
 8003b78:	f7ff f9da 	bl	8002f30 <_free_r>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b80:	e00d      	b.n	8003b9e <__sflush_r+0xae>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4628      	mov	r0, r5
 8003b86:	47b0      	blx	r6
 8003b88:	4602      	mov	r2, r0
 8003b8a:	1c50      	adds	r0, r2, #1
 8003b8c:	d1c9      	bne.n	8003b22 <__sflush_r+0x32>
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0c6      	beq.n	8003b22 <__sflush_r+0x32>
 8003b94:	2b1d      	cmp	r3, #29
 8003b96:	d001      	beq.n	8003b9c <__sflush_r+0xac>
 8003b98:	2b16      	cmp	r3, #22
 8003b9a:	d11d      	bne.n	8003bd8 <__sflush_r+0xe8>
 8003b9c:	602f      	str	r7, [r5, #0]
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e021      	b.n	8003be6 <__sflush_r+0xf6>
 8003ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	e01a      	b.n	8003be0 <__sflush_r+0xf0>
 8003baa:	690f      	ldr	r7, [r1, #16]
 8003bac:	2f00      	cmp	r7, #0
 8003bae:	d0f6      	beq.n	8003b9e <__sflush_r+0xae>
 8003bb0:	0793      	lsls	r3, r2, #30
 8003bb2:	680e      	ldr	r6, [r1, #0]
 8003bb4:	600f      	str	r7, [r1, #0]
 8003bb6:	bf0c      	ite	eq
 8003bb8:	694b      	ldreq	r3, [r1, #20]
 8003bba:	2300      	movne	r3, #0
 8003bbc:	eba6 0807 	sub.w	r8, r6, r7
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	f1b8 0f00 	cmp.w	r8, #0
 8003bc6:	ddea      	ble.n	8003b9e <__sflush_r+0xae>
 8003bc8:	4643      	mov	r3, r8
 8003bca:	463a      	mov	r2, r7
 8003bcc:	6a21      	ldr	r1, [r4, #32]
 8003bce:	4628      	mov	r0, r5
 8003bd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003bd2:	47b0      	blx	r6
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	dc08      	bgt.n	8003bea <__sflush_r+0xfa>
 8003bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bea:	4407      	add	r7, r0
 8003bec:	eba8 0800 	sub.w	r8, r8, r0
 8003bf0:	e7e7      	b.n	8003bc2 <__sflush_r+0xd2>
 8003bf2:	bf00      	nop
 8003bf4:	dfbffffe 	.word	0xdfbffffe

08003bf8 <_fflush_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	690b      	ldr	r3, [r1, #16]
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	b913      	cbnz	r3, 8003c08 <_fflush_r+0x10>
 8003c02:	2500      	movs	r5, #0
 8003c04:	4628      	mov	r0, r5
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	b118      	cbz	r0, 8003c12 <_fflush_r+0x1a>
 8003c0a:	6a03      	ldr	r3, [r0, #32]
 8003c0c:	b90b      	cbnz	r3, 8003c12 <_fflush_r+0x1a>
 8003c0e:	f7fe fa07 	bl	8002020 <__sinit>
 8003c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f3      	beq.n	8003c02 <_fflush_r+0xa>
 8003c1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c1c:	07d0      	lsls	r0, r2, #31
 8003c1e:	d404      	bmi.n	8003c2a <_fflush_r+0x32>
 8003c20:	0599      	lsls	r1, r3, #22
 8003c22:	d402      	bmi.n	8003c2a <_fflush_r+0x32>
 8003c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c26:	f7fe fb20 	bl	800226a <__retarget_lock_acquire_recursive>
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	f7ff ff5f 	bl	8003af0 <__sflush_r>
 8003c32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c34:	4605      	mov	r5, r0
 8003c36:	07da      	lsls	r2, r3, #31
 8003c38:	d4e4      	bmi.n	8003c04 <_fflush_r+0xc>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	059b      	lsls	r3, r3, #22
 8003c3e:	d4e1      	bmi.n	8003c04 <_fflush_r+0xc>
 8003c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c42:	f7fe fb13 	bl	800226c <__retarget_lock_release_recursive>
 8003c46:	e7dd      	b.n	8003c04 <_fflush_r+0xc>

08003c48 <memmove>:
 8003c48:	4288      	cmp	r0, r1
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	eb01 0402 	add.w	r4, r1, r2
 8003c50:	d902      	bls.n	8003c58 <memmove+0x10>
 8003c52:	4284      	cmp	r4, r0
 8003c54:	4623      	mov	r3, r4
 8003c56:	d807      	bhi.n	8003c68 <memmove+0x20>
 8003c58:	1e43      	subs	r3, r0, #1
 8003c5a:	42a1      	cmp	r1, r4
 8003c5c:	d008      	beq.n	8003c70 <memmove+0x28>
 8003c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c66:	e7f8      	b.n	8003c5a <memmove+0x12>
 8003c68:	4402      	add	r2, r0
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	428a      	cmp	r2, r1
 8003c6e:	d100      	bne.n	8003c72 <memmove+0x2a>
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c7a:	e7f7      	b.n	8003c6c <memmove+0x24>

08003c7c <_sbrk_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	2300      	movs	r3, #0
 8003c80:	4d05      	ldr	r5, [pc, #20]	@ (8003c98 <_sbrk_r+0x1c>)
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fd fa76 	bl	8001178 <_sbrk>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_sbrk_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_sbrk_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20000464 	.word	0x20000464

08003c9c <memcpy>:
 8003c9c:	440a      	add	r2, r1
 8003c9e:	1e43      	subs	r3, r0, #1
 8003ca0:	4291      	cmp	r1, r2
 8003ca2:	d100      	bne.n	8003ca6 <memcpy+0xa>
 8003ca4:	4770      	bx	lr
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cac:	4291      	cmp	r1, r2
 8003cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cb2:	d1f9      	bne.n	8003ca8 <memcpy+0xc>
 8003cb4:	bd10      	pop	{r4, pc}
	...

08003cb8 <__assert_func>:
 8003cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cba:	4614      	mov	r4, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <__assert_func+0x2c>)
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68d8      	ldr	r0, [r3, #12]
 8003cc6:	b954      	cbnz	r4, 8003cde <__assert_func+0x26>
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <__assert_func+0x30>)
 8003cca:	461c      	mov	r4, r3
 8003ccc:	9100      	str	r1, [sp, #0]
 8003cce:	4907      	ldr	r1, [pc, #28]	@ (8003cec <__assert_func+0x34>)
 8003cd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	f000 f86f 	bl	8003db8 <fiprintf>
 8003cda:	f000 f87f 	bl	8003ddc <abort>
 8003cde:	4b04      	ldr	r3, [pc, #16]	@ (8003cf0 <__assert_func+0x38>)
 8003ce0:	e7f4      	b.n	8003ccc <__assert_func+0x14>
 8003ce2:	bf00      	nop
 8003ce4:	20000010 	.word	0x20000010
 8003ce8:	080045c6 	.word	0x080045c6
 8003cec:	08004598 	.word	0x08004598
 8003cf0:	0800458b 	.word	0x0800458b

08003cf4 <_calloc_r>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	fba1 5402 	umull	r5, r4, r1, r2
 8003cfa:	b93c      	cbnz	r4, 8003d0c <_calloc_r+0x18>
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7ff f98b 	bl	8003018 <_malloc_r>
 8003d02:	4606      	mov	r6, r0
 8003d04:	b928      	cbnz	r0, 8003d12 <_calloc_r+0x1e>
 8003d06:	2600      	movs	r6, #0
 8003d08:	4630      	mov	r0, r6
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	6002      	str	r2, [r0, #0]
 8003d10:	e7f9      	b.n	8003d06 <_calloc_r+0x12>
 8003d12:	462a      	mov	r2, r5
 8003d14:	4621      	mov	r1, r4
 8003d16:	f7fe fa1c 	bl	8002152 <memset>
 8003d1a:	e7f5      	b.n	8003d08 <_calloc_r+0x14>

08003d1c <__ascii_mbtowc>:
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	b901      	cbnz	r1, 8003d22 <__ascii_mbtowc+0x6>
 8003d20:	a901      	add	r1, sp, #4
 8003d22:	b142      	cbz	r2, 8003d36 <__ascii_mbtowc+0x1a>
 8003d24:	b14b      	cbz	r3, 8003d3a <__ascii_mbtowc+0x1e>
 8003d26:	7813      	ldrb	r3, [r2, #0]
 8003d28:	600b      	str	r3, [r1, #0]
 8003d2a:	7812      	ldrb	r2, [r2, #0]
 8003d2c:	1e10      	subs	r0, r2, #0
 8003d2e:	bf18      	it	ne
 8003d30:	2001      	movne	r0, #1
 8003d32:	b002      	add	sp, #8
 8003d34:	4770      	bx	lr
 8003d36:	4610      	mov	r0, r2
 8003d38:	e7fb      	b.n	8003d32 <__ascii_mbtowc+0x16>
 8003d3a:	f06f 0001 	mvn.w	r0, #1
 8003d3e:	e7f8      	b.n	8003d32 <__ascii_mbtowc+0x16>

08003d40 <_realloc_r>:
 8003d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d44:	4680      	mov	r8, r0
 8003d46:	4615      	mov	r5, r2
 8003d48:	460c      	mov	r4, r1
 8003d4a:	b921      	cbnz	r1, 8003d56 <_realloc_r+0x16>
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d52:	f7ff b961 	b.w	8003018 <_malloc_r>
 8003d56:	b92a      	cbnz	r2, 8003d64 <_realloc_r+0x24>
 8003d58:	f7ff f8ea 	bl	8002f30 <_free_r>
 8003d5c:	2400      	movs	r4, #0
 8003d5e:	4620      	mov	r0, r4
 8003d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d64:	f000 f841 	bl	8003dea <_malloc_usable_size_r>
 8003d68:	4285      	cmp	r5, r0
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	d802      	bhi.n	8003d74 <_realloc_r+0x34>
 8003d6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d72:	d8f4      	bhi.n	8003d5e <_realloc_r+0x1e>
 8003d74:	4629      	mov	r1, r5
 8003d76:	4640      	mov	r0, r8
 8003d78:	f7ff f94e 	bl	8003018 <_malloc_r>
 8003d7c:	4607      	mov	r7, r0
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d0ec      	beq.n	8003d5c <_realloc_r+0x1c>
 8003d82:	42b5      	cmp	r5, r6
 8003d84:	462a      	mov	r2, r5
 8003d86:	4621      	mov	r1, r4
 8003d88:	bf28      	it	cs
 8003d8a:	4632      	movcs	r2, r6
 8003d8c:	f7ff ff86 	bl	8003c9c <memcpy>
 8003d90:	4621      	mov	r1, r4
 8003d92:	4640      	mov	r0, r8
 8003d94:	463c      	mov	r4, r7
 8003d96:	f7ff f8cb 	bl	8002f30 <_free_r>
 8003d9a:	e7e0      	b.n	8003d5e <_realloc_r+0x1e>

08003d9c <__ascii_wctomb>:
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4608      	mov	r0, r1
 8003da0:	b141      	cbz	r1, 8003db4 <__ascii_wctomb+0x18>
 8003da2:	2aff      	cmp	r2, #255	@ 0xff
 8003da4:	d904      	bls.n	8003db0 <__ascii_wctomb+0x14>
 8003da6:	228a      	movs	r2, #138	@ 0x8a
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	4770      	bx	lr
 8003db0:	2001      	movs	r0, #1
 8003db2:	700a      	strb	r2, [r1, #0]
 8003db4:	4770      	bx	lr
	...

08003db8 <fiprintf>:
 8003db8:	b40e      	push	{r1, r2, r3}
 8003dba:	b503      	push	{r0, r1, lr}
 8003dbc:	ab03      	add	r3, sp, #12
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	4805      	ldr	r0, [pc, #20]	@ (8003dd8 <fiprintf+0x20>)
 8003dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc6:	6800      	ldr	r0, [r0, #0]
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	f000 f83f 	bl	8003e4c <_vfiprintf_r>
 8003dce:	b002      	add	sp, #8
 8003dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dd4:	b003      	add	sp, #12
 8003dd6:	4770      	bx	lr
 8003dd8:	20000010 	.word	0x20000010

08003ddc <abort>:
 8003ddc:	2006      	movs	r0, #6
 8003dde:	b508      	push	{r3, lr}
 8003de0:	f000 fa08 	bl	80041f4 <raise>
 8003de4:	2001      	movs	r0, #1
 8003de6:	f7fd f94f 	bl	8001088 <_exit>

08003dea <_malloc_usable_size_r>:
 8003dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dee:	1f18      	subs	r0, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfbc      	itt	lt
 8003df4:	580b      	ldrlt	r3, [r1, r0]
 8003df6:	18c0      	addlt	r0, r0, r3
 8003df8:	4770      	bx	lr

08003dfa <__sfputc_r>:
 8003dfa:	6893      	ldr	r3, [r2, #8]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	6093      	str	r3, [r2, #8]
 8003e02:	b410      	push	{r4}
 8003e04:	da08      	bge.n	8003e18 <__sfputc_r+0x1e>
 8003e06:	6994      	ldr	r4, [r2, #24]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	db01      	blt.n	8003e10 <__sfputc_r+0x16>
 8003e0c:	290a      	cmp	r1, #10
 8003e0e:	d103      	bne.n	8003e18 <__sfputc_r+0x1e>
 8003e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e14:	f000 b932 	b.w	800407c <__swbuf_r>
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	1c58      	adds	r0, r3, #1
 8003e1c:	6010      	str	r0, [r2, #0]
 8003e1e:	4608      	mov	r0, r1
 8003e20:	7019      	strb	r1, [r3, #0]
 8003e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <__sfputs_r>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	460f      	mov	r7, r1
 8003e2e:	4614      	mov	r4, r2
 8003e30:	18d5      	adds	r5, r2, r3
 8003e32:	42ac      	cmp	r4, r5
 8003e34:	d101      	bne.n	8003e3a <__sfputs_r+0x12>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e007      	b.n	8003e4a <__sfputs_r+0x22>
 8003e3a:	463a      	mov	r2, r7
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	4630      	mov	r0, r6
 8003e42:	f7ff ffda 	bl	8003dfa <__sfputc_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	d1f3      	bne.n	8003e32 <__sfputs_r+0xa>
 8003e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e4c <_vfiprintf_r>:
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	460d      	mov	r5, r1
 8003e52:	b09d      	sub	sp, #116	@ 0x74
 8003e54:	4614      	mov	r4, r2
 8003e56:	4698      	mov	r8, r3
 8003e58:	4606      	mov	r6, r0
 8003e5a:	b118      	cbz	r0, 8003e64 <_vfiprintf_r+0x18>
 8003e5c:	6a03      	ldr	r3, [r0, #32]
 8003e5e:	b90b      	cbnz	r3, 8003e64 <_vfiprintf_r+0x18>
 8003e60:	f7fe f8de 	bl	8002020 <__sinit>
 8003e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e66:	07d9      	lsls	r1, r3, #31
 8003e68:	d405      	bmi.n	8003e76 <_vfiprintf_r+0x2a>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	059a      	lsls	r2, r3, #22
 8003e6e:	d402      	bmi.n	8003e76 <_vfiprintf_r+0x2a>
 8003e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e72:	f7fe f9fa 	bl	800226a <__retarget_lock_acquire_recursive>
 8003e76:	89ab      	ldrh	r3, [r5, #12]
 8003e78:	071b      	lsls	r3, r3, #28
 8003e7a:	d501      	bpl.n	8003e80 <_vfiprintf_r+0x34>
 8003e7c:	692b      	ldr	r3, [r5, #16]
 8003e7e:	b99b      	cbnz	r3, 8003ea8 <_vfiprintf_r+0x5c>
 8003e80:	4629      	mov	r1, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	f000 f938 	bl	80040f8 <__swsetup_r>
 8003e88:	b170      	cbz	r0, 8003ea8 <_vfiprintf_r+0x5c>
 8003e8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e8c:	07dc      	lsls	r4, r3, #31
 8003e8e:	d504      	bpl.n	8003e9a <_vfiprintf_r+0x4e>
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	b01d      	add	sp, #116	@ 0x74
 8003e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	0598      	lsls	r0, r3, #22
 8003e9e:	d4f7      	bmi.n	8003e90 <_vfiprintf_r+0x44>
 8003ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ea2:	f7fe f9e3 	bl	800226c <__retarget_lock_release_recursive>
 8003ea6:	e7f3      	b.n	8003e90 <_vfiprintf_r+0x44>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eae:	f04f 0901 	mov.w	r9, #1
 8003eb2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8004068 <_vfiprintf_r+0x21c>
 8003eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eb8:	2320      	movs	r3, #32
 8003eba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ebe:	2330      	movs	r3, #48	@ 0x30
 8003ec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	469a      	mov	sl, r3
 8003ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ecc:	b10a      	cbz	r2, 8003ed2 <_vfiprintf_r+0x86>
 8003ece:	2a25      	cmp	r2, #37	@ 0x25
 8003ed0:	d1f9      	bne.n	8003ec6 <_vfiprintf_r+0x7a>
 8003ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed6:	d00b      	beq.n	8003ef0 <_vfiprintf_r+0xa4>
 8003ed8:	465b      	mov	r3, fp
 8003eda:	4622      	mov	r2, r4
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff ffa2 	bl	8003e28 <__sfputs_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f000 80a7 	beq.w	8004038 <_vfiprintf_r+0x1ec>
 8003eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eec:	445a      	add	r2, fp
 8003eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 809f 	beq.w	8004038 <_vfiprintf_r+0x1ec>
 8003efa:	2300      	movs	r3, #0
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	f10a 0a01 	add.w	sl, sl, #1
 8003f04:	9304      	str	r3, [sp, #16]
 8003f06:	9307      	str	r3, [sp, #28]
 8003f08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f12:	4654      	mov	r4, sl
 8003f14:	2205      	movs	r2, #5
 8003f16:	4854      	ldr	r0, [pc, #336]	@ (8004068 <_vfiprintf_r+0x21c>)
 8003f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1c:	f7fe f9a7 	bl	800226e <memchr>
 8003f20:	9a04      	ldr	r2, [sp, #16]
 8003f22:	b9d8      	cbnz	r0, 8003f5c <_vfiprintf_r+0x110>
 8003f24:	06d1      	lsls	r1, r2, #27
 8003f26:	bf44      	itt	mi
 8003f28:	2320      	movmi	r3, #32
 8003f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f2e:	0713      	lsls	r3, r2, #28
 8003f30:	bf44      	itt	mi
 8003f32:	232b      	movmi	r3, #43	@ 0x2b
 8003f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f38:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f3e:	d015      	beq.n	8003f6c <_vfiprintf_r+0x120>
 8003f40:	9a07      	ldr	r2, [sp, #28]
 8003f42:	4654      	mov	r4, sl
 8003f44:	2000      	movs	r0, #0
 8003f46:	f04f 0c0a 	mov.w	ip, #10
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f50:	3b30      	subs	r3, #48	@ 0x30
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	d94b      	bls.n	8003fee <_vfiprintf_r+0x1a2>
 8003f56:	b1b0      	cbz	r0, 8003f86 <_vfiprintf_r+0x13a>
 8003f58:	9207      	str	r2, [sp, #28]
 8003f5a:	e014      	b.n	8003f86 <_vfiprintf_r+0x13a>
 8003f5c:	eba0 0308 	sub.w	r3, r0, r8
 8003f60:	46a2      	mov	sl, r4
 8003f62:	fa09 f303 	lsl.w	r3, r9, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	e7d2      	b.n	8003f12 <_vfiprintf_r+0xc6>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	1d19      	adds	r1, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	9103      	str	r1, [sp, #12]
 8003f76:	bfbb      	ittet	lt
 8003f78:	425b      	neglt	r3, r3
 8003f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f7e:	9307      	strge	r3, [sp, #28]
 8003f80:	9307      	strlt	r3, [sp, #28]
 8003f82:	bfb8      	it	lt
 8003f84:	9204      	strlt	r2, [sp, #16]
 8003f86:	7823      	ldrb	r3, [r4, #0]
 8003f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f8a:	d10a      	bne.n	8003fa2 <_vfiprintf_r+0x156>
 8003f8c:	7863      	ldrb	r3, [r4, #1]
 8003f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f90:	d132      	bne.n	8003ff8 <_vfiprintf_r+0x1ac>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	3402      	adds	r4, #2
 8003f96:	1d1a      	adds	r2, r3, #4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f9e:	9203      	str	r2, [sp, #12]
 8003fa0:	9305      	str	r3, [sp, #20]
 8003fa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004078 <_vfiprintf_r+0x22c>
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	7821      	ldrb	r1, [r4, #0]
 8003faa:	4650      	mov	r0, sl
 8003fac:	f7fe f95f 	bl	800226e <memchr>
 8003fb0:	b138      	cbz	r0, 8003fc2 <_vfiprintf_r+0x176>
 8003fb2:	eba0 000a 	sub.w	r0, r0, sl
 8003fb6:	2240      	movs	r2, #64	@ 0x40
 8003fb8:	9b04      	ldr	r3, [sp, #16]
 8003fba:	3401      	adds	r4, #1
 8003fbc:	4082      	lsls	r2, r0
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	9304      	str	r3, [sp, #16]
 8003fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc6:	2206      	movs	r2, #6
 8003fc8:	4828      	ldr	r0, [pc, #160]	@ (800406c <_vfiprintf_r+0x220>)
 8003fca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fce:	f7fe f94e 	bl	800226e <memchr>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d03f      	beq.n	8004056 <_vfiprintf_r+0x20a>
 8003fd6:	4b26      	ldr	r3, [pc, #152]	@ (8004070 <_vfiprintf_r+0x224>)
 8003fd8:	bb1b      	cbnz	r3, 8004022 <_vfiprintf_r+0x1d6>
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	3307      	adds	r3, #7
 8003fde:	f023 0307 	bic.w	r3, r3, #7
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fe8:	443b      	add	r3, r7
 8003fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fec:	e76a      	b.n	8003ec4 <_vfiprintf_r+0x78>
 8003fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	e7a8      	b.n	8003f4a <_vfiprintf_r+0xfe>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	f04f 0c0a 	mov.w	ip, #10
 8004000:	4619      	mov	r1, r3
 8004002:	9305      	str	r3, [sp, #20]
 8004004:	4620      	mov	r0, r4
 8004006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800400a:	3a30      	subs	r2, #48	@ 0x30
 800400c:	2a09      	cmp	r2, #9
 800400e:	d903      	bls.n	8004018 <_vfiprintf_r+0x1cc>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0c6      	beq.n	8003fa2 <_vfiprintf_r+0x156>
 8004014:	9105      	str	r1, [sp, #20]
 8004016:	e7c4      	b.n	8003fa2 <_vfiprintf_r+0x156>
 8004018:	fb0c 2101 	mla	r1, ip, r1, r2
 800401c:	4604      	mov	r4, r0
 800401e:	2301      	movs	r3, #1
 8004020:	e7f0      	b.n	8004004 <_vfiprintf_r+0x1b8>
 8004022:	ab03      	add	r3, sp, #12
 8004024:	462a      	mov	r2, r5
 8004026:	a904      	add	r1, sp, #16
 8004028:	4630      	mov	r0, r6
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <_vfiprintf_r+0x228>)
 800402e:	f7fd fbaf 	bl	8001790 <_printf_float>
 8004032:	4607      	mov	r7, r0
 8004034:	1c78      	adds	r0, r7, #1
 8004036:	d1d6      	bne.n	8003fe6 <_vfiprintf_r+0x19a>
 8004038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800403a:	07d9      	lsls	r1, r3, #31
 800403c:	d405      	bmi.n	800404a <_vfiprintf_r+0x1fe>
 800403e:	89ab      	ldrh	r3, [r5, #12]
 8004040:	059a      	lsls	r2, r3, #22
 8004042:	d402      	bmi.n	800404a <_vfiprintf_r+0x1fe>
 8004044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004046:	f7fe f911 	bl	800226c <__retarget_lock_release_recursive>
 800404a:	89ab      	ldrh	r3, [r5, #12]
 800404c:	065b      	lsls	r3, r3, #25
 800404e:	f53f af1f 	bmi.w	8003e90 <_vfiprintf_r+0x44>
 8004052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004054:	e71e      	b.n	8003e94 <_vfiprintf_r+0x48>
 8004056:	ab03      	add	r3, sp, #12
 8004058:	462a      	mov	r2, r5
 800405a:	a904      	add	r1, sp, #16
 800405c:	4630      	mov	r0, r6
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4b04      	ldr	r3, [pc, #16]	@ (8004074 <_vfiprintf_r+0x228>)
 8004062:	f7fd fe31 	bl	8001cc8 <_printf_i>
 8004066:	e7e4      	b.n	8004032 <_vfiprintf_r+0x1e6>
 8004068:	08004570 	.word	0x08004570
 800406c:	0800457a 	.word	0x0800457a
 8004070:	08001791 	.word	0x08001791
 8004074:	08003e29 	.word	0x08003e29
 8004078:	08004576 	.word	0x08004576

0800407c <__swbuf_r>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	460e      	mov	r6, r1
 8004080:	4614      	mov	r4, r2
 8004082:	4605      	mov	r5, r0
 8004084:	b118      	cbz	r0, 800408e <__swbuf_r+0x12>
 8004086:	6a03      	ldr	r3, [r0, #32]
 8004088:	b90b      	cbnz	r3, 800408e <__swbuf_r+0x12>
 800408a:	f7fd ffc9 	bl	8002020 <__sinit>
 800408e:	69a3      	ldr	r3, [r4, #24]
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	071a      	lsls	r2, r3, #28
 8004096:	d501      	bpl.n	800409c <__swbuf_r+0x20>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	b943      	cbnz	r3, 80040ae <__swbuf_r+0x32>
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f82a 	bl	80040f8 <__swsetup_r>
 80040a4:	b118      	cbz	r0, 80040ae <__swbuf_r+0x32>
 80040a6:	f04f 37ff 	mov.w	r7, #4294967295
 80040aa:	4638      	mov	r0, r7
 80040ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	b2f6      	uxtb	r6, r6
 80040b2:	6922      	ldr	r2, [r4, #16]
 80040b4:	4637      	mov	r7, r6
 80040b6:	1a98      	subs	r0, r3, r2
 80040b8:	6963      	ldr	r3, [r4, #20]
 80040ba:	4283      	cmp	r3, r0
 80040bc:	dc05      	bgt.n	80040ca <__swbuf_r+0x4e>
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f7ff fd99 	bl	8003bf8 <_fflush_r>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d1ed      	bne.n	80040a6 <__swbuf_r+0x2a>
 80040ca:	68a3      	ldr	r3, [r4, #8]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	60a3      	str	r3, [r4, #8]
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	6022      	str	r2, [r4, #0]
 80040d6:	701e      	strb	r6, [r3, #0]
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	6962      	ldr	r2, [r4, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d004      	beq.n	80040ea <__swbuf_r+0x6e>
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	07db      	lsls	r3, r3, #31
 80040e4:	d5e1      	bpl.n	80040aa <__swbuf_r+0x2e>
 80040e6:	2e0a      	cmp	r6, #10
 80040e8:	d1df      	bne.n	80040aa <__swbuf_r+0x2e>
 80040ea:	4621      	mov	r1, r4
 80040ec:	4628      	mov	r0, r5
 80040ee:	f7ff fd83 	bl	8003bf8 <_fflush_r>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d0d9      	beq.n	80040aa <__swbuf_r+0x2e>
 80040f6:	e7d6      	b.n	80040a6 <__swbuf_r+0x2a>

080040f8 <__swsetup_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <__swsetup_r+0xa8>)
 80040fc:	4605      	mov	r5, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	b118      	cbz	r0, 800410c <__swsetup_r+0x14>
 8004104:	6a03      	ldr	r3, [r0, #32]
 8004106:	b90b      	cbnz	r3, 800410c <__swsetup_r+0x14>
 8004108:	f7fd ff8a 	bl	8002020 <__sinit>
 800410c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004110:	0719      	lsls	r1, r3, #28
 8004112:	d422      	bmi.n	800415a <__swsetup_r+0x62>
 8004114:	06da      	lsls	r2, r3, #27
 8004116:	d407      	bmi.n	8004128 <__swsetup_r+0x30>
 8004118:	2209      	movs	r2, #9
 800411a:	602a      	str	r2, [r5, #0]
 800411c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	e033      	b.n	8004190 <__swsetup_r+0x98>
 8004128:	0758      	lsls	r0, r3, #29
 800412a:	d512      	bpl.n	8004152 <__swsetup_r+0x5a>
 800412c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800412e:	b141      	cbz	r1, 8004142 <__swsetup_r+0x4a>
 8004130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004134:	4299      	cmp	r1, r3
 8004136:	d002      	beq.n	800413e <__swsetup_r+0x46>
 8004138:	4628      	mov	r0, r5
 800413a:	f7fe fef9 	bl	8002f30 <_free_r>
 800413e:	2300      	movs	r3, #0
 8004140:	6363      	str	r3, [r4, #52]	@ 0x34
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	2300      	movs	r3, #0
 800414c:	6063      	str	r3, [r4, #4]
 800414e:	6923      	ldr	r3, [r4, #16]
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	f043 0308 	orr.w	r3, r3, #8
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	b94b      	cbnz	r3, 8004172 <__swsetup_r+0x7a>
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004168:	d003      	beq.n	8004172 <__swsetup_r+0x7a>
 800416a:	4621      	mov	r1, r4
 800416c:	4628      	mov	r0, r5
 800416e:	f000 f882 	bl	8004276 <__smakebuf_r>
 8004172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004176:	f013 0201 	ands.w	r2, r3, #1
 800417a:	d00a      	beq.n	8004192 <__swsetup_r+0x9a>
 800417c:	2200      	movs	r2, #0
 800417e:	60a2      	str	r2, [r4, #8]
 8004180:	6962      	ldr	r2, [r4, #20]
 8004182:	4252      	negs	r2, r2
 8004184:	61a2      	str	r2, [r4, #24]
 8004186:	6922      	ldr	r2, [r4, #16]
 8004188:	b942      	cbnz	r2, 800419c <__swsetup_r+0xa4>
 800418a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800418e:	d1c5      	bne.n	800411c <__swsetup_r+0x24>
 8004190:	bd38      	pop	{r3, r4, r5, pc}
 8004192:	0799      	lsls	r1, r3, #30
 8004194:	bf58      	it	pl
 8004196:	6962      	ldrpl	r2, [r4, #20]
 8004198:	60a2      	str	r2, [r4, #8]
 800419a:	e7f4      	b.n	8004186 <__swsetup_r+0x8e>
 800419c:	2000      	movs	r0, #0
 800419e:	e7f7      	b.n	8004190 <__swsetup_r+0x98>
 80041a0:	20000010 	.word	0x20000010

080041a4 <_raise_r>:
 80041a4:	291f      	cmp	r1, #31
 80041a6:	b538      	push	{r3, r4, r5, lr}
 80041a8:	4605      	mov	r5, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	d904      	bls.n	80041b8 <_raise_r+0x14>
 80041ae:	2316      	movs	r3, #22
 80041b0:	6003      	str	r3, [r0, #0]
 80041b2:	f04f 30ff 	mov.w	r0, #4294967295
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80041ba:	b112      	cbz	r2, 80041c2 <_raise_r+0x1e>
 80041bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80041c0:	b94b      	cbnz	r3, 80041d6 <_raise_r+0x32>
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f830 	bl	8004228 <_getpid_r>
 80041c8:	4622      	mov	r2, r4
 80041ca:	4601      	mov	r1, r0
 80041cc:	4628      	mov	r0, r5
 80041ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d2:	f000 b817 	b.w	8004204 <_kill_r>
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d00a      	beq.n	80041f0 <_raise_r+0x4c>
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	d103      	bne.n	80041e6 <_raise_r+0x42>
 80041de:	2316      	movs	r3, #22
 80041e0:	6003      	str	r3, [r0, #0]
 80041e2:	2001      	movs	r0, #1
 80041e4:	e7e7      	b.n	80041b6 <_raise_r+0x12>
 80041e6:	2100      	movs	r1, #0
 80041e8:	4620      	mov	r0, r4
 80041ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80041ee:	4798      	blx	r3
 80041f0:	2000      	movs	r0, #0
 80041f2:	e7e0      	b.n	80041b6 <_raise_r+0x12>

080041f4 <raise>:
 80041f4:	4b02      	ldr	r3, [pc, #8]	@ (8004200 <raise+0xc>)
 80041f6:	4601      	mov	r1, r0
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	f7ff bfd3 	b.w	80041a4 <_raise_r>
 80041fe:	bf00      	nop
 8004200:	20000010 	.word	0x20000010

08004204 <_kill_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	2300      	movs	r3, #0
 8004208:	4d06      	ldr	r5, [pc, #24]	@ (8004224 <_kill_r+0x20>)
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	602b      	str	r3, [r5, #0]
 8004212:	f7fc ff29 	bl	8001068 <_kill>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d102      	bne.n	8004220 <_kill_r+0x1c>
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	b103      	cbz	r3, 8004220 <_kill_r+0x1c>
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	bd38      	pop	{r3, r4, r5, pc}
 8004222:	bf00      	nop
 8004224:	20000464 	.word	0x20000464

08004228 <_getpid_r>:
 8004228:	f7fc bf16 	b.w	8001058 <_getpid>

0800422c <__swhatbuf_r>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	460c      	mov	r4, r1
 8004230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004234:	b096      	sub	sp, #88	@ 0x58
 8004236:	4615      	mov	r5, r2
 8004238:	2900      	cmp	r1, #0
 800423a:	461e      	mov	r6, r3
 800423c:	da0c      	bge.n	8004258 <__swhatbuf_r+0x2c>
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	2100      	movs	r1, #0
 8004242:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004246:	bf14      	ite	ne
 8004248:	2340      	movne	r3, #64	@ 0x40
 800424a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800424e:	2000      	movs	r0, #0
 8004250:	6031      	str	r1, [r6, #0]
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	b016      	add	sp, #88	@ 0x58
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	466a      	mov	r2, sp
 800425a:	f000 f849 	bl	80042f0 <_fstat_r>
 800425e:	2800      	cmp	r0, #0
 8004260:	dbed      	blt.n	800423e <__swhatbuf_r+0x12>
 8004262:	9901      	ldr	r1, [sp, #4]
 8004264:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004268:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800426c:	4259      	negs	r1, r3
 800426e:	4159      	adcs	r1, r3
 8004270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004274:	e7eb      	b.n	800424e <__swhatbuf_r+0x22>

08004276 <__smakebuf_r>:
 8004276:	898b      	ldrh	r3, [r1, #12]
 8004278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800427a:	079d      	lsls	r5, r3, #30
 800427c:	4606      	mov	r6, r0
 800427e:	460c      	mov	r4, r1
 8004280:	d507      	bpl.n	8004292 <__smakebuf_r+0x1c>
 8004282:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	6123      	str	r3, [r4, #16]
 800428a:	2301      	movs	r3, #1
 800428c:	6163      	str	r3, [r4, #20]
 800428e:	b003      	add	sp, #12
 8004290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004292:	ab01      	add	r3, sp, #4
 8004294:	466a      	mov	r2, sp
 8004296:	f7ff ffc9 	bl	800422c <__swhatbuf_r>
 800429a:	9f00      	ldr	r7, [sp, #0]
 800429c:	4605      	mov	r5, r0
 800429e:	4630      	mov	r0, r6
 80042a0:	4639      	mov	r1, r7
 80042a2:	f7fe feb9 	bl	8003018 <_malloc_r>
 80042a6:	b948      	cbnz	r0, 80042bc <__smakebuf_r+0x46>
 80042a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ac:	059a      	lsls	r2, r3, #22
 80042ae:	d4ee      	bmi.n	800428e <__smakebuf_r+0x18>
 80042b0:	f023 0303 	bic.w	r3, r3, #3
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	81a3      	strh	r3, [r4, #12]
 80042ba:	e7e2      	b.n	8004282 <__smakebuf_r+0xc>
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	6020      	str	r0, [r4, #0]
 80042c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c4:	81a3      	strh	r3, [r4, #12]
 80042c6:	9b01      	ldr	r3, [sp, #4]
 80042c8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042cc:	b15b      	cbz	r3, 80042e6 <__smakebuf_r+0x70>
 80042ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042d2:	4630      	mov	r0, r6
 80042d4:	f000 f81e 	bl	8004314 <_isatty_r>
 80042d8:	b128      	cbz	r0, 80042e6 <__smakebuf_r+0x70>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f023 0303 	bic.w	r3, r3, #3
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	431d      	orrs	r5, r3
 80042ea:	81a5      	strh	r5, [r4, #12]
 80042ec:	e7cf      	b.n	800428e <__smakebuf_r+0x18>
	...

080042f0 <_fstat_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d06      	ldr	r5, [pc, #24]	@ (8004310 <_fstat_r+0x20>)
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	f7fc ff13 	bl	8001128 <_fstat>
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	d102      	bne.n	800430c <_fstat_r+0x1c>
 8004306:	682b      	ldr	r3, [r5, #0]
 8004308:	b103      	cbz	r3, 800430c <_fstat_r+0x1c>
 800430a:	6023      	str	r3, [r4, #0]
 800430c:	bd38      	pop	{r3, r4, r5, pc}
 800430e:	bf00      	nop
 8004310:	20000464 	.word	0x20000464

08004314 <_isatty_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	2300      	movs	r3, #0
 8004318:	4d05      	ldr	r5, [pc, #20]	@ (8004330 <_isatty_r+0x1c>)
 800431a:	4604      	mov	r4, r0
 800431c:	4608      	mov	r0, r1
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	f7fc ff12 	bl	8001148 <_isatty>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d102      	bne.n	800432e <_isatty_r+0x1a>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	b103      	cbz	r3, 800432e <_isatty_r+0x1a>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	20000464 	.word	0x20000464

08004334 <_init>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr

08004340 <_fini>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr
