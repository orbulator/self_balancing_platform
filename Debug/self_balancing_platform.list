
self_balancing_platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e4  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080044e0  080044e0  000054e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  000061cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004868  08004868  000061cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08004870  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001cc  08004a3c  000061cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08004a3c  00006474  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f7f  00000000  00000000  00006202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001226  00000000  00000000  00010181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  000113a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000542  00000000  00000000  00011a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd50  00000000  00000000  00011fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008af4  00000000  00000000  00031d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff60b  00000000  00000000  0003a7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139e09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce8  00000000  00000000  00139e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013cb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001cc 	.word	0x200001cc
 8000214:	00000000 	.word	0x00000000
 8000218:	080044c4 	.word	0x080044c4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001d0 	.word	0x200001d0
 8000234:	080044c4 	.word	0x080044c4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	@ (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db12      	blt.n	8000be4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	490a      	ldr	r1, [pc, #40]	@ (8000bf0 <__NVIC_DisableIRQ+0x44>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	3320      	adds	r3, #32
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd8:	f3bf 8f4f 	dsb	sy
}
 8000bdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bde:	f3bf 8f6f 	isb	sy
}
 8000be2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0152      	lsls	r2, r2, #5
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0152      	lsls	r2, r2, #5
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <main>:
void txLPUART1();
float getVoltage(uint16_t);
uint16_t getADCVal();
void init_tim1();

int main() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	init_clks();
 8000c4c:	f000 f810 	bl	8000c70 <init_clks>
	init_LPUART1();
 8000c50:	f000 f84e 	bl	8000cf0 <init_LPUART1>
	init_adc1();
 8000c54:	f000 f896 	bl	8000d84 <init_adc1>
	init_dac1();
 8000c58:	f000 f9b2 	bl	8000fc0 <init_dac1>
	init_comp1();
 8000c5c:	f000 f9e2 	bl	8001024 <init_comp1>
	init_redLED();
 8000c60:	f000 fa10 	bl	8001084 <init_redLED>
	init_tim1(1000);						// initializes timer1 with a period of 250 ms
 8000c64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c68:	f000 fa54 	bl	8001114 <init_tim1>
	 * This main function samples the first ADC value
	 * 		then will use a slightly higher value as the
	 * 		comparator trigger level, if it goes above
	 * 		the red led will light
	 */
	while (1)	{
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <main+0x24>

08000c70 <init_clks>:
	}
	return 1;
}

// enable clocks
void init_clks() {
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= 1 << 28; 	// enable power interface clock by setting PWREN bits
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <init_clks+0x7c>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c78:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <init_clks+0x7c>)
 8000c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR2 |= 0x1;		// enable LPUART1EN clock
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <init_clks+0x7c>)
 8000c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c84:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <init_clks+0x7c>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	65d3      	str	r3, [r2, #92]	@ 0x5c
	RCC->CCIPR1 |= 0x800;		// 01 for HSI16 clock to be used for LPUART1
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <init_clks+0x7c>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c92:	4a16      	ldr	r2, [pc, #88]	@ (8000cec <init_clks+0x7c>)
 8000c94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR1 &= ~(0x400);
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <init_clks+0x7c>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <init_clks+0x7c>)
 8000ca4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CFGR |= 0x1;			// use HSI16 as SYSCLK
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <init_clks+0x7c>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <init_clks+0x7c>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6093      	str	r3, [r2, #8]
	RCC->CR |= 0x161;			// MSI clock enable; MSI = 4 MHz; HSI16 clock enable
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <init_clks+0x7c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <init_clks+0x7c>)
 8000cbe:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]
	RCC->AHB2ENR |= 1<<6;		// enable clock to GPIOG
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <init_clks+0x7c>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <init_clks+0x7c>)
 8000cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	bitset(RCC->APB1ENR2, 0);	// enable clock to LPUART1
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <init_clks+0x7c>)
 8000cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <init_clks+0x7c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <init_LPUART1>:

/* PG7 is connected to LPUART tx PG8 is connect to LPUART rx */
void init_LPUART1() {
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	PWR->CR2 |= 0x200;			// power up port g / enable VDDIO2 Independent I/O supply
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <init_LPUART1+0x88>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d78 <init_LPUART1+0x88>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfe:	6053      	str	r3, [r2, #4]
	/* tx config */
	GPIOG->MODER &= ~(0x3<<14); // clear the two bits
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d06:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d0a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= 0x2 << 14;	// set mode to alternate function
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1a      	ldr	r2, [pc, #104]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d16:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[0] &= ~(0xf<<28);// clear 4 bits for PG7
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000d22:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= 0x8<<28;	// set PG7 to alternate function 8
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d2e:	6213      	str	r3, [r2, #32]
	/* rx config */
	GPIOG->MODER &= ~(0x3<<16); // clear the two bits
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a11      	ldr	r2, [pc, #68]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d36:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000d3a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= 0x2 << 16;	// set mode to alternate function
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d46:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[1] &= ~(0xf);	// clear 4 bits for PG8
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d4e:	f023 030f 	bic.w	r3, r3, #15
 8000d52:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= 0x8;		// set PG8 to alternate function 8
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d58:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <init_LPUART1+0x8c>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6253      	str	r3, [r2, #36]	@ 0x24

	// BRR = 256*16000000/57600 = 71111
	LPUART1->BRR = 4444; 				// set baud rate to 921600
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <init_LPUART1+0x90>)
 8000d62:	f241 125c 	movw	r2, #4444	@ 0x115c
 8000d66:	60da      	str	r2, [r3, #12]
	LPUART1->CR1 = 0xD; 				// 0x1101 --> TX, RX are enabled and UART is Enabled.
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <init_LPUART1+0x90>)
 8000d6a:	220d      	movs	r2, #13
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40007000 	.word	0x40007000
 8000d7c:	42021800 	.word	0x42021800
 8000d80:	40008000 	.word	0x40008000

08000d84 <init_adc1>:

void init_adc1() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	bitset(RCC->AHB2ENR, 13); 	// enable ADC clock
 8000d8a:	4b54      	ldr	r3, [pc, #336]	@ (8000edc <init_adc1+0x158>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a53      	ldr	r2, [pc, #332]	@ (8000edc <init_adc1+0x158>)
 8000d90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->CCIPR1 |= 0x3 << 28; 	// route SYSCLK HCLK to ADC
 8000d96:	4b51      	ldr	r3, [pc, #324]	@ (8000edc <init_adc1+0x158>)
 8000d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8000edc <init_adc1+0x158>)
 8000d9e:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000da2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	bitclear(ADC1->CR, 29);		// exit deep power mode by setting DEEPPWD = 0 in control register
 8000da6:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee0 <init_adc1+0x15c>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee0 <init_adc1+0x15c>)
 8000dac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000db0:	6093      	str	r3, [r2, #8]
	bitset(ADC1->CR, 28); 		// turn on the ADC voltage reguator
 8000db2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee0 <init_adc1+0x15c>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ee0 <init_adc1+0x15c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6093      	str	r3, [r2, #8]

	bitset(ADC1->CFGR, 10);		// external trigger enable and polarity for rising edge
 8000dbe:	4b48      	ldr	r3, [pc, #288]	@ (8000ee0 <init_adc1+0x15c>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4a47      	ldr	r2, [pc, #284]	@ (8000ee0 <init_adc1+0x15c>)
 8000dc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc8:	60d3      	str	r3, [r2, #12]
	bitclear(ADC1->CFGR, 11);
 8000dca:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <init_adc1+0x15c>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	4a44      	ldr	r2, [pc, #272]	@ (8000ee0 <init_adc1+0x15c>)
 8000dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000dd4:	60d3      	str	r3, [r2, #12]

	bitclear(ADC1->CFGR, 6);	// external trigger EXT0 connected to TIM1_CH1
 8000dd6:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <init_adc1+0x15c>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	4a41      	ldr	r2, [pc, #260]	@ (8000ee0 <init_adc1+0x15c>)
 8000ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000de0:	60d3      	str	r3, [r2, #12]
	bitclear(ADC1->CFGR, 7);
 8000de2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee0 <init_adc1+0x15c>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee0 <init_adc1+0x15c>)
 8000de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dec:	60d3      	str	r3, [r2, #12]
	bitclear(ADC1->CFGR, 8);
 8000dee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee0 <init_adc1+0x15c>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee0 <init_adc1+0x15c>)
 8000df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000df8:	60d3      	str	r3, [r2, #12]
	bitclear(ADC1->CFGR, 9);
 8000dfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ee0 <init_adc1+0x15c>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	4a38      	ldr	r2, [pc, #224]	@ (8000ee0 <init_adc1+0x15c>)
 8000e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000e04:	60d3      	str	r3, [r2, #12]

	bitset(ADC1->CFGR, 13); // enable continous mode
 8000e06:	4b36      	ldr	r3, [pc, #216]	@ (8000ee0 <init_adc1+0x15c>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4a35      	ldr	r2, [pc, #212]	@ (8000ee0 <init_adc1+0x15c>)
 8000e0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e10:	60d3      	str	r3, [r2, #12]

	bitset(ADC1->CFGR, 12); 	// OVRMOD: Disable overrun mode (ADC keeps going even if user does not read)
 8000e12:	4b33      	ldr	r3, [pc, #204]	@ (8000ee0 <init_adc1+0x15c>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	4a32      	ldr	r2, [pc, #200]	@ (8000ee0 <init_adc1+0x15c>)
 8000e18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e1c:	60d3      	str	r3, [r2, #12]
	bitset(ADC1->ISR, 0); 		// ADC Ready
 8000e1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <init_adc1+0x15c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee0 <init_adc1+0x15c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6013      	str	r3, [r2, #0]

	delay_ms(10);				// wait for voltage regulator to stabilize
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	e002      	b.n	8000e36 <init_adc1+0xb2>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8000e3c:	dbf8      	blt.n	8000e30 <init_adc1+0xac>

	/* Sequencer Setup */
	bitset(ADC1->SQR1, 1); 		// set sequence length to 4
 8000e3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <init_adc1+0x15c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <init_adc1+0x15c>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 0);
 8000e4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <init_adc1+0x15c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a24      	ldr	r2, [pc, #144]	@ (8000ee0 <init_adc1+0x15c>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 6);  	// set 1st conversion to ch1 0b0001
 8000e56:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <init_adc1+0x15c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ee0 <init_adc1+0x15c>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 13);		// set 2nd conversion to ch2 0b0010
 8000e62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <init_adc1+0x15c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <init_adc1+0x15c>)
 8000e68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 18);		// set 3rd conversion to ch3 0b0011
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <init_adc1+0x15c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <init_adc1+0x15c>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 19);
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <init_adc1+0x15c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <init_adc1+0x15c>)
 8000e80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 26);		// set 4th conversion to ch4 0b0100
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <init_adc1+0x15c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <init_adc1+0x15c>)
 8000e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30

	/* enable interrupt so that timer will trigger the ADC */
	NVIC_SetPriority(ADC1_2_IRQn, 0);
 8000e92:	2100      	movs	r1, #0
 8000e94:	2025      	movs	r0, #37	@ 0x25
 8000e96:	f7ff fead 	bl	8000bf4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e9a:	2025      	movs	r0, #37	@ 0x25
 8000e9c:	f7ff fe68 	bl	8000b70 <__NVIC_EnableIRQ>
	ADC1->IER |= 1 << 2; 		// enable EOC Interrupt
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <init_adc1+0x15c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee0 <init_adc1+0x15c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6053      	str	r3, [r2, #4]
	ADC1->CR |= 1 ;				// enable ADC
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <init_adc1+0x15c>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <init_adc1+0x15c>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6093      	str	r3, [r2, #8]

	while (bitcheck(ADC1->ISR, 0) == 0);	// wait until ADC is ready
 8000eb8:	bf00      	nop
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <init_adc1+0x15c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <init_adc1+0x136>
	bitset(ADC1->CR, 2);		// start conversion (wait for trigger)
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <init_adc1+0x15c>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <init_adc1+0x15c>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6093      	str	r3, [r2, #8]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	42028000 	.word	0x42028000

08000ee4 <ADC1_2_IRQHandler>:
 * Function to be called when TIM1 goes high
 * 		formats the output voltage to be sent
 * 		to serial plotter through LPUART1 w/
 * 		921600 baud rate
 */
void ADC1_2_IRQHandler() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0a4      	sub	sp, #144	@ 0x90
 8000ee8:	af02      	add	r7, sp, #8
	NVIC_DisableIRQ(ADC1_2_IRQn);
 8000eea:	2025      	movs	r0, #37	@ 0x25
 8000eec:	f7ff fe5e 	bl	8000bac <__NVIC_DisableIRQ>
	//NVIC_DisableIRQ(TIM2_IRQn);
	uint16_t adc_val1 = ((ADC1->DR) & 0xfff);
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <ADC1_2_IRQHandler+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efa:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

	uint16_t adc_val2 = ((ADC1->DR) & 0xfff);
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <ADC1_2_IRQHandler+0xcc>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f08:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

	uint16_t adc_val3 = ((ADC1->DR) & 0xfff);
 8000f0c:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <ADC1_2_IRQHandler+0xcc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f16:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	bitclear(ADC1->ISR, 3);		// clear EOS flag
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <ADC1_2_IRQHandler+0xcc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a24      	ldr	r2, [pc, #144]	@ (8000fb0 <ADC1_2_IRQHandler+0xcc>)
 8000f20:	f023 0308 	bic.w	r3, r3, #8
 8000f24:	6013      	str	r3, [r2, #0]
//	uint16_t adc_val4 = ((ADC1->DR) & 0xfff);
	delay_ms(1000);
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000f2c:	e004      	b.n	8000f38 <ADC1_2_IRQHandler+0x54>
 8000f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f32:	3301      	adds	r3, #1
 8000f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <ADC1_2_IRQHandler+0xd0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	ddf5      	ble.n	8000f2e <ADC1_2_IRQHandler+0x4a>

	char str[80] = "$";
 8000f42:	2324      	movs	r3, #36	@ 0x24
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f4a:	224c      	movs	r2, #76	@ 0x4c
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f9c7 	bl	80022e2 <memset>
	char src[40];
	sprintf(src, "%d %d %d", adc_val1, adc_val2, adc_val3);
 8000f54:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8000f58:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 8000f5c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000f60:	1d38      	adds	r0, r7, #4
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	460b      	mov	r3, r1
 8000f66:	4914      	ldr	r1, [pc, #80]	@ (8000fb8 <ADC1_2_IRQHandler+0xd4>)
 8000f68:	f001 f958 	bl	800221c <siprintf>
	strcat(str, src);
 8000f6c:	1d3a      	adds	r2, r7, #4
 8000f6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 f9bc 	bl	80022f2 <strcat>
	strcat(str, ";");
 8000f7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f95a 	bl	8000238 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8c:	4413      	add	r3, r2
 8000f8e:	490b      	ldr	r1, [pc, #44]	@ (8000fbc <ADC1_2_IRQHandler+0xd8>)
 8000f90:	461a      	mov	r2, r3
 8000f92:	460b      	mov	r3, r1
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	8013      	strh	r3, [r2, #0]
	txLPUART1(str);
 8000f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f88f 	bl	80010c0 <txLPUART1>
	NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fa2:	2025      	movs	r0, #37	@ 0x25
 8000fa4:	f7ff fde4 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000fa8:	bf00      	nop
 8000faa:	3788      	adds	r7, #136	@ 0x88
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	42028000 	.word	0x42028000
 8000fb4:	001869ff 	.word	0x001869ff
 8000fb8:	080044e0 	.word	0x080044e0
 8000fbc:	080044ec 	.word	0x080044ec

08000fc0 <init_dac1>:

/**
 * Initialize DAC1 Clock, Configure PA4 (hooked up to DAC1_OUT1)
 */
void init_dac1() {
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	bitset(RCC->APB1ENR1, 29); 	// initizize dac1 interface clock
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <init_dac1+0x58>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <init_dac1+0x58>)
 8000fca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000fce:	6593      	str	r3, [r2, #88]	@ 0x58
	bitset(RCC->AHB2ENR, 0); 	// init GPIOA clock
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <init_dac1+0x58>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <init_dac1+0x58>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
	bitset(GPIOA->MODER, 6);	// set PA4 to analog mode
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <init_dac1+0x5c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <init_dac1+0x5c>)
 8000fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe6:	6013      	str	r3, [r2, #0]
	bitset(GPIOA->MODER, 7);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <init_dac1+0x5c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <init_dac1+0x5c>)
 8000fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff2:	6013      	str	r3, [r2, #0]
	bitset(DAC1->MCR, 0);		// route dac1 to chip peripherals and external pin
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <init_dac1+0x60>)
 8000ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff8:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <init_dac1+0x60>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	63d3      	str	r3, [r2, #60]	@ 0x3c
	bitset(DAC1->CR, 0); 		// enable DAC1
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <init_dac1+0x60>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a06      	ldr	r2, [pc, #24]	@ (8001020 <init_dac1+0x60>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	42020000 	.word	0x42020000
 8001020:	40007400 	.word	0x40007400

08001024 <init_comp1>:

/**
 * Initializes comparator
 */
void init_comp1() {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
	bitset(RCC->APB2ENR, 0); 	// Turn on clock to comp1
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <init_comp1+0x58>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102c:	4a13      	ldr	r2, [pc, #76]	@ (800107c <init_comp1+0x58>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6613      	str	r3, [r2, #96]	@ 0x60
	bitset(COMP1->CSR, 7);		// comp 1 inp = PB2 (1)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <init_comp1+0x5c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <init_comp1+0x5c>)
 800103a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800103e:	6013      	str	r3, [r2, #0]
	bitclear(COMP1->CSR, 4);	// comp 1 inm = dac 1 (100)
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <init_comp1+0x5c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <init_comp1+0x5c>)
 8001046:	f023 0310 	bic.w	r3, r3, #16
 800104a:	6013      	str	r3, [r2, #0]
	bitclear(COMP1->CSR, 5);
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <init_comp1+0x5c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <init_comp1+0x5c>)
 8001052:	f023 0320 	bic.w	r3, r3, #32
 8001056:	6013      	str	r3, [r2, #0]
	bitset(COMP1->CSR, 6);
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <init_comp1+0x5c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <init_comp1+0x5c>)
 800105e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001062:	6013      	str	r3, [r2, #0]
	bitset(COMP1->CSR, 0);		// enable comp1
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <init_comp1+0x5c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <init_comp1+0x5c>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	40010200 	.word	0x40010200

08001084 <init_redLED>:

/**
 * Initializes the red LED
 */
void init_redLED() {
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	// red LED GPIOA Port 9
	bitset(RCC->AHB2ENR, 0); // enable clock
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <init_redLED+0x34>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <init_redLED+0x34>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	64d3      	str	r3, [r2, #76]	@ 0x4c
	bitset(GPIOA->MODER, 18); // set to output
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <init_redLED+0x38>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <init_redLED+0x38>)
 800109a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800109e:	6013      	str	r3, [r2, #0]
	bitclear(GPIOA->MODER, 19);
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <init_redLED+0x38>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <init_redLED+0x38>)
 80010a6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	42020000 	.word	0x42020000

080010c0 <txLPUART1>:
	}
	return in_buf;
}

/* Transmits data through LPUART Transmit data register while there is data */
void txLPUART1(char out_buf[]) {
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
	while(out_buf[i] != '\0') {
 80010cc:	e013      	b.n	80010f6 <txLPUART1+0x36>
		LPUART1->TDR = out_buf[i++];
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	73fa      	strb	r2, [r7, #15]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <txLPUART1+0x50>)
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28
		for(int j =0; j<10000; j++);
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	e002      	b.n	80010ec <txLPUART1+0x2c>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010f2:	4293      	cmp	r3, r2
 80010f4:	ddf7      	ble.n	80010e6 <txLPUART1+0x26>
	while(out_buf[i] != '\0') {
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1e5      	bne.n	80010ce <txLPUART1+0xe>
	}
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40008000 	.word	0x40008000

08001114 <init_tim1>:

/* Initializes Timer 1 with given period and sets up the interrupt in NVIC to control ADC sample speed */
void init_tim1(int period) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	bitset(RCC->APB2ENR, 11);	// enable Timer 1 clock
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <init_tim1+0x60>)
 800111e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <init_tim1+0x60>)
 8001122:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001126:	6613      	str	r3, [r2, #96]	@ 0x60
	TIM1->PSC = 16000 - 1; 	// Divided 16MHz source clk by 16000, for 1ms
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <init_tim1+0x64>)
 800112a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800112e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = period - 1; // Count 1ms PERIOD times
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	1e5a      	subs	r2, r3, #1
 8001134:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <init_tim1+0x64>)
 8001136:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCMR1 = 0x30;		// set output to toggle on match
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <init_tim1+0x64>)
 800113a:	2230      	movs	r2, #48	@ 0x30
 800113c:	619a      	str	r2, [r3, #24]
	TIM1->CCR1 = 1;			// output will toggle when CNT==CCR
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <init_tim1+0x64>)
 8001140:	2201      	movs	r2, #1
 8001142:	635a      	str	r2, [r3, #52]	@ 0x34
	bitset(TIM1->BDTR, 15);	// main output enable
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <init_tim1+0x64>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <init_tim1+0x64>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114e:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM1->CCER |= 1;		// enable CH1 compare mode
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <init_tim1+0x64>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <init_tim1+0x64>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6213      	str	r3, [r2, #32]
	TIM1->CNT = 0; 			// Clear counter
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <init_tim1+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 = 1; 			// Enable TIM1
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <init_tim1+0x64>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	40012c00 	.word	0x40012c00

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MemManage_Handler+0x4>

08001194 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f93d 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f904 	bl	80013ec <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_kill>:

int _kill(int pid, int sig)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001202:	f001 f8cf 	bl	80023a4 <__errno>
 8001206:	4603      	mov	r3, r0
 8001208:	2216      	movs	r2, #22
 800120a:	601a      	str	r2, [r3, #0]
  return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_exit>:

void _exit (int status)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe7 	bl	80011f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800122a:	bf00      	nop
 800122c:	e7fd      	b.n	800122a <_exit+0x12>

0800122e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e00a      	b.n	8001256 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001240:	f3af 8000 	nop.w
 8001244:	4601      	mov	r1, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	60ba      	str	r2, [r7, #8]
 800124c:	b2ca      	uxtb	r2, r1
 800124e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbf0      	blt.n	8001240 <_read+0x12>
  }

  return len;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e009      	b.n	800128e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60ba      	str	r2, [r7, #8]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f8c8 	bl	8001418 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	dbf1      	blt.n	800127a <_write+0x12>
  }
  return len;
 8001296:	687b      	ldr	r3, [r7, #4]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_close>:

int _close(int file)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012c8:	605a      	str	r2, [r3, #4]
  return 0;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_isatty>:

int _isatty(int file)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f001 f834 	bl	80023a4 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20030000 	.word	0x20030000
 8001368:	00000400 	.word	0x00000400
 800136c:	200001e8 	.word	0x200001e8
 8001370:	20000478 	.word	0x20000478

08001374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff ffea 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013ac:	480a      	ldr	r0, [pc, #40]	@ (80013d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
	ldr	r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <LoopForever+0x16>)
	cmp	r2, r3
 80013c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013c6:	f000 fff3 	bl	80023b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ca:	f7ff fc3d 	bl	8000c48 <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013d0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80013d4:	08004870 	.word	0x08004870
	ldr	r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013dc:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 80013e0:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 80013e4:	20000474 	.word	0x20000474

080013e8 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <COMP_IRQHandler>
	...

080013ec <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <BSP_PB_IRQHandler+0x28>)
 8001402:	4413      	add	r3, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f843 	bl	8001490 <HAL_EXTI_IRQHandler>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000314 	.word	0x20000314

08001418 <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <__io_putchar+0x30>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	2394      	movs	r3, #148	@ 0x94
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a07      	ldr	r2, [pc, #28]	@ (800144c <__io_putchar+0x34>)
 800142e:	1898      	adds	r0, r3, r2
 8001430:	1d39      	adds	r1, r7, #4
 8001432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001436:	2201      	movs	r2, #1
 8001438:	f000 f872 	bl	8001520 <HAL_UART_Transmit>
  return ch;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000320 	.word	0x20000320
 800144c:	200001ec 	.word	0x200001ec

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000
 8001474:	20000324 	.word	0x20000324

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000324 	.word	0x20000324

08001490 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0c1b      	lsrs	r3, r3, #16
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2201      	movs	r2, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <HAL_EXTI_IRQHandler+0x88>)
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_EXTI_IRQHandler+0x8c>)
 80014e8:	4413      	add	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4798      	blx	r3
    }
  }
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	4002f40c 	.word	0x4002f40c
 800151c:	4002f410 	.word	0x4002f410

08001520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001536:	2b20      	cmp	r3, #32
 8001538:	d17b      	bne.n	8001632 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_UART_Transmit+0x26>
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e074      	b.n	8001634 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2221      	movs	r2, #33	@ 0x21
 8001556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800155a:	f7ff ff8d 	bl	8001478 <HAL_GetTick>
 800155e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	88fa      	ldrh	r2, [r7, #6]
 8001564:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001578:	d108      	bne.n	800158c <HAL_UART_Transmit+0x6c>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d104      	bne.n	800158c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	e003      	b.n	8001594 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001594:	e030      	b.n	80015f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2200      	movs	r2, #0
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f84b 	bl	800163c <UART_WaitOnFlagUntilTimeout>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e03d      	b.n	8001634 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10b      	bne.n	80015d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	3302      	adds	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	e007      	b.n	80015e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3b01      	subs	r3, #1
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1c8      	bne.n	8001596 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2200      	movs	r2, #0
 800160c:	2140      	movs	r1, #64	@ 0x40
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 f814 	bl	800163c <UART_WaitOnFlagUntilTimeout>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2220      	movs	r2, #32
 800161e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e006      	b.n	8001634 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2220      	movs	r2, #32
 800162a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8001632:	2302      	movs	r3, #2
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800164c:	e04f      	b.n	80016ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d04b      	beq.n	80016ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001656:	f7ff ff0f 	bl	8001478 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	429a      	cmp	r2, r3
 8001664:	d302      	bcc.n	800166c <UART_WaitOnFlagUntilTimeout+0x30>
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e04e      	b.n	800170e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d037      	beq.n	80016ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b80      	cmp	r3, #128	@ 0x80
 8001682:	d034      	beq.n	80016ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b40      	cmp	r3, #64	@ 0x40
 8001688:	d031      	beq.n	80016ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b08      	cmp	r3, #8
 8001696:	d110      	bne.n	80016ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2208      	movs	r2, #8
 800169e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f838 	bl	8001716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2208      	movs	r2, #8
 80016aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e029      	b.n	800170e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016c8:	d111      	bne.n	80016ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f81e 	bl	8001716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2220      	movs	r2, #32
 80016de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e00f      	b.n	800170e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4013      	ands	r3, r2
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	429a      	cmp	r2, r3
 800170a:	d0a0      	beq.n	800164e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001716:	b480      	push	{r7}
 8001718:	b095      	sub	sp, #84	@ 0x54
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001726:	e853 3f00 	ldrex	r3, [r3]
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800172c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800172e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173c:	643b      	str	r3, [r7, #64]	@ 0x40
 800173e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001740:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001742:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001744:	e841 2300 	strex	r3, r2, [r1]
 8001748:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800174a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e6      	bne.n	800171e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3308      	adds	r3, #8
 8001756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	e853 3f00 	ldrex	r3, [r3]
 800175e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3308      	adds	r3, #8
 8001772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800177a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800177c:	e841 2300 	strex	r3, r2, [r1]
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e3      	bne.n	8001750 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800178c:	2b01      	cmp	r3, #1
 800178e:	d118      	bne.n	80017c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	e853 3f00 	ldrex	r3, [r3]
 800179c:	60bb      	str	r3, [r7, #8]
   return(result);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f023 0310 	bic.w	r3, r3, #16
 80017a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b2:	6979      	ldr	r1, [r7, #20]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	e841 2300 	strex	r3, r2, [r1]
 80017ba:	613b      	str	r3, [r7, #16]
   return(result);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e6      	bne.n	8001790 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80017d6:	bf00      	nop
 80017d8:	3754      	adds	r7, #84	@ 0x54
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <__cvt>:
 80017e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017e6:	ec57 6b10 	vmov	r6, r7, d0
 80017ea:	2f00      	cmp	r7, #0
 80017ec:	460c      	mov	r4, r1
 80017ee:	4619      	mov	r1, r3
 80017f0:	463b      	mov	r3, r7
 80017f2:	bfb4      	ite	lt
 80017f4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80017f8:	2300      	movge	r3, #0
 80017fa:	4691      	mov	r9, r2
 80017fc:	bfbf      	itttt	lt
 80017fe:	4632      	movlt	r2, r6
 8001800:	461f      	movlt	r7, r3
 8001802:	232d      	movlt	r3, #45	@ 0x2d
 8001804:	4616      	movlt	r6, r2
 8001806:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800180a:	700b      	strb	r3, [r1, #0]
 800180c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800180e:	f023 0820 	bic.w	r8, r3, #32
 8001812:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001816:	d005      	beq.n	8001824 <__cvt+0x42>
 8001818:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800181c:	d100      	bne.n	8001820 <__cvt+0x3e>
 800181e:	3401      	adds	r4, #1
 8001820:	2102      	movs	r1, #2
 8001822:	e000      	b.n	8001826 <__cvt+0x44>
 8001824:	2103      	movs	r1, #3
 8001826:	ab03      	add	r3, sp, #12
 8001828:	4622      	mov	r2, r4
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	ab02      	add	r3, sp, #8
 800182e:	ec47 6b10 	vmov	d0, r6, r7
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4653      	mov	r3, sl
 8001836:	f000 fe7f 	bl	8002538 <_dtoa_r>
 800183a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800183e:	4605      	mov	r5, r0
 8001840:	d119      	bne.n	8001876 <__cvt+0x94>
 8001842:	f019 0f01 	tst.w	r9, #1
 8001846:	d00e      	beq.n	8001866 <__cvt+0x84>
 8001848:	eb00 0904 	add.w	r9, r0, r4
 800184c:	2200      	movs	r2, #0
 800184e:	2300      	movs	r3, #0
 8001850:	4630      	mov	r0, r6
 8001852:	4639      	mov	r1, r7
 8001854:	f7ff f91c 	bl	8000a90 <__aeabi_dcmpeq>
 8001858:	b108      	cbz	r0, 800185e <__cvt+0x7c>
 800185a:	f8cd 900c 	str.w	r9, [sp, #12]
 800185e:	2230      	movs	r2, #48	@ 0x30
 8001860:	9b03      	ldr	r3, [sp, #12]
 8001862:	454b      	cmp	r3, r9
 8001864:	d31e      	bcc.n	80018a4 <__cvt+0xc2>
 8001866:	9b03      	ldr	r3, [sp, #12]
 8001868:	4628      	mov	r0, r5
 800186a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800186c:	1b5b      	subs	r3, r3, r5
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	b004      	add	sp, #16
 8001872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001876:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800187a:	eb00 0904 	add.w	r9, r0, r4
 800187e:	d1e5      	bne.n	800184c <__cvt+0x6a>
 8001880:	7803      	ldrb	r3, [r0, #0]
 8001882:	2b30      	cmp	r3, #48	@ 0x30
 8001884:	d10a      	bne.n	800189c <__cvt+0xba>
 8001886:	2200      	movs	r2, #0
 8001888:	2300      	movs	r3, #0
 800188a:	4630      	mov	r0, r6
 800188c:	4639      	mov	r1, r7
 800188e:	f7ff f8ff 	bl	8000a90 <__aeabi_dcmpeq>
 8001892:	b918      	cbnz	r0, 800189c <__cvt+0xba>
 8001894:	f1c4 0401 	rsb	r4, r4, #1
 8001898:	f8ca 4000 	str.w	r4, [sl]
 800189c:	f8da 3000 	ldr.w	r3, [sl]
 80018a0:	4499      	add	r9, r3
 80018a2:	e7d3      	b.n	800184c <__cvt+0x6a>
 80018a4:	1c59      	adds	r1, r3, #1
 80018a6:	9103      	str	r1, [sp, #12]
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e7d9      	b.n	8001860 <__cvt+0x7e>

080018ac <__exponent>:
 80018ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018ae:	2900      	cmp	r1, #0
 80018b0:	7002      	strb	r2, [r0, #0]
 80018b2:	bfba      	itte	lt
 80018b4:	4249      	neglt	r1, r1
 80018b6:	232d      	movlt	r3, #45	@ 0x2d
 80018b8:	232b      	movge	r3, #43	@ 0x2b
 80018ba:	2909      	cmp	r1, #9
 80018bc:	7043      	strb	r3, [r0, #1]
 80018be:	dd28      	ble.n	8001912 <__exponent+0x66>
 80018c0:	f10d 0307 	add.w	r3, sp, #7
 80018c4:	270a      	movs	r7, #10
 80018c6:	461d      	mov	r5, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80018d0:	fb07 1416 	mls	r4, r7, r6, r1
 80018d4:	3430      	adds	r4, #48	@ 0x30
 80018d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80018da:	460c      	mov	r4, r1
 80018dc:	4631      	mov	r1, r6
 80018de:	2c63      	cmp	r4, #99	@ 0x63
 80018e0:	dcf2      	bgt.n	80018c8 <__exponent+0x1c>
 80018e2:	3130      	adds	r1, #48	@ 0x30
 80018e4:	1e94      	subs	r4, r2, #2
 80018e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80018ea:	1c41      	adds	r1, r0, #1
 80018ec:	4623      	mov	r3, r4
 80018ee:	42ab      	cmp	r3, r5
 80018f0:	d30a      	bcc.n	8001908 <__exponent+0x5c>
 80018f2:	f10d 0309 	add.w	r3, sp, #9
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	42ac      	cmp	r4, r5
 80018fa:	bf88      	it	hi
 80018fc:	2300      	movhi	r3, #0
 80018fe:	3302      	adds	r3, #2
 8001900:	4403      	add	r3, r0
 8001902:	1a18      	subs	r0, r3, r0
 8001904:	b003      	add	sp, #12
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	f813 6b01 	ldrb.w	r6, [r3], #1
 800190c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001910:	e7ed      	b.n	80018ee <__exponent+0x42>
 8001912:	2330      	movs	r3, #48	@ 0x30
 8001914:	3130      	adds	r1, #48	@ 0x30
 8001916:	7083      	strb	r3, [r0, #2]
 8001918:	1d03      	adds	r3, r0, #4
 800191a:	70c1      	strb	r1, [r0, #3]
 800191c:	e7f1      	b.n	8001902 <__exponent+0x56>
	...

08001920 <_printf_float>:
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	b08d      	sub	sp, #52	@ 0x34
 8001926:	460c      	mov	r4, r1
 8001928:	4616      	mov	r6, r2
 800192a:	461f      	mov	r7, r3
 800192c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001930:	4605      	mov	r5, r0
 8001932:	f000 fced 	bl	8002310 <_localeconv_r>
 8001936:	6803      	ldr	r3, [r0, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	9304      	str	r3, [sp, #16]
 800193c:	f7fe fc7c 	bl	8000238 <strlen>
 8001940:	2300      	movs	r3, #0
 8001942:	9005      	str	r0, [sp, #20]
 8001944:	930a      	str	r3, [sp, #40]	@ 0x28
 8001946:	f8d8 3000 	ldr.w	r3, [r8]
 800194a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800194e:	3307      	adds	r3, #7
 8001950:	f8d4 b000 	ldr.w	fp, [r4]
 8001954:	f023 0307 	bic.w	r3, r3, #7
 8001958:	f103 0208 	add.w	r2, r3, #8
 800195c:	f8c8 2000 	str.w	r2, [r8]
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800196c:	f8cd 8018 	str.w	r8, [sp, #24]
 8001970:	9307      	str	r3, [sp, #28]
 8001972:	4b9d      	ldr	r3, [pc, #628]	@ (8001be8 <_printf_float+0x2c8>)
 8001974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001978:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800197c:	f7ff f8ba 	bl	8000af4 <__aeabi_dcmpun>
 8001980:	bb70      	cbnz	r0, 80019e0 <_printf_float+0xc0>
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	4b98      	ldr	r3, [pc, #608]	@ (8001be8 <_printf_float+0x2c8>)
 8001988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800198c:	f7ff f894 	bl	8000ab8 <__aeabi_dcmple>
 8001990:	bb30      	cbnz	r0, 80019e0 <_printf_float+0xc0>
 8001992:	2200      	movs	r2, #0
 8001994:	2300      	movs	r3, #0
 8001996:	4640      	mov	r0, r8
 8001998:	4649      	mov	r1, r9
 800199a:	f7ff f883 	bl	8000aa4 <__aeabi_dcmplt>
 800199e:	b110      	cbz	r0, 80019a6 <_printf_float+0x86>
 80019a0:	232d      	movs	r3, #45	@ 0x2d
 80019a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019a6:	4a91      	ldr	r2, [pc, #580]	@ (8001bec <_printf_float+0x2cc>)
 80019a8:	4b91      	ldr	r3, [pc, #580]	@ (8001bf0 <_printf_float+0x2d0>)
 80019aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80019ae:	bf94      	ite	ls
 80019b0:	4690      	movls	r8, r2
 80019b2:	4698      	movhi	r8, r3
 80019b4:	2303      	movs	r3, #3
 80019b6:	f04f 0900 	mov.w	r9, #0
 80019ba:	6123      	str	r3, [r4, #16]
 80019bc:	f02b 0304 	bic.w	r3, fp, #4
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	4633      	mov	r3, r6
 80019c4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80019c6:	4621      	mov	r1, r4
 80019c8:	4628      	mov	r0, r5
 80019ca:	9700      	str	r7, [sp, #0]
 80019cc:	f000 f9d2 	bl	8001d74 <_printf_common>
 80019d0:	3001      	adds	r0, #1
 80019d2:	f040 808d 	bne.w	8001af0 <_printf_float+0x1d0>
 80019d6:	f04f 30ff 	mov.w	r0, #4294967295
 80019da:	b00d      	add	sp, #52	@ 0x34
 80019dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e0:	4642      	mov	r2, r8
 80019e2:	464b      	mov	r3, r9
 80019e4:	4640      	mov	r0, r8
 80019e6:	4649      	mov	r1, r9
 80019e8:	f7ff f884 	bl	8000af4 <__aeabi_dcmpun>
 80019ec:	b140      	cbz	r0, 8001a00 <_printf_float+0xe0>
 80019ee:	464b      	mov	r3, r9
 80019f0:	4a80      	ldr	r2, [pc, #512]	@ (8001bf4 <_printf_float+0x2d4>)
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bfbc      	itt	lt
 80019f6:	232d      	movlt	r3, #45	@ 0x2d
 80019f8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80019fc:	4b7e      	ldr	r3, [pc, #504]	@ (8001bf8 <_printf_float+0x2d8>)
 80019fe:	e7d4      	b.n	80019aa <_printf_float+0x8a>
 8001a00:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8001a04:	6863      	ldr	r3, [r4, #4]
 8001a06:	9206      	str	r2, [sp, #24]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	d13b      	bne.n	8001a84 <_printf_float+0x164>
 8001a0c:	2306      	movs	r3, #6
 8001a0e:	6063      	str	r3, [r4, #4]
 8001a10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8001a14:	2300      	movs	r3, #0
 8001a16:	4628      	mov	r0, r5
 8001a18:	6022      	str	r2, [r4, #0]
 8001a1a:	9303      	str	r3, [sp, #12]
 8001a1c:	ab0a      	add	r3, sp, #40	@ 0x28
 8001a1e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8001a22:	ab09      	add	r3, sp, #36	@ 0x24
 8001a24:	ec49 8b10 	vmov	d0, r8, r9
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8001a2e:	6861      	ldr	r1, [r4, #4]
 8001a30:	f7ff fed7 	bl	80017e2 <__cvt>
 8001a34:	9b06      	ldr	r3, [sp, #24]
 8001a36:	4680      	mov	r8, r0
 8001a38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001a3a:	2b47      	cmp	r3, #71	@ 0x47
 8001a3c:	d129      	bne.n	8001a92 <_printf_float+0x172>
 8001a3e:	1cc8      	adds	r0, r1, #3
 8001a40:	db02      	blt.n	8001a48 <_printf_float+0x128>
 8001a42:	6863      	ldr	r3, [r4, #4]
 8001a44:	4299      	cmp	r1, r3
 8001a46:	dd41      	ble.n	8001acc <_printf_float+0x1ac>
 8001a48:	f1aa 0a02 	sub.w	sl, sl, #2
 8001a4c:	fa5f fa8a 	uxtb.w	sl, sl
 8001a50:	3901      	subs	r1, #1
 8001a52:	4652      	mov	r2, sl
 8001a54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8001a58:	9109      	str	r1, [sp, #36]	@ 0x24
 8001a5a:	f7ff ff27 	bl	80018ac <__exponent>
 8001a5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001a60:	4681      	mov	r9, r0
 8001a62:	1813      	adds	r3, r2, r0
 8001a64:	2a01      	cmp	r2, #1
 8001a66:	6123      	str	r3, [r4, #16]
 8001a68:	dc02      	bgt.n	8001a70 <_printf_float+0x150>
 8001a6a:	6822      	ldr	r2, [r4, #0]
 8001a6c:	07d2      	lsls	r2, r2, #31
 8001a6e:	d501      	bpl.n	8001a74 <_printf_float+0x154>
 8001a70:	3301      	adds	r3, #1
 8001a72:	6123      	str	r3, [r4, #16]
 8001a74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0a2      	beq.n	80019c2 <_printf_float+0xa2>
 8001a7c:	232d      	movs	r3, #45	@ 0x2d
 8001a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a82:	e79e      	b.n	80019c2 <_printf_float+0xa2>
 8001a84:	9a06      	ldr	r2, [sp, #24]
 8001a86:	2a47      	cmp	r2, #71	@ 0x47
 8001a88:	d1c2      	bne.n	8001a10 <_printf_float+0xf0>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1c0      	bne.n	8001a10 <_printf_float+0xf0>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e7bd      	b.n	8001a0e <_printf_float+0xee>
 8001a92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001a96:	d9db      	bls.n	8001a50 <_printf_float+0x130>
 8001a98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8001a9c:	d118      	bne.n	8001ad0 <_printf_float+0x1b0>
 8001a9e:	2900      	cmp	r1, #0
 8001aa0:	6863      	ldr	r3, [r4, #4]
 8001aa2:	dd0b      	ble.n	8001abc <_printf_float+0x19c>
 8001aa4:	6121      	str	r1, [r4, #16]
 8001aa6:	b913      	cbnz	r3, 8001aae <_printf_float+0x18e>
 8001aa8:	6822      	ldr	r2, [r4, #0]
 8001aaa:	07d0      	lsls	r0, r2, #31
 8001aac:	d502      	bpl.n	8001ab4 <_printf_float+0x194>
 8001aae:	3301      	adds	r3, #1
 8001ab0:	440b      	add	r3, r1
 8001ab2:	6123      	str	r3, [r4, #16]
 8001ab4:	f04f 0900 	mov.w	r9, #0
 8001ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8001aba:	e7db      	b.n	8001a74 <_printf_float+0x154>
 8001abc:	b913      	cbnz	r3, 8001ac4 <_printf_float+0x1a4>
 8001abe:	6822      	ldr	r2, [r4, #0]
 8001ac0:	07d2      	lsls	r2, r2, #31
 8001ac2:	d501      	bpl.n	8001ac8 <_printf_float+0x1a8>
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	e7f4      	b.n	8001ab2 <_printf_float+0x192>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e7f2      	b.n	8001ab2 <_printf_float+0x192>
 8001acc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8001ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001ad2:	4299      	cmp	r1, r3
 8001ad4:	db05      	blt.n	8001ae2 <_printf_float+0x1c2>
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	6121      	str	r1, [r4, #16]
 8001ada:	07d8      	lsls	r0, r3, #31
 8001adc:	d5ea      	bpl.n	8001ab4 <_printf_float+0x194>
 8001ade:	1c4b      	adds	r3, r1, #1
 8001ae0:	e7e7      	b.n	8001ab2 <_printf_float+0x192>
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	bfd4      	ite	le
 8001ae6:	f1c1 0202 	rsble	r2, r1, #2
 8001aea:	2201      	movgt	r2, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	e7e0      	b.n	8001ab2 <_printf_float+0x192>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	055a      	lsls	r2, r3, #21
 8001af4:	d407      	bmi.n	8001b06 <_printf_float+0x1e6>
 8001af6:	6923      	ldr	r3, [r4, #16]
 8001af8:	4642      	mov	r2, r8
 8001afa:	4631      	mov	r1, r6
 8001afc:	4628      	mov	r0, r5
 8001afe:	47b8      	blx	r7
 8001b00:	3001      	adds	r0, #1
 8001b02:	d12b      	bne.n	8001b5c <_printf_float+0x23c>
 8001b04:	e767      	b.n	80019d6 <_printf_float+0xb6>
 8001b06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001b0a:	f240 80dd 	bls.w	8001cc8 <_printf_float+0x3a8>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2300      	movs	r3, #0
 8001b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001b16:	f7fe ffbb 	bl	8000a90 <__aeabi_dcmpeq>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d033      	beq.n	8001b86 <_printf_float+0x266>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4a36      	ldr	r2, [pc, #216]	@ (8001bfc <_printf_float+0x2dc>)
 8001b22:	4631      	mov	r1, r6
 8001b24:	4628      	mov	r0, r5
 8001b26:	47b8      	blx	r7
 8001b28:	3001      	adds	r0, #1
 8001b2a:	f43f af54 	beq.w	80019d6 <_printf_float+0xb6>
 8001b2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8001b32:	4543      	cmp	r3, r8
 8001b34:	db02      	blt.n	8001b3c <_printf_float+0x21c>
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	07d8      	lsls	r0, r3, #31
 8001b3a:	d50f      	bpl.n	8001b5c <_printf_float+0x23c>
 8001b3c:	4631      	mov	r1, r6
 8001b3e:	4628      	mov	r0, r5
 8001b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001b44:	47b8      	blx	r7
 8001b46:	3001      	adds	r0, #1
 8001b48:	f43f af45 	beq.w	80019d6 <_printf_float+0xb6>
 8001b4c:	f04f 0900 	mov.w	r9, #0
 8001b50:	f108 38ff 	add.w	r8, r8, #4294967295
 8001b54:	f104 0a1a 	add.w	sl, r4, #26
 8001b58:	45c8      	cmp	r8, r9
 8001b5a:	dc09      	bgt.n	8001b70 <_printf_float+0x250>
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	079b      	lsls	r3, r3, #30
 8001b60:	f100 8103 	bmi.w	8001d6a <_printf_float+0x44a>
 8001b64:	68e0      	ldr	r0, [r4, #12]
 8001b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001b68:	4298      	cmp	r0, r3
 8001b6a:	bfb8      	it	lt
 8001b6c:	4618      	movlt	r0, r3
 8001b6e:	e734      	b.n	80019da <_printf_float+0xba>
 8001b70:	2301      	movs	r3, #1
 8001b72:	4652      	mov	r2, sl
 8001b74:	4631      	mov	r1, r6
 8001b76:	4628      	mov	r0, r5
 8001b78:	47b8      	blx	r7
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	f43f af2b 	beq.w	80019d6 <_printf_float+0xb6>
 8001b80:	f109 0901 	add.w	r9, r9, #1
 8001b84:	e7e8      	b.n	8001b58 <_printf_float+0x238>
 8001b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dc39      	bgt.n	8001c00 <_printf_float+0x2e0>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bfc <_printf_float+0x2dc>)
 8001b90:	4631      	mov	r1, r6
 8001b92:	4628      	mov	r0, r5
 8001b94:	47b8      	blx	r7
 8001b96:	3001      	adds	r0, #1
 8001b98:	f43f af1d 	beq.w	80019d6 <_printf_float+0xb6>
 8001b9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8001ba0:	ea59 0303 	orrs.w	r3, r9, r3
 8001ba4:	d102      	bne.n	8001bac <_printf_float+0x28c>
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	07d9      	lsls	r1, r3, #31
 8001baa:	d5d7      	bpl.n	8001b5c <_printf_float+0x23c>
 8001bac:	4631      	mov	r1, r6
 8001bae:	4628      	mov	r0, r5
 8001bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001bb4:	47b8      	blx	r7
 8001bb6:	3001      	adds	r0, #1
 8001bb8:	f43f af0d 	beq.w	80019d6 <_printf_float+0xb6>
 8001bbc:	f04f 0a00 	mov.w	sl, #0
 8001bc0:	f104 0b1a 	add.w	fp, r4, #26
 8001bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	4553      	cmp	r3, sl
 8001bca:	dc01      	bgt.n	8001bd0 <_printf_float+0x2b0>
 8001bcc:	464b      	mov	r3, r9
 8001bce:	e793      	b.n	8001af8 <_printf_float+0x1d8>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	465a      	mov	r2, fp
 8001bd4:	4631      	mov	r1, r6
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	47b8      	blx	r7
 8001bda:	3001      	adds	r0, #1
 8001bdc:	f43f aefb 	beq.w	80019d6 <_printf_float+0xb6>
 8001be0:	f10a 0a01 	add.w	sl, sl, #1
 8001be4:	e7ee      	b.n	8001bc4 <_printf_float+0x2a4>
 8001be6:	bf00      	nop
 8001be8:	7fefffff 	.word	0x7fefffff
 8001bec:	080044ee 	.word	0x080044ee
 8001bf0:	080044f2 	.word	0x080044f2
 8001bf4:	080044f6 	.word	0x080044f6
 8001bf8:	080044fa 	.word	0x080044fa
 8001bfc:	080044fe 	.word	0x080044fe
 8001c00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001c06:	4553      	cmp	r3, sl
 8001c08:	bfa8      	it	ge
 8001c0a:	4653      	movge	r3, sl
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	4699      	mov	r9, r3
 8001c10:	dc36      	bgt.n	8001c80 <_printf_float+0x360>
 8001c12:	f04f 0b00 	mov.w	fp, #0
 8001c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001c1a:	f104 021a 	add.w	r2, r4, #26
 8001c1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c20:	9306      	str	r3, [sp, #24]
 8001c22:	eba3 0309 	sub.w	r3, r3, r9
 8001c26:	455b      	cmp	r3, fp
 8001c28:	dc31      	bgt.n	8001c8e <_printf_float+0x36e>
 8001c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c2c:	459a      	cmp	sl, r3
 8001c2e:	dc3a      	bgt.n	8001ca6 <_printf_float+0x386>
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	07da      	lsls	r2, r3, #31
 8001c34:	d437      	bmi.n	8001ca6 <_printf_float+0x386>
 8001c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c38:	ebaa 0903 	sub.w	r9, sl, r3
 8001c3c:	9b06      	ldr	r3, [sp, #24]
 8001c3e:	ebaa 0303 	sub.w	r3, sl, r3
 8001c42:	4599      	cmp	r9, r3
 8001c44:	bfa8      	it	ge
 8001c46:	4699      	movge	r9, r3
 8001c48:	f1b9 0f00 	cmp.w	r9, #0
 8001c4c:	dc33      	bgt.n	8001cb6 <_printf_float+0x396>
 8001c4e:	f04f 0800 	mov.w	r8, #0
 8001c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001c56:	f104 0b1a 	add.w	fp, r4, #26
 8001c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c5c:	ebaa 0303 	sub.w	r3, sl, r3
 8001c60:	eba3 0309 	sub.w	r3, r3, r9
 8001c64:	4543      	cmp	r3, r8
 8001c66:	f77f af79 	ble.w	8001b5c <_printf_float+0x23c>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	465a      	mov	r2, fp
 8001c6e:	4631      	mov	r1, r6
 8001c70:	4628      	mov	r0, r5
 8001c72:	47b8      	blx	r7
 8001c74:	3001      	adds	r0, #1
 8001c76:	f43f aeae 	beq.w	80019d6 <_printf_float+0xb6>
 8001c7a:	f108 0801 	add.w	r8, r8, #1
 8001c7e:	e7ec      	b.n	8001c5a <_printf_float+0x33a>
 8001c80:	4642      	mov	r2, r8
 8001c82:	4631      	mov	r1, r6
 8001c84:	4628      	mov	r0, r5
 8001c86:	47b8      	blx	r7
 8001c88:	3001      	adds	r0, #1
 8001c8a:	d1c2      	bne.n	8001c12 <_printf_float+0x2f2>
 8001c8c:	e6a3      	b.n	80019d6 <_printf_float+0xb6>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	4631      	mov	r1, r6
 8001c92:	4628      	mov	r0, r5
 8001c94:	9206      	str	r2, [sp, #24]
 8001c96:	47b8      	blx	r7
 8001c98:	3001      	adds	r0, #1
 8001c9a:	f43f ae9c 	beq.w	80019d6 <_printf_float+0xb6>
 8001c9e:	f10b 0b01 	add.w	fp, fp, #1
 8001ca2:	9a06      	ldr	r2, [sp, #24]
 8001ca4:	e7bb      	b.n	8001c1e <_printf_float+0x2fe>
 8001ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001caa:	4631      	mov	r1, r6
 8001cac:	4628      	mov	r0, r5
 8001cae:	47b8      	blx	r7
 8001cb0:	3001      	adds	r0, #1
 8001cb2:	d1c0      	bne.n	8001c36 <_printf_float+0x316>
 8001cb4:	e68f      	b.n	80019d6 <_printf_float+0xb6>
 8001cb6:	9a06      	ldr	r2, [sp, #24]
 8001cb8:	464b      	mov	r3, r9
 8001cba:	4631      	mov	r1, r6
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	4442      	add	r2, r8
 8001cc0:	47b8      	blx	r7
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	d1c3      	bne.n	8001c4e <_printf_float+0x32e>
 8001cc6:	e686      	b.n	80019d6 <_printf_float+0xb6>
 8001cc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001ccc:	f1ba 0f01 	cmp.w	sl, #1
 8001cd0:	dc01      	bgt.n	8001cd6 <_printf_float+0x3b6>
 8001cd2:	07db      	lsls	r3, r3, #31
 8001cd4:	d536      	bpl.n	8001d44 <_printf_float+0x424>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4642      	mov	r2, r8
 8001cda:	4631      	mov	r1, r6
 8001cdc:	4628      	mov	r0, r5
 8001cde:	47b8      	blx	r7
 8001ce0:	3001      	adds	r0, #1
 8001ce2:	f43f ae78 	beq.w	80019d6 <_printf_float+0xb6>
 8001ce6:	4631      	mov	r1, r6
 8001ce8:	4628      	mov	r0, r5
 8001cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001cee:	47b8      	blx	r7
 8001cf0:	3001      	adds	r0, #1
 8001cf2:	f43f ae70 	beq.w	80019d6 <_printf_float+0xb6>
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001d02:	f7fe fec5 	bl	8000a90 <__aeabi_dcmpeq>
 8001d06:	b9c0      	cbnz	r0, 8001d3a <_printf_float+0x41a>
 8001d08:	4653      	mov	r3, sl
 8001d0a:	f108 0201 	add.w	r2, r8, #1
 8001d0e:	4631      	mov	r1, r6
 8001d10:	4628      	mov	r0, r5
 8001d12:	47b8      	blx	r7
 8001d14:	3001      	adds	r0, #1
 8001d16:	d10c      	bne.n	8001d32 <_printf_float+0x412>
 8001d18:	e65d      	b.n	80019d6 <_printf_float+0xb6>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	465a      	mov	r2, fp
 8001d1e:	4631      	mov	r1, r6
 8001d20:	4628      	mov	r0, r5
 8001d22:	47b8      	blx	r7
 8001d24:	3001      	adds	r0, #1
 8001d26:	f43f ae56 	beq.w	80019d6 <_printf_float+0xb6>
 8001d2a:	f108 0801 	add.w	r8, r8, #1
 8001d2e:	45d0      	cmp	r8, sl
 8001d30:	dbf3      	blt.n	8001d1a <_printf_float+0x3fa>
 8001d32:	464b      	mov	r3, r9
 8001d34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8001d38:	e6df      	b.n	8001afa <_printf_float+0x1da>
 8001d3a:	f04f 0800 	mov.w	r8, #0
 8001d3e:	f104 0b1a 	add.w	fp, r4, #26
 8001d42:	e7f4      	b.n	8001d2e <_printf_float+0x40e>
 8001d44:	2301      	movs	r3, #1
 8001d46:	4642      	mov	r2, r8
 8001d48:	e7e1      	b.n	8001d0e <_printf_float+0x3ee>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	4631      	mov	r1, r6
 8001d50:	4628      	mov	r0, r5
 8001d52:	47b8      	blx	r7
 8001d54:	3001      	adds	r0, #1
 8001d56:	f43f ae3e 	beq.w	80019d6 <_printf_float+0xb6>
 8001d5a:	f108 0801 	add.w	r8, r8, #1
 8001d5e:	68e3      	ldr	r3, [r4, #12]
 8001d60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8001d62:	1a5b      	subs	r3, r3, r1
 8001d64:	4543      	cmp	r3, r8
 8001d66:	dcf0      	bgt.n	8001d4a <_printf_float+0x42a>
 8001d68:	e6fc      	b.n	8001b64 <_printf_float+0x244>
 8001d6a:	f04f 0800 	mov.w	r8, #0
 8001d6e:	f104 0919 	add.w	r9, r4, #25
 8001d72:	e7f4      	b.n	8001d5e <_printf_float+0x43e>

08001d74 <_printf_common>:
 8001d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d78:	4616      	mov	r6, r2
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	688a      	ldr	r2, [r1, #8]
 8001d7e:	4607      	mov	r7, r0
 8001d80:	690b      	ldr	r3, [r1, #16]
 8001d82:	460c      	mov	r4, r1
 8001d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bfb8      	it	lt
 8001d8c:	4613      	movlt	r3, r2
 8001d8e:	6033      	str	r3, [r6, #0]
 8001d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d94:	b10a      	cbz	r2, 8001d9a <_printf_common+0x26>
 8001d96:	3301      	adds	r3, #1
 8001d98:	6033      	str	r3, [r6, #0]
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	0699      	lsls	r1, r3, #26
 8001d9e:	bf42      	ittt	mi
 8001da0:	6833      	ldrmi	r3, [r6, #0]
 8001da2:	3302      	addmi	r3, #2
 8001da4:	6033      	strmi	r3, [r6, #0]
 8001da6:	6825      	ldr	r5, [r4, #0]
 8001da8:	f015 0506 	ands.w	r5, r5, #6
 8001dac:	d106      	bne.n	8001dbc <_printf_common+0x48>
 8001dae:	f104 0a19 	add.w	sl, r4, #25
 8001db2:	68e3      	ldr	r3, [r4, #12]
 8001db4:	6832      	ldr	r2, [r6, #0]
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	42ab      	cmp	r3, r5
 8001dba:	dc2b      	bgt.n	8001e14 <_printf_common+0xa0>
 8001dbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	3b00      	subs	r3, #0
 8001dc4:	bf18      	it	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	0692      	lsls	r2, r2, #26
 8001dca:	d430      	bmi.n	8001e2e <_printf_common+0xba>
 8001dcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	4638      	mov	r0, r7
 8001dd4:	47c8      	blx	r9
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	d023      	beq.n	8001e22 <_printf_common+0xae>
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	341a      	adds	r4, #26
 8001dde:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8001de2:	f003 0306 	and.w	r3, r3, #6
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf0a      	itet	eq
 8001dea:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8001dee:	2500      	movne	r5, #0
 8001df0:	6833      	ldreq	r3, [r6, #0]
 8001df2:	f04f 0600 	mov.w	r6, #0
 8001df6:	bf08      	it	eq
 8001df8:	1aed      	subeq	r5, r5, r3
 8001dfa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001dfe:	bf08      	it	eq
 8001e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e04:	4293      	cmp	r3, r2
 8001e06:	bfc4      	itt	gt
 8001e08:	1a9b      	subgt	r3, r3, r2
 8001e0a:	18ed      	addgt	r5, r5, r3
 8001e0c:	42b5      	cmp	r5, r6
 8001e0e:	d11a      	bne.n	8001e46 <_printf_common+0xd2>
 8001e10:	2000      	movs	r0, #0
 8001e12:	e008      	b.n	8001e26 <_printf_common+0xb2>
 8001e14:	2301      	movs	r3, #1
 8001e16:	4652      	mov	r2, sl
 8001e18:	4641      	mov	r1, r8
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	47c8      	blx	r9
 8001e1e:	3001      	adds	r0, #1
 8001e20:	d103      	bne.n	8001e2a <_printf_common+0xb6>
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e2a:	3501      	adds	r5, #1
 8001e2c:	e7c1      	b.n	8001db2 <_printf_common+0x3e>
 8001e2e:	18e1      	adds	r1, r4, r3
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	2030      	movs	r0, #48	@ 0x30
 8001e34:	3302      	adds	r3, #2
 8001e36:	4422      	add	r2, r4
 8001e38:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e44:	e7c2      	b.n	8001dcc <_printf_common+0x58>
 8001e46:	2301      	movs	r3, #1
 8001e48:	4622      	mov	r2, r4
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	4638      	mov	r0, r7
 8001e4e:	47c8      	blx	r9
 8001e50:	3001      	adds	r0, #1
 8001e52:	d0e6      	beq.n	8001e22 <_printf_common+0xae>
 8001e54:	3601      	adds	r6, #1
 8001e56:	e7d9      	b.n	8001e0c <_printf_common+0x98>

08001e58 <_printf_i>:
 8001e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e5c:	7e0f      	ldrb	r7, [r1, #24]
 8001e5e:	4691      	mov	r9, r2
 8001e60:	4680      	mov	r8, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	2f78      	cmp	r7, #120	@ 0x78
 8001e66:	469a      	mov	sl, r3
 8001e68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e6e:	d807      	bhi.n	8001e80 <_printf_i+0x28>
 8001e70:	2f62      	cmp	r7, #98	@ 0x62
 8001e72:	d80a      	bhi.n	8001e8a <_printf_i+0x32>
 8001e74:	2f00      	cmp	r7, #0
 8001e76:	f000 80d2 	beq.w	800201e <_printf_i+0x1c6>
 8001e7a:	2f58      	cmp	r7, #88	@ 0x58
 8001e7c:	f000 80b9 	beq.w	8001ff2 <_printf_i+0x19a>
 8001e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e88:	e03a      	b.n	8001f00 <_printf_i+0xa8>
 8001e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e8e:	2b15      	cmp	r3, #21
 8001e90:	d8f6      	bhi.n	8001e80 <_printf_i+0x28>
 8001e92:	a101      	add	r1, pc, #4	@ (adr r1, 8001e98 <_printf_i+0x40>)
 8001e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e98:	08001ef1 	.word	0x08001ef1
 8001e9c:	08001f05 	.word	0x08001f05
 8001ea0:	08001e81 	.word	0x08001e81
 8001ea4:	08001e81 	.word	0x08001e81
 8001ea8:	08001e81 	.word	0x08001e81
 8001eac:	08001e81 	.word	0x08001e81
 8001eb0:	08001f05 	.word	0x08001f05
 8001eb4:	08001e81 	.word	0x08001e81
 8001eb8:	08001e81 	.word	0x08001e81
 8001ebc:	08001e81 	.word	0x08001e81
 8001ec0:	08001e81 	.word	0x08001e81
 8001ec4:	08002005 	.word	0x08002005
 8001ec8:	08001f2f 	.word	0x08001f2f
 8001ecc:	08001fbf 	.word	0x08001fbf
 8001ed0:	08001e81 	.word	0x08001e81
 8001ed4:	08001e81 	.word	0x08001e81
 8001ed8:	08002027 	.word	0x08002027
 8001edc:	08001e81 	.word	0x08001e81
 8001ee0:	08001f2f 	.word	0x08001f2f
 8001ee4:	08001e81 	.word	0x08001e81
 8001ee8:	08001e81 	.word	0x08001e81
 8001eec:	08001fc7 	.word	0x08001fc7
 8001ef0:	6833      	ldr	r3, [r6, #0]
 8001ef2:	1d1a      	adds	r2, r3, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6032      	str	r2, [r6, #0]
 8001ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f00:	2301      	movs	r3, #1
 8001f02:	e09d      	b.n	8002040 <_printf_i+0x1e8>
 8001f04:	6833      	ldr	r3, [r6, #0]
 8001f06:	6820      	ldr	r0, [r4, #0]
 8001f08:	1d19      	adds	r1, r3, #4
 8001f0a:	6031      	str	r1, [r6, #0]
 8001f0c:	0606      	lsls	r6, r0, #24
 8001f0e:	d501      	bpl.n	8001f14 <_printf_i+0xbc>
 8001f10:	681d      	ldr	r5, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <_printf_i+0xc4>
 8001f14:	0645      	lsls	r5, r0, #25
 8001f16:	d5fb      	bpl.n	8001f10 <_printf_i+0xb8>
 8001f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	da03      	bge.n	8001f28 <_printf_i+0xd0>
 8001f20:	232d      	movs	r3, #45	@ 0x2d
 8001f22:	426d      	negs	r5, r5
 8001f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f28:	4859      	ldr	r0, [pc, #356]	@ (8002090 <_printf_i+0x238>)
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e011      	b.n	8001f52 <_printf_i+0xfa>
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	6833      	ldr	r3, [r6, #0]
 8001f32:	0608      	lsls	r0, r1, #24
 8001f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f38:	d402      	bmi.n	8001f40 <_printf_i+0xe8>
 8001f3a:	0649      	lsls	r1, r1, #25
 8001f3c:	bf48      	it	mi
 8001f3e:	b2ad      	uxthmi	r5, r5
 8001f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f42:	6033      	str	r3, [r6, #0]
 8001f44:	4852      	ldr	r0, [pc, #328]	@ (8002090 <_printf_i+0x238>)
 8001f46:	bf14      	ite	ne
 8001f48:	230a      	movne	r3, #10
 8001f4a:	2308      	moveq	r3, #8
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f52:	6866      	ldr	r6, [r4, #4]
 8001f54:	2e00      	cmp	r6, #0
 8001f56:	60a6      	str	r6, [r4, #8]
 8001f58:	bfa2      	ittt	ge
 8001f5a:	6821      	ldrge	r1, [r4, #0]
 8001f5c:	f021 0104 	bicge.w	r1, r1, #4
 8001f60:	6021      	strge	r1, [r4, #0]
 8001f62:	b90d      	cbnz	r5, 8001f68 <_printf_i+0x110>
 8001f64:	2e00      	cmp	r6, #0
 8001f66:	d04b      	beq.n	8002000 <_printf_i+0x1a8>
 8001f68:	4616      	mov	r6, r2
 8001f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8001f72:	5dc7      	ldrb	r7, [r0, r7]
 8001f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f78:	462f      	mov	r7, r5
 8001f7a:	460d      	mov	r5, r1
 8001f7c:	42bb      	cmp	r3, r7
 8001f7e:	d9f4      	bls.n	8001f6a <_printf_i+0x112>
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d10b      	bne.n	8001f9c <_printf_i+0x144>
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	07df      	lsls	r7, r3, #31
 8001f88:	d508      	bpl.n	8001f9c <_printf_i+0x144>
 8001f8a:	6923      	ldr	r3, [r4, #16]
 8001f8c:	6861      	ldr	r1, [r4, #4]
 8001f8e:	4299      	cmp	r1, r3
 8001f90:	bfde      	ittt	le
 8001f92:	2330      	movle	r3, #48	@ 0x30
 8001f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f9c:	1b92      	subs	r2, r2, r6
 8001f9e:	6122      	str	r2, [r4, #16]
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	aa03      	add	r2, sp, #12
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	f8cd a000 	str.w	sl, [sp]
 8001fac:	f7ff fee2 	bl	8001d74 <_printf_common>
 8001fb0:	3001      	adds	r0, #1
 8001fb2:	d14a      	bne.n	800204a <_printf_i+0x1f2>
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	b004      	add	sp, #16
 8001fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	2778      	movs	r7, #120	@ 0x78
 8001fc8:	4832      	ldr	r0, [pc, #200]	@ (8002094 <_printf_i+0x23c>)
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001fd0:	061f      	lsls	r7, r3, #24
 8001fd2:	6831      	ldr	r1, [r6, #0]
 8001fd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8001fd8:	d402      	bmi.n	8001fe0 <_printf_i+0x188>
 8001fda:	065f      	lsls	r7, r3, #25
 8001fdc:	bf48      	it	mi
 8001fde:	b2ad      	uxthmi	r5, r5
 8001fe0:	6031      	str	r1, [r6, #0]
 8001fe2:	07d9      	lsls	r1, r3, #31
 8001fe4:	bf44      	itt	mi
 8001fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8001fea:	6023      	strmi	r3, [r4, #0]
 8001fec:	b11d      	cbz	r5, 8001ff6 <_printf_i+0x19e>
 8001fee:	2310      	movs	r3, #16
 8001ff0:	e7ac      	b.n	8001f4c <_printf_i+0xf4>
 8001ff2:	4827      	ldr	r0, [pc, #156]	@ (8002090 <_printf_i+0x238>)
 8001ff4:	e7e9      	b.n	8001fca <_printf_i+0x172>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	f023 0320 	bic.w	r3, r3, #32
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	e7f6      	b.n	8001fee <_printf_i+0x196>
 8002000:	4616      	mov	r6, r2
 8002002:	e7bd      	b.n	8001f80 <_printf_i+0x128>
 8002004:	6833      	ldr	r3, [r6, #0]
 8002006:	6825      	ldr	r5, [r4, #0]
 8002008:	1d18      	adds	r0, r3, #4
 800200a:	6961      	ldr	r1, [r4, #20]
 800200c:	6030      	str	r0, [r6, #0]
 800200e:	062e      	lsls	r6, r5, #24
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	d501      	bpl.n	8002018 <_printf_i+0x1c0>
 8002014:	6019      	str	r1, [r3, #0]
 8002016:	e002      	b.n	800201e <_printf_i+0x1c6>
 8002018:	0668      	lsls	r0, r5, #25
 800201a:	d5fb      	bpl.n	8002014 <_printf_i+0x1bc>
 800201c:	8019      	strh	r1, [r3, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	4616      	mov	r6, r2
 8002022:	6123      	str	r3, [r4, #16]
 8002024:	e7bc      	b.n	8001fa0 <_printf_i+0x148>
 8002026:	6833      	ldr	r3, [r6, #0]
 8002028:	2100      	movs	r1, #0
 800202a:	1d1a      	adds	r2, r3, #4
 800202c:	6032      	str	r2, [r6, #0]
 800202e:	681e      	ldr	r6, [r3, #0]
 8002030:	6862      	ldr	r2, [r4, #4]
 8002032:	4630      	mov	r0, r6
 8002034:	f000 f9e3 	bl	80023fe <memchr>
 8002038:	b108      	cbz	r0, 800203e <_printf_i+0x1e6>
 800203a:	1b80      	subs	r0, r0, r6
 800203c:	6060      	str	r0, [r4, #4]
 800203e:	6863      	ldr	r3, [r4, #4]
 8002040:	6123      	str	r3, [r4, #16]
 8002042:	2300      	movs	r3, #0
 8002044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002048:	e7aa      	b.n	8001fa0 <_printf_i+0x148>
 800204a:	6923      	ldr	r3, [r4, #16]
 800204c:	4632      	mov	r2, r6
 800204e:	4649      	mov	r1, r9
 8002050:	4640      	mov	r0, r8
 8002052:	47d0      	blx	sl
 8002054:	3001      	adds	r0, #1
 8002056:	d0ad      	beq.n	8001fb4 <_printf_i+0x15c>
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	079b      	lsls	r3, r3, #30
 800205c:	d413      	bmi.n	8002086 <_printf_i+0x22e>
 800205e:	68e0      	ldr	r0, [r4, #12]
 8002060:	9b03      	ldr	r3, [sp, #12]
 8002062:	4298      	cmp	r0, r3
 8002064:	bfb8      	it	lt
 8002066:	4618      	movlt	r0, r3
 8002068:	e7a6      	b.n	8001fb8 <_printf_i+0x160>
 800206a:	2301      	movs	r3, #1
 800206c:	4632      	mov	r2, r6
 800206e:	4649      	mov	r1, r9
 8002070:	4640      	mov	r0, r8
 8002072:	47d0      	blx	sl
 8002074:	3001      	adds	r0, #1
 8002076:	d09d      	beq.n	8001fb4 <_printf_i+0x15c>
 8002078:	3501      	adds	r5, #1
 800207a:	68e3      	ldr	r3, [r4, #12]
 800207c:	9903      	ldr	r1, [sp, #12]
 800207e:	1a5b      	subs	r3, r3, r1
 8002080:	42ab      	cmp	r3, r5
 8002082:	dcf2      	bgt.n	800206a <_printf_i+0x212>
 8002084:	e7eb      	b.n	800205e <_printf_i+0x206>
 8002086:	2500      	movs	r5, #0
 8002088:	f104 0619 	add.w	r6, r4, #25
 800208c:	e7f5      	b.n	800207a <_printf_i+0x222>
 800208e:	bf00      	nop
 8002090:	08004500 	.word	0x08004500
 8002094:	08004511 	.word	0x08004511

08002098 <std>:
 8002098:	2300      	movs	r3, #0
 800209a:	b510      	push	{r4, lr}
 800209c:	4604      	mov	r4, r0
 800209e:	6083      	str	r3, [r0, #8]
 80020a0:	8181      	strh	r1, [r0, #12]
 80020a2:	4619      	mov	r1, r3
 80020a4:	6643      	str	r3, [r0, #100]	@ 0x64
 80020a6:	81c2      	strh	r2, [r0, #14]
 80020a8:	2208      	movs	r2, #8
 80020aa:	6183      	str	r3, [r0, #24]
 80020ac:	e9c0 3300 	strd	r3, r3, [r0]
 80020b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020b4:	305c      	adds	r0, #92	@ 0x5c
 80020b6:	f000 f914 	bl	80022e2 <memset>
 80020ba:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <std+0x58>)
 80020bc:	6224      	str	r4, [r4, #32]
 80020be:	6263      	str	r3, [r4, #36]	@ 0x24
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <std+0x5c>)
 80020c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <std+0x60>)
 80020c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <std+0x64>)
 80020ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <std+0x68>)
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d006      	beq.n	80020e0 <std+0x48>
 80020d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80020d6:	4294      	cmp	r4, r2
 80020d8:	d002      	beq.n	80020e0 <std+0x48>
 80020da:	33d0      	adds	r3, #208	@ 0xd0
 80020dc:	429c      	cmp	r4, r3
 80020de:	d105      	bne.n	80020ec <std+0x54>
 80020e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80020e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020e8:	f000 b986 	b.w	80023f8 <__retarget_lock_init_recursive>
 80020ec:	bd10      	pop	{r4, pc}
 80020ee:	bf00      	nop
 80020f0:	0800225d 	.word	0x0800225d
 80020f4:	0800227f 	.word	0x0800227f
 80020f8:	080022b7 	.word	0x080022b7
 80020fc:	080022db 	.word	0x080022db
 8002100:	20000328 	.word	0x20000328

08002104 <stdio_exit_handler>:
 8002104:	4a02      	ldr	r2, [pc, #8]	@ (8002110 <stdio_exit_handler+0xc>)
 8002106:	4903      	ldr	r1, [pc, #12]	@ (8002114 <stdio_exit_handler+0x10>)
 8002108:	4803      	ldr	r0, [pc, #12]	@ (8002118 <stdio_exit_handler+0x14>)
 800210a:	f000 b869 	b.w	80021e0 <_fwalk_sglue>
 800210e:	bf00      	nop
 8002110:	20000004 	.word	0x20000004
 8002114:	08003d89 	.word	0x08003d89
 8002118:	20000014 	.word	0x20000014

0800211c <cleanup_stdio>:
 800211c:	6841      	ldr	r1, [r0, #4]
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <cleanup_stdio+0x34>)
 8002120:	4299      	cmp	r1, r3
 8002122:	b510      	push	{r4, lr}
 8002124:	4604      	mov	r4, r0
 8002126:	d001      	beq.n	800212c <cleanup_stdio+0x10>
 8002128:	f001 fe2e 	bl	8003d88 <_fflush_r>
 800212c:	68a1      	ldr	r1, [r4, #8]
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <cleanup_stdio+0x38>)
 8002130:	4299      	cmp	r1, r3
 8002132:	d002      	beq.n	800213a <cleanup_stdio+0x1e>
 8002134:	4620      	mov	r0, r4
 8002136:	f001 fe27 	bl	8003d88 <_fflush_r>
 800213a:	68e1      	ldr	r1, [r4, #12]
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <cleanup_stdio+0x3c>)
 800213e:	4299      	cmp	r1, r3
 8002140:	d004      	beq.n	800214c <cleanup_stdio+0x30>
 8002142:	4620      	mov	r0, r4
 8002144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002148:	f001 be1e 	b.w	8003d88 <_fflush_r>
 800214c:	bd10      	pop	{r4, pc}
 800214e:	bf00      	nop
 8002150:	20000328 	.word	0x20000328
 8002154:	20000390 	.word	0x20000390
 8002158:	200003f8 	.word	0x200003f8

0800215c <global_stdio_init.part.0>:
 800215c:	b510      	push	{r4, lr}
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <global_stdio_init.part.0+0x30>)
 8002160:	2104      	movs	r1, #4
 8002162:	4c0b      	ldr	r4, [pc, #44]	@ (8002190 <global_stdio_init.part.0+0x34>)
 8002164:	4a0b      	ldr	r2, [pc, #44]	@ (8002194 <global_stdio_init.part.0+0x38>)
 8002166:	4620      	mov	r0, r4
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	f7ff ff94 	bl	8002098 <std>
 8002170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002174:	2201      	movs	r2, #1
 8002176:	2109      	movs	r1, #9
 8002178:	f7ff ff8e 	bl	8002098 <std>
 800217c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002180:	2202      	movs	r2, #2
 8002182:	2112      	movs	r1, #18
 8002184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002188:	f7ff bf86 	b.w	8002098 <std>
 800218c:	20000460 	.word	0x20000460
 8002190:	20000328 	.word	0x20000328
 8002194:	08002105 	.word	0x08002105

08002198 <__sfp_lock_acquire>:
 8002198:	4801      	ldr	r0, [pc, #4]	@ (80021a0 <__sfp_lock_acquire+0x8>)
 800219a:	f000 b92e 	b.w	80023fa <__retarget_lock_acquire_recursive>
 800219e:	bf00      	nop
 80021a0:	20000469 	.word	0x20000469

080021a4 <__sfp_lock_release>:
 80021a4:	4801      	ldr	r0, [pc, #4]	@ (80021ac <__sfp_lock_release+0x8>)
 80021a6:	f000 b929 	b.w	80023fc <__retarget_lock_release_recursive>
 80021aa:	bf00      	nop
 80021ac:	20000469 	.word	0x20000469

080021b0 <__sinit>:
 80021b0:	b510      	push	{r4, lr}
 80021b2:	4604      	mov	r4, r0
 80021b4:	f7ff fff0 	bl	8002198 <__sfp_lock_acquire>
 80021b8:	6a23      	ldr	r3, [r4, #32]
 80021ba:	b11b      	cbz	r3, 80021c4 <__sinit+0x14>
 80021bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c0:	f7ff bff0 	b.w	80021a4 <__sfp_lock_release>
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <__sinit+0x28>)
 80021c6:	6223      	str	r3, [r4, #32]
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <__sinit+0x2c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f5      	bne.n	80021bc <__sinit+0xc>
 80021d0:	f7ff ffc4 	bl	800215c <global_stdio_init.part.0>
 80021d4:	e7f2      	b.n	80021bc <__sinit+0xc>
 80021d6:	bf00      	nop
 80021d8:	0800211d 	.word	0x0800211d
 80021dc:	20000460 	.word	0x20000460

080021e0 <_fwalk_sglue>:
 80021e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021e4:	4607      	mov	r7, r0
 80021e6:	4688      	mov	r8, r1
 80021e8:	4614      	mov	r4, r2
 80021ea:	2600      	movs	r6, #0
 80021ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021f0:	f1b9 0901 	subs.w	r9, r9, #1
 80021f4:	d505      	bpl.n	8002202 <_fwalk_sglue+0x22>
 80021f6:	6824      	ldr	r4, [r4, #0]
 80021f8:	2c00      	cmp	r4, #0
 80021fa:	d1f7      	bne.n	80021ec <_fwalk_sglue+0xc>
 80021fc:	4630      	mov	r0, r6
 80021fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002202:	89ab      	ldrh	r3, [r5, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d907      	bls.n	8002218 <_fwalk_sglue+0x38>
 8002208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800220c:	3301      	adds	r3, #1
 800220e:	d003      	beq.n	8002218 <_fwalk_sglue+0x38>
 8002210:	4629      	mov	r1, r5
 8002212:	4638      	mov	r0, r7
 8002214:	47c0      	blx	r8
 8002216:	4306      	orrs	r6, r0
 8002218:	3568      	adds	r5, #104	@ 0x68
 800221a:	e7e9      	b.n	80021f0 <_fwalk_sglue+0x10>

0800221c <siprintf>:
 800221c:	b40e      	push	{r1, r2, r3}
 800221e:	b500      	push	{lr}
 8002220:	b09c      	sub	sp, #112	@ 0x70
 8002222:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002226:	ab1d      	add	r3, sp, #116	@ 0x74
 8002228:	9002      	str	r0, [sp, #8]
 800222a:	9006      	str	r0, [sp, #24]
 800222c:	9107      	str	r1, [sp, #28]
 800222e:	9104      	str	r1, [sp, #16]
 8002230:	4808      	ldr	r0, [pc, #32]	@ (8002254 <siprintf+0x38>)
 8002232:	4909      	ldr	r1, [pc, #36]	@ (8002258 <siprintf+0x3c>)
 8002234:	f853 2b04 	ldr.w	r2, [r3], #4
 8002238:	9105      	str	r1, [sp, #20]
 800223a:	a902      	add	r1, sp, #8
 800223c:	6800      	ldr	r0, [r0, #0]
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	f001 fc22 	bl	8003a88 <_svfiprintf_r>
 8002244:	9b02      	ldr	r3, [sp, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	b01c      	add	sp, #112	@ 0x70
 800224c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002250:	b003      	add	sp, #12
 8002252:	4770      	bx	lr
 8002254:	20000010 	.word	0x20000010
 8002258:	ffff0208 	.word	0xffff0208

0800225c <__sread>:
 800225c:	b510      	push	{r4, lr}
 800225e:	460c      	mov	r4, r1
 8002260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002264:	f000 f87a 	bl	800235c <_read_r>
 8002268:	2800      	cmp	r0, #0
 800226a:	bfab      	itete	ge
 800226c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800226e:	89a3      	ldrhlt	r3, [r4, #12]
 8002270:	181b      	addge	r3, r3, r0
 8002272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002276:	bfac      	ite	ge
 8002278:	6563      	strge	r3, [r4, #84]	@ 0x54
 800227a:	81a3      	strhlt	r3, [r4, #12]
 800227c:	bd10      	pop	{r4, pc}

0800227e <__swrite>:
 800227e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002282:	461f      	mov	r7, r3
 8002284:	898b      	ldrh	r3, [r1, #12]
 8002286:	4605      	mov	r5, r0
 8002288:	460c      	mov	r4, r1
 800228a:	05db      	lsls	r3, r3, #23
 800228c:	4616      	mov	r6, r2
 800228e:	d505      	bpl.n	800229c <__swrite+0x1e>
 8002290:	2302      	movs	r3, #2
 8002292:	2200      	movs	r2, #0
 8002294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002298:	f000 f84e 	bl	8002338 <_lseek_r>
 800229c:	89a3      	ldrh	r3, [r4, #12]
 800229e:	4632      	mov	r2, r6
 80022a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022a4:	4628      	mov	r0, r5
 80022a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022aa:	81a3      	strh	r3, [r4, #12]
 80022ac:	463b      	mov	r3, r7
 80022ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022b2:	f000 b865 	b.w	8002380 <_write_r>

080022b6 <__sseek>:
 80022b6:	b510      	push	{r4, lr}
 80022b8:	460c      	mov	r4, r1
 80022ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022be:	f000 f83b 	bl	8002338 <_lseek_r>
 80022c2:	1c43      	adds	r3, r0, #1
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	bf15      	itete	ne
 80022c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80022ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80022ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80022d2:	81a3      	strheq	r3, [r4, #12]
 80022d4:	bf18      	it	ne
 80022d6:	81a3      	strhne	r3, [r4, #12]
 80022d8:	bd10      	pop	{r4, pc}

080022da <__sclose>:
 80022da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022de:	f000 b81b 	b.w	8002318 <_close_r>

080022e2 <memset>:
 80022e2:	4402      	add	r2, r0
 80022e4:	4603      	mov	r3, r0
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d100      	bne.n	80022ec <memset+0xa>
 80022ea:	4770      	bx	lr
 80022ec:	f803 1b01 	strb.w	r1, [r3], #1
 80022f0:	e7f9      	b.n	80022e6 <memset+0x4>

080022f2 <strcat>:
 80022f2:	4602      	mov	r2, r0
 80022f4:	b510      	push	{r4, lr}
 80022f6:	7814      	ldrb	r4, [r2, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	3201      	adds	r2, #1
 80022fc:	2c00      	cmp	r4, #0
 80022fe:	d1fa      	bne.n	80022f6 <strcat+0x4>
 8002300:	3b01      	subs	r3, #1
 8002302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800230a:	2a00      	cmp	r2, #0
 800230c:	d1f9      	bne.n	8002302 <strcat+0x10>
 800230e:	bd10      	pop	{r4, pc}

08002310 <_localeconv_r>:
 8002310:	4800      	ldr	r0, [pc, #0]	@ (8002314 <_localeconv_r+0x4>)
 8002312:	4770      	bx	lr
 8002314:	20000150 	.word	0x20000150

08002318 <_close_r>:
 8002318:	b538      	push	{r3, r4, r5, lr}
 800231a:	2300      	movs	r3, #0
 800231c:	4d05      	ldr	r5, [pc, #20]	@ (8002334 <_close_r+0x1c>)
 800231e:	4604      	mov	r4, r0
 8002320:	4608      	mov	r0, r1
 8002322:	602b      	str	r3, [r5, #0]
 8002324:	f7fe ffbc 	bl	80012a0 <_close>
 8002328:	1c43      	adds	r3, r0, #1
 800232a:	d102      	bne.n	8002332 <_close_r+0x1a>
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	b103      	cbz	r3, 8002332 <_close_r+0x1a>
 8002330:	6023      	str	r3, [r4, #0]
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	20000464 	.word	0x20000464

08002338 <_lseek_r>:
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	4604      	mov	r4, r0
 800233c:	4d06      	ldr	r5, [pc, #24]	@ (8002358 <_lseek_r+0x20>)
 800233e:	4608      	mov	r0, r1
 8002340:	4611      	mov	r1, r2
 8002342:	2200      	movs	r2, #0
 8002344:	602a      	str	r2, [r5, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	f7fe ffd1 	bl	80012ee <_lseek>
 800234c:	1c43      	adds	r3, r0, #1
 800234e:	d102      	bne.n	8002356 <_lseek_r+0x1e>
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	b103      	cbz	r3, 8002356 <_lseek_r+0x1e>
 8002354:	6023      	str	r3, [r4, #0]
 8002356:	bd38      	pop	{r3, r4, r5, pc}
 8002358:	20000464 	.word	0x20000464

0800235c <_read_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4604      	mov	r4, r0
 8002360:	4d06      	ldr	r5, [pc, #24]	@ (800237c <_read_r+0x20>)
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	2200      	movs	r2, #0
 8002368:	602a      	str	r2, [r5, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f7fe ff5f 	bl	800122e <_read>
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	d102      	bne.n	800237a <_read_r+0x1e>
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	b103      	cbz	r3, 800237a <_read_r+0x1e>
 8002378:	6023      	str	r3, [r4, #0]
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	20000464 	.word	0x20000464

08002380 <_write_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4604      	mov	r4, r0
 8002384:	4d06      	ldr	r5, [pc, #24]	@ (80023a0 <_write_r+0x20>)
 8002386:	4608      	mov	r0, r1
 8002388:	4611      	mov	r1, r2
 800238a:	2200      	movs	r2, #0
 800238c:	602a      	str	r2, [r5, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	f7fe ff6a 	bl	8001268 <_write>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_write_r+0x1e>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	b103      	cbz	r3, 800239e <_write_r+0x1e>
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	20000464 	.word	0x20000464

080023a4 <__errno>:
 80023a4:	4b01      	ldr	r3, [pc, #4]	@ (80023ac <__errno+0x8>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000010 	.word	0x20000010

080023b0 <__libc_init_array>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4d0d      	ldr	r5, [pc, #52]	@ (80023e8 <__libc_init_array+0x38>)
 80023b4:	2600      	movs	r6, #0
 80023b6:	4c0d      	ldr	r4, [pc, #52]	@ (80023ec <__libc_init_array+0x3c>)
 80023b8:	1b64      	subs	r4, r4, r5
 80023ba:	10a4      	asrs	r4, r4, #2
 80023bc:	42a6      	cmp	r6, r4
 80023be:	d109      	bne.n	80023d4 <__libc_init_array+0x24>
 80023c0:	4d0b      	ldr	r5, [pc, #44]	@ (80023f0 <__libc_init_array+0x40>)
 80023c2:	2600      	movs	r6, #0
 80023c4:	4c0b      	ldr	r4, [pc, #44]	@ (80023f4 <__libc_init_array+0x44>)
 80023c6:	f002 f87d 	bl	80044c4 <_init>
 80023ca:	1b64      	subs	r4, r4, r5
 80023cc:	10a4      	asrs	r4, r4, #2
 80023ce:	42a6      	cmp	r6, r4
 80023d0:	d105      	bne.n	80023de <__libc_init_array+0x2e>
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d8:	3601      	adds	r6, #1
 80023da:	4798      	blx	r3
 80023dc:	e7ee      	b.n	80023bc <__libc_init_array+0xc>
 80023de:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e2:	3601      	adds	r6, #1
 80023e4:	4798      	blx	r3
 80023e6:	e7f2      	b.n	80023ce <__libc_init_array+0x1e>
 80023e8:	08004868 	.word	0x08004868
 80023ec:	08004868 	.word	0x08004868
 80023f0:	08004868 	.word	0x08004868
 80023f4:	0800486c 	.word	0x0800486c

080023f8 <__retarget_lock_init_recursive>:
 80023f8:	4770      	bx	lr

080023fa <__retarget_lock_acquire_recursive>:
 80023fa:	4770      	bx	lr

080023fc <__retarget_lock_release_recursive>:
 80023fc:	4770      	bx	lr

080023fe <memchr>:
 80023fe:	b2c9      	uxtb	r1, r1
 8002400:	4603      	mov	r3, r0
 8002402:	4402      	add	r2, r0
 8002404:	b510      	push	{r4, lr}
 8002406:	4293      	cmp	r3, r2
 8002408:	4618      	mov	r0, r3
 800240a:	d101      	bne.n	8002410 <memchr+0x12>
 800240c:	2000      	movs	r0, #0
 800240e:	e003      	b.n	8002418 <memchr+0x1a>
 8002410:	7804      	ldrb	r4, [r0, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	428c      	cmp	r4, r1
 8002416:	d1f6      	bne.n	8002406 <memchr+0x8>
 8002418:	bd10      	pop	{r4, pc}

0800241a <quorem>:
 800241a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241e:	6903      	ldr	r3, [r0, #16]
 8002420:	4607      	mov	r7, r0
 8002422:	690c      	ldr	r4, [r1, #16]
 8002424:	42a3      	cmp	r3, r4
 8002426:	f2c0 8083 	blt.w	8002530 <quorem+0x116>
 800242a:	3c01      	subs	r4, #1
 800242c:	f100 0514 	add.w	r5, r0, #20
 8002430:	f101 0814 	add.w	r8, r1, #20
 8002434:	00a3      	lsls	r3, r4, #2
 8002436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800243a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800244a:	3301      	adds	r3, #1
 800244c:	429a      	cmp	r2, r3
 800244e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002452:	d331      	bcc.n	80024b8 <quorem+0x9e>
 8002454:	f04f 0a00 	mov.w	sl, #0
 8002458:	46c4      	mov	ip, r8
 800245a:	46ae      	mov	lr, r5
 800245c:	46d3      	mov	fp, sl
 800245e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002462:	b298      	uxth	r0, r3
 8002464:	45e1      	cmp	r9, ip
 8002466:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800246a:	fb06 a000 	mla	r0, r6, r0, sl
 800246e:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8002472:	b280      	uxth	r0, r0
 8002474:	fb06 2303 	mla	r3, r6, r3, r2
 8002478:	f8de 2000 	ldr.w	r2, [lr]
 800247c:	b292      	uxth	r2, r2
 800247e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002482:	eba2 0200 	sub.w	r2, r2, r0
 8002486:	b29b      	uxth	r3, r3
 8002488:	f8de 0000 	ldr.w	r0, [lr]
 800248c:	445a      	add	r2, fp
 800248e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002492:	b292      	uxth	r2, r2
 8002494:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002498:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800249c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80024a0:	f84e 2b04 	str.w	r2, [lr], #4
 80024a4:	d2db      	bcs.n	800245e <quorem+0x44>
 80024a6:	9b00      	ldr	r3, [sp, #0]
 80024a8:	58eb      	ldr	r3, [r5, r3]
 80024aa:	b92b      	cbnz	r3, 80024b8 <quorem+0x9e>
 80024ac:	9b01      	ldr	r3, [sp, #4]
 80024ae:	3b04      	subs	r3, #4
 80024b0:	429d      	cmp	r5, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	d330      	bcc.n	8002518 <quorem+0xfe>
 80024b6:	613c      	str	r4, [r7, #16]
 80024b8:	4638      	mov	r0, r7
 80024ba:	f001 f97d 	bl	80037b8 <__mcmp>
 80024be:	2800      	cmp	r0, #0
 80024c0:	db26      	blt.n	8002510 <quorem+0xf6>
 80024c2:	4629      	mov	r1, r5
 80024c4:	2000      	movs	r0, #0
 80024c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80024ca:	f8d1 c000 	ldr.w	ip, [r1]
 80024ce:	fa1f fe82 	uxth.w	lr, r2
 80024d2:	45c1      	cmp	r9, r8
 80024d4:	fa1f f38c 	uxth.w	r3, ip
 80024d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80024dc:	eba3 030e 	sub.w	r3, r3, lr
 80024e0:	4403      	add	r3, r0
 80024e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80024ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80024f4:	f841 3b04 	str.w	r3, [r1], #4
 80024f8:	d2e5      	bcs.n	80024c6 <quorem+0xac>
 80024fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80024fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002502:	b922      	cbnz	r2, 800250e <quorem+0xf4>
 8002504:	3b04      	subs	r3, #4
 8002506:	429d      	cmp	r5, r3
 8002508:	461a      	mov	r2, r3
 800250a:	d30b      	bcc.n	8002524 <quorem+0x10a>
 800250c:	613c      	str	r4, [r7, #16]
 800250e:	3601      	adds	r6, #1
 8002510:	4630      	mov	r0, r6
 8002512:	b003      	add	sp, #12
 8002514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	3b04      	subs	r3, #4
 800251c:	2a00      	cmp	r2, #0
 800251e:	d1ca      	bne.n	80024b6 <quorem+0x9c>
 8002520:	3c01      	subs	r4, #1
 8002522:	e7c5      	b.n	80024b0 <quorem+0x96>
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	3b04      	subs	r3, #4
 8002528:	2a00      	cmp	r2, #0
 800252a:	d1ef      	bne.n	800250c <quorem+0xf2>
 800252c:	3c01      	subs	r4, #1
 800252e:	e7ea      	b.n	8002506 <quorem+0xec>
 8002530:	2000      	movs	r0, #0
 8002532:	e7ee      	b.n	8002512 <quorem+0xf8>
 8002534:	0000      	movs	r0, r0
	...

08002538 <_dtoa_r>:
 8002538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253c:	69c7      	ldr	r7, [r0, #28]
 800253e:	b099      	sub	sp, #100	@ 0x64
 8002540:	4683      	mov	fp, r0
 8002542:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002544:	9109      	str	r1, [sp, #36]	@ 0x24
 8002546:	920e      	str	r2, [sp, #56]	@ 0x38
 8002548:	9313      	str	r3, [sp, #76]	@ 0x4c
 800254a:	ec55 4b10 	vmov	r4, r5, d0
 800254e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002552:	b97f      	cbnz	r7, 8002574 <_dtoa_r+0x3c>
 8002554:	2010      	movs	r0, #16
 8002556:	f000 fdfd 	bl	8003154 <malloc>
 800255a:	4602      	mov	r2, r0
 800255c:	f8cb 001c 	str.w	r0, [fp, #28]
 8002560:	b920      	cbnz	r0, 800256c <_dtoa_r+0x34>
 8002562:	4ba7      	ldr	r3, [pc, #668]	@ (8002800 <_dtoa_r+0x2c8>)
 8002564:	21ef      	movs	r1, #239	@ 0xef
 8002566:	48a7      	ldr	r0, [pc, #668]	@ (8002804 <_dtoa_r+0x2cc>)
 8002568:	f001 fc6e 	bl	8003e48 <__assert_func>
 800256c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002570:	6007      	str	r7, [r0, #0]
 8002572:	60c7      	str	r7, [r0, #12]
 8002574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	b159      	cbz	r1, 8002594 <_dtoa_r+0x5c>
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	2301      	movs	r3, #1
 8002580:	4658      	mov	r0, fp
 8002582:	4093      	lsls	r3, r2
 8002584:	604a      	str	r2, [r1, #4]
 8002586:	608b      	str	r3, [r1, #8]
 8002588:	f000 feda 	bl	8003340 <_Bfree>
 800258c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	1e2b      	subs	r3, r5, #0
 8002596:	bfb7      	itett	lt
 8002598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800259c:	2300      	movge	r3, #0
 800259e:	2201      	movlt	r2, #1
 80025a0:	9303      	strlt	r3, [sp, #12]
 80025a2:	bfa8      	it	ge
 80025a4:	6033      	strge	r3, [r6, #0]
 80025a6:	9f03      	ldr	r7, [sp, #12]
 80025a8:	4b97      	ldr	r3, [pc, #604]	@ (8002808 <_dtoa_r+0x2d0>)
 80025aa:	bfb8      	it	lt
 80025ac:	6032      	strlt	r2, [r6, #0]
 80025ae:	43bb      	bics	r3, r7
 80025b0:	d112      	bne.n	80025d8 <_dtoa_r+0xa0>
 80025b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80025b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80025be:	4323      	orrs	r3, r4
 80025c0:	f000 854c 	beq.w	800305c <_dtoa_r+0xb24>
 80025c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80025c6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800281c <_dtoa_r+0x2e4>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 854e 	beq.w	800306c <_dtoa_r+0xb34>
 80025d0:	f10a 0303 	add.w	r3, sl, #3
 80025d4:	f000 bd48 	b.w	8003068 <_dtoa_r+0xb30>
 80025d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	2300      	movs	r3, #0
 80025e0:	ec51 0b17 	vmov	r0, r1, d7
 80025e4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80025e8:	f7fe fa52 	bl	8000a90 <__aeabi_dcmpeq>
 80025ec:	4680      	mov	r8, r0
 80025ee:	b158      	cbz	r0, 8002608 <_dtoa_r+0xd0>
 80025f0:	2301      	movs	r3, #1
 80025f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80025f8:	b113      	cbz	r3, 8002600 <_dtoa_r+0xc8>
 80025fa:	4b84      	ldr	r3, [pc, #528]	@ (800280c <_dtoa_r+0x2d4>)
 80025fc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8002820 <_dtoa_r+0x2e8>
 8002604:	f000 bd32 	b.w	800306c <_dtoa_r+0xb34>
 8002608:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800260c:	aa16      	add	r2, sp, #88	@ 0x58
 800260e:	a917      	add	r1, sp, #92	@ 0x5c
 8002610:	4658      	mov	r0, fp
 8002612:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002616:	f001 f983 	bl	8003920 <__d2b>
 800261a:	4681      	mov	r9, r0
 800261c:	2e00      	cmp	r6, #0
 800261e:	d075      	beq.n	800270c <_dtoa_r+0x1d4>
 8002620:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002622:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002626:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800262a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800262e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002636:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800263a:	4619      	mov	r1, r3
 800263c:	2200      	movs	r2, #0
 800263e:	4b74      	ldr	r3, [pc, #464]	@ (8002810 <_dtoa_r+0x2d8>)
 8002640:	f7fd fe06 	bl	8000250 <__aeabi_dsub>
 8002644:	a368      	add	r3, pc, #416	@ (adr r3, 80027e8 <_dtoa_r+0x2b0>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd ffb9 	bl	80005c0 <__aeabi_dmul>
 800264e:	a368      	add	r3, pc, #416	@ (adr r3, 80027f0 <_dtoa_r+0x2b8>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd fdfe 	bl	8000254 <__adddf3>
 8002658:	4604      	mov	r4, r0
 800265a:	460d      	mov	r5, r1
 800265c:	4630      	mov	r0, r6
 800265e:	f7fd ff45 	bl	80004ec <__aeabi_i2d>
 8002662:	a365      	add	r3, pc, #404	@ (adr r3, 80027f8 <_dtoa_r+0x2c0>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fd ffaa 	bl	80005c0 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4620      	mov	r0, r4
 8002672:	4629      	mov	r1, r5
 8002674:	f7fd fdee 	bl	8000254 <__adddf3>
 8002678:	4604      	mov	r4, r0
 800267a:	460d      	mov	r5, r1
 800267c:	f7fe fa50 	bl	8000b20 <__aeabi_d2iz>
 8002680:	2200      	movs	r2, #0
 8002682:	4607      	mov	r7, r0
 8002684:	2300      	movs	r3, #0
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f7fe fa0b 	bl	8000aa4 <__aeabi_dcmplt>
 800268e:	b140      	cbz	r0, 80026a2 <_dtoa_r+0x16a>
 8002690:	4638      	mov	r0, r7
 8002692:	f7fd ff2b 	bl	80004ec <__aeabi_i2d>
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f7fe f9f9 	bl	8000a90 <__aeabi_dcmpeq>
 800269e:	b900      	cbnz	r0, 80026a2 <_dtoa_r+0x16a>
 80026a0:	3f01      	subs	r7, #1
 80026a2:	2f16      	cmp	r7, #22
 80026a4:	d851      	bhi.n	800274a <_dtoa_r+0x212>
 80026a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002814 <_dtoa_r+0x2dc>)
 80026a8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80026ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fe f9f6 	bl	8000aa4 <__aeabi_dcmplt>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d048      	beq.n	800274e <_dtoa_r+0x216>
 80026bc:	3f01      	subs	r7, #1
 80026be:	2300      	movs	r3, #0
 80026c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80026c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80026c4:	1b9b      	subs	r3, r3, r6
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	bf46      	itte	mi
 80026ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80026ce:	2300      	movmi	r3, #0
 80026d0:	f04f 0800 	movpl.w	r8, #0
 80026d4:	9208      	str	r2, [sp, #32]
 80026d6:	bf48      	it	mi
 80026d8:	9308      	strmi	r3, [sp, #32]
 80026da:	2f00      	cmp	r7, #0
 80026dc:	db39      	blt.n	8002752 <_dtoa_r+0x21a>
 80026de:	9b08      	ldr	r3, [sp, #32]
 80026e0:	970f      	str	r7, [sp, #60]	@ 0x3c
 80026e2:	443b      	add	r3, r7
 80026e4:	9308      	str	r3, [sp, #32]
 80026e6:	2300      	movs	r3, #0
 80026e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80026ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d864      	bhi.n	80027ba <_dtoa_r+0x282>
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	bfc5      	ittet	gt
 80026f4:	3b04      	subgt	r3, #4
 80026f6:	2400      	movgt	r4, #0
 80026f8:	2401      	movle	r4, #1
 80026fa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80026fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026fe:	3b02      	subs	r3, #2
 8002700:	2b03      	cmp	r3, #3
 8002702:	d865      	bhi.n	80027d0 <_dtoa_r+0x298>
 8002704:	e8df f003 	tbb	[pc, r3]
 8002708:	5737392c 	.word	0x5737392c
 800270c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002710:	441e      	add	r6, r3
 8002712:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002716:	2b20      	cmp	r3, #32
 8002718:	bfc9      	itett	gt
 800271a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800271e:	f1c3 0320 	rsble	r3, r3, #32
 8002722:	409f      	lslgt	r7, r3
 8002724:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002728:	bfd8      	it	le
 800272a:	fa04 f003 	lslle.w	r0, r4, r3
 800272e:	f106 36ff 	add.w	r6, r6, #4294967295
 8002732:	bfc4      	itt	gt
 8002734:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002738:	ea47 0003 	orrgt.w	r0, r7, r3
 800273c:	f7fd fec6 	bl	80004cc <__aeabi_ui2d>
 8002740:	2201      	movs	r2, #1
 8002742:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002746:	9214      	str	r2, [sp, #80]	@ 0x50
 8002748:	e777      	b.n	800263a <_dtoa_r+0x102>
 800274a:	2301      	movs	r3, #1
 800274c:	e7b8      	b.n	80026c0 <_dtoa_r+0x188>
 800274e:	9012      	str	r0, [sp, #72]	@ 0x48
 8002750:	e7b7      	b.n	80026c2 <_dtoa_r+0x18a>
 8002752:	427b      	negs	r3, r7
 8002754:	eba8 0807 	sub.w	r8, r8, r7
 8002758:	930a      	str	r3, [sp, #40]	@ 0x28
 800275a:	2300      	movs	r3, #0
 800275c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800275e:	e7c4      	b.n	80026ea <_dtoa_r+0x1b2>
 8002760:	2300      	movs	r3, #0
 8002762:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc35      	bgt.n	80027d6 <_dtoa_r+0x29e>
 800276a:	2301      	movs	r3, #1
 800276c:	461a      	mov	r2, r3
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	9307      	str	r3, [sp, #28]
 8002772:	920e      	str	r2, [sp, #56]	@ 0x38
 8002774:	e00b      	b.n	800278e <_dtoa_r+0x256>
 8002776:	2301      	movs	r3, #1
 8002778:	e7f3      	b.n	8002762 <_dtoa_r+0x22a>
 800277a:	2300      	movs	r3, #0
 800277c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800277e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	9307      	str	r3, [sp, #28]
 800278a:	bfb8      	it	lt
 800278c:	2301      	movlt	r3, #1
 800278e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002792:	2100      	movs	r1, #0
 8002794:	2204      	movs	r2, #4
 8002796:	f102 0514 	add.w	r5, r2, #20
 800279a:	429d      	cmp	r5, r3
 800279c:	d91f      	bls.n	80027de <_dtoa_r+0x2a6>
 800279e:	6041      	str	r1, [r0, #4]
 80027a0:	4658      	mov	r0, fp
 80027a2:	f000 fd8d 	bl	80032c0 <_Balloc>
 80027a6:	4682      	mov	sl, r0
 80027a8:	2800      	cmp	r0, #0
 80027aa:	d13b      	bne.n	8002824 <_dtoa_r+0x2ec>
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <_dtoa_r+0x2e0>)
 80027ae:	4602      	mov	r2, r0
 80027b0:	f240 11af 	movw	r1, #431	@ 0x1af
 80027b4:	e6d7      	b.n	8002566 <_dtoa_r+0x2e>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e7e0      	b.n	800277c <_dtoa_r+0x244>
 80027ba:	2401      	movs	r4, #1
 80027bc:	2300      	movs	r3, #0
 80027be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80027c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	2200      	movs	r2, #0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	9307      	str	r3, [sp, #28]
 80027cc:	2312      	movs	r3, #18
 80027ce:	e7d0      	b.n	8002772 <_dtoa_r+0x23a>
 80027d0:	2301      	movs	r3, #1
 80027d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80027d4:	e7f5      	b.n	80027c2 <_dtoa_r+0x28a>
 80027d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	9307      	str	r3, [sp, #28]
 80027dc:	e7d7      	b.n	800278e <_dtoa_r+0x256>
 80027de:	3101      	adds	r1, #1
 80027e0:	0052      	lsls	r2, r2, #1
 80027e2:	e7d8      	b.n	8002796 <_dtoa_r+0x25e>
 80027e4:	f3af 8000 	nop.w
 80027e8:	636f4361 	.word	0x636f4361
 80027ec:	3fd287a7 	.word	0x3fd287a7
 80027f0:	8b60c8b3 	.word	0x8b60c8b3
 80027f4:	3fc68a28 	.word	0x3fc68a28
 80027f8:	509f79fb 	.word	0x509f79fb
 80027fc:	3fd34413 	.word	0x3fd34413
 8002800:	0800452f 	.word	0x0800452f
 8002804:	08004546 	.word	0x08004546
 8002808:	7ff00000 	.word	0x7ff00000
 800280c:	080044ff 	.word	0x080044ff
 8002810:	3ff80000 	.word	0x3ff80000
 8002814:	08004640 	.word	0x08004640
 8002818:	0800459e 	.word	0x0800459e
 800281c:	0800452b 	.word	0x0800452b
 8002820:	080044fe 	.word	0x080044fe
 8002824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002828:	6018      	str	r0, [r3, #0]
 800282a:	9b07      	ldr	r3, [sp, #28]
 800282c:	2b0e      	cmp	r3, #14
 800282e:	f200 80a4 	bhi.w	800297a <_dtoa_r+0x442>
 8002832:	2c00      	cmp	r4, #0
 8002834:	f000 80a1 	beq.w	800297a <_dtoa_r+0x442>
 8002838:	2f00      	cmp	r7, #0
 800283a:	dd33      	ble.n	80028a4 <_dtoa_r+0x36c>
 800283c:	f007 020f 	and.w	r2, r7, #15
 8002840:	4bac      	ldr	r3, [pc, #688]	@ (8002af4 <_dtoa_r+0x5bc>)
 8002842:	05f8      	lsls	r0, r7, #23
 8002844:	ea4f 1427 	mov.w	r4, r7, asr #4
 8002848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800284c:	ed93 7b00 	vldr	d7, [r3]
 8002850:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002854:	d516      	bpl.n	8002884 <_dtoa_r+0x34c>
 8002856:	4ba8      	ldr	r3, [pc, #672]	@ (8002af8 <_dtoa_r+0x5c0>)
 8002858:	f004 040f 	and.w	r4, r4, #15
 800285c:	2603      	movs	r6, #3
 800285e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002866:	f7fd ffd5 	bl	8000814 <__aeabi_ddiv>
 800286a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800286e:	4da2      	ldr	r5, [pc, #648]	@ (8002af8 <_dtoa_r+0x5c0>)
 8002870:	b954      	cbnz	r4, 8002888 <_dtoa_r+0x350>
 8002872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800287a:	f7fd ffcb 	bl	8000814 <__aeabi_ddiv>
 800287e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002882:	e028      	b.n	80028d6 <_dtoa_r+0x39e>
 8002884:	2602      	movs	r6, #2
 8002886:	e7f2      	b.n	800286e <_dtoa_r+0x336>
 8002888:	07e1      	lsls	r1, r4, #31
 800288a:	d508      	bpl.n	800289e <_dtoa_r+0x366>
 800288c:	3601      	adds	r6, #1
 800288e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002892:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002896:	f7fd fe93 	bl	80005c0 <__aeabi_dmul>
 800289a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800289e:	1064      	asrs	r4, r4, #1
 80028a0:	3508      	adds	r5, #8
 80028a2:	e7e5      	b.n	8002870 <_dtoa_r+0x338>
 80028a4:	f000 80d2 	beq.w	8002a4c <_dtoa_r+0x514>
 80028a8:	427c      	negs	r4, r7
 80028aa:	4b92      	ldr	r3, [pc, #584]	@ (8002af4 <_dtoa_r+0x5bc>)
 80028ac:	4d92      	ldr	r5, [pc, #584]	@ (8002af8 <_dtoa_r+0x5c0>)
 80028ae:	2602      	movs	r6, #2
 80028b0:	f004 020f 	and.w	r2, r4, #15
 80028b4:	1124      	asrs	r4, r4, #4
 80028b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd fe7d 	bl	80005c0 <__aeabi_dmul>
 80028c6:	2300      	movs	r3, #0
 80028c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028cc:	2c00      	cmp	r4, #0
 80028ce:	f040 80b2 	bne.w	8002a36 <_dtoa_r+0x4fe>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1d3      	bne.n	800287e <_dtoa_r+0x346>
 80028d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80028d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80b7 	beq.w	8002a50 <_dtoa_r+0x518>
 80028e2:	2200      	movs	r2, #0
 80028e4:	4b85      	ldr	r3, [pc, #532]	@ (8002afc <_dtoa_r+0x5c4>)
 80028e6:	4620      	mov	r0, r4
 80028e8:	4629      	mov	r1, r5
 80028ea:	f7fe f8db 	bl	8000aa4 <__aeabi_dcmplt>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	f000 80ae 	beq.w	8002a50 <_dtoa_r+0x518>
 80028f4:	9b07      	ldr	r3, [sp, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80aa 	beq.w	8002a50 <_dtoa_r+0x518>
 80028fc:	9b00      	ldr	r3, [sp, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	dd37      	ble.n	8002972 <_dtoa_r+0x43a>
 8002902:	1e7b      	subs	r3, r7, #1
 8002904:	4620      	mov	r0, r4
 8002906:	2200      	movs	r2, #0
 8002908:	4629      	mov	r1, r5
 800290a:	9304      	str	r3, [sp, #16]
 800290c:	3601      	adds	r6, #1
 800290e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b00 <_dtoa_r+0x5c8>)
 8002910:	f7fd fe56 	bl	80005c0 <__aeabi_dmul>
 8002914:	9c00      	ldr	r4, [sp, #0]
 8002916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800291a:	4630      	mov	r0, r6
 800291c:	f7fd fde6 	bl	80004ec <__aeabi_i2d>
 8002920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002924:	f7fd fe4c 	bl	80005c0 <__aeabi_dmul>
 8002928:	2200      	movs	r2, #0
 800292a:	4b76      	ldr	r3, [pc, #472]	@ (8002b04 <_dtoa_r+0x5cc>)
 800292c:	f7fd fc92 	bl	8000254 <__adddf3>
 8002930:	4605      	mov	r5, r0
 8002932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8002936:	2c00      	cmp	r4, #0
 8002938:	f040 808d 	bne.w	8002a56 <_dtoa_r+0x51e>
 800293c:	2200      	movs	r2, #0
 800293e:	4b72      	ldr	r3, [pc, #456]	@ (8002b08 <_dtoa_r+0x5d0>)
 8002940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002944:	f7fd fc84 	bl	8000250 <__aeabi_dsub>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002950:	462a      	mov	r2, r5
 8002952:	4633      	mov	r3, r6
 8002954:	f7fe f8c4 	bl	8000ae0 <__aeabi_dcmpgt>
 8002958:	2800      	cmp	r0, #0
 800295a:	f040 828b 	bne.w	8002e74 <_dtoa_r+0x93c>
 800295e:	462a      	mov	r2, r5
 8002960:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002968:	f7fe f89c 	bl	8000aa4 <__aeabi_dcmplt>
 800296c:	2800      	cmp	r0, #0
 800296e:	f040 8128 	bne.w	8002bc2 <_dtoa_r+0x68a>
 8002972:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8002976:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800297a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800297c:	2b00      	cmp	r3, #0
 800297e:	f2c0 815a 	blt.w	8002c36 <_dtoa_r+0x6fe>
 8002982:	2f0e      	cmp	r7, #14
 8002984:	f300 8157 	bgt.w	8002c36 <_dtoa_r+0x6fe>
 8002988:	4b5a      	ldr	r3, [pc, #360]	@ (8002af4 <_dtoa_r+0x5bc>)
 800298a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800298e:	ed93 7b00 	vldr	d7, [r3]
 8002992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002994:	2b00      	cmp	r3, #0
 8002996:	ed8d 7b00 	vstr	d7, [sp]
 800299a:	da03      	bge.n	80029a4 <_dtoa_r+0x46c>
 800299c:	9b07      	ldr	r3, [sp, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f340 8101 	ble.w	8002ba6 <_dtoa_r+0x66e>
 80029a4:	4656      	mov	r6, sl
 80029a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80029aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80029ae:	4620      	mov	r0, r4
 80029b0:	4629      	mov	r1, r5
 80029b2:	f7fd ff2f 	bl	8000814 <__aeabi_ddiv>
 80029b6:	f7fe f8b3 	bl	8000b20 <__aeabi_d2iz>
 80029ba:	4680      	mov	r8, r0
 80029bc:	f7fd fd96 	bl	80004ec <__aeabi_i2d>
 80029c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80029c4:	f7fd fdfc 	bl	80005c0 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4620      	mov	r0, r4
 80029cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80029d0:	460b      	mov	r3, r1
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fc3c 	bl	8000250 <__aeabi_dsub>
 80029d8:	9d07      	ldr	r5, [sp, #28]
 80029da:	f806 4b01 	strb.w	r4, [r6], #1
 80029de:	eba6 040a 	sub.w	r4, r6, sl
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	42a5      	cmp	r5, r4
 80029e8:	f040 8117 	bne.w	8002c1a <_dtoa_r+0x6e2>
 80029ec:	f7fd fc32 	bl	8000254 <__adddf3>
 80029f0:	4604      	mov	r4, r0
 80029f2:	460d      	mov	r5, r1
 80029f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80029f8:	f7fe f872 	bl	8000ae0 <__aeabi_dcmpgt>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	f040 80f9 	bne.w	8002bf4 <_dtoa_r+0x6bc>
 8002a02:	4620      	mov	r0, r4
 8002a04:	4629      	mov	r1, r5
 8002a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a0a:	f7fe f841 	bl	8000a90 <__aeabi_dcmpeq>
 8002a0e:	b118      	cbz	r0, 8002a18 <_dtoa_r+0x4e0>
 8002a10:	f018 0f01 	tst.w	r8, #1
 8002a14:	f040 80ee 	bne.w	8002bf4 <_dtoa_r+0x6bc>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	4658      	mov	r0, fp
 8002a1c:	f000 fc90 	bl	8003340 <_Bfree>
 8002a20:	2300      	movs	r3, #0
 8002a22:	3701      	adds	r7, #1
 8002a24:	7033      	strb	r3, [r6, #0]
 8002a26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002a28:	601f      	str	r7, [r3, #0]
 8002a2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 831d 	beq.w	800306c <_dtoa_r+0xb34>
 8002a32:	601e      	str	r6, [r3, #0]
 8002a34:	e31a      	b.n	800306c <_dtoa_r+0xb34>
 8002a36:	07e2      	lsls	r2, r4, #31
 8002a38:	d505      	bpl.n	8002a46 <_dtoa_r+0x50e>
 8002a3a:	3601      	adds	r6, #1
 8002a3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002a40:	f7fd fdbe 	bl	80005c0 <__aeabi_dmul>
 8002a44:	2301      	movs	r3, #1
 8002a46:	1064      	asrs	r4, r4, #1
 8002a48:	3508      	adds	r5, #8
 8002a4a:	e73f      	b.n	80028cc <_dtoa_r+0x394>
 8002a4c:	2602      	movs	r6, #2
 8002a4e:	e742      	b.n	80028d6 <_dtoa_r+0x39e>
 8002a50:	9c07      	ldr	r4, [sp, #28]
 8002a52:	9704      	str	r7, [sp, #16]
 8002a54:	e761      	b.n	800291a <_dtoa_r+0x3e2>
 8002a56:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <_dtoa_r+0x5bc>)
 8002a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002a5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002a5e:	4454      	add	r4, sl
 8002a60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002a64:	2900      	cmp	r1, #0
 8002a66:	d053      	beq.n	8002b10 <_dtoa_r+0x5d8>
 8002a68:	2000      	movs	r0, #0
 8002a6a:	4928      	ldr	r1, [pc, #160]	@ (8002b0c <_dtoa_r+0x5d4>)
 8002a6c:	f7fd fed2 	bl	8000814 <__aeabi_ddiv>
 8002a70:	4633      	mov	r3, r6
 8002a72:	4656      	mov	r6, sl
 8002a74:	462a      	mov	r2, r5
 8002a76:	f7fd fbeb 	bl	8000250 <__aeabi_dsub>
 8002a7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a82:	f7fe f84d 	bl	8000b20 <__aeabi_d2iz>
 8002a86:	4605      	mov	r5, r0
 8002a88:	f7fd fd30 	bl	80004ec <__aeabi_i2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	3530      	adds	r5, #48	@ 0x30
 8002a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a96:	f7fd fbdb 	bl	8000250 <__aeabi_dsub>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	f806 5b01 	strb.w	r5, [r6], #1
 8002aa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002aa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002aaa:	f7fd fffb 	bl	8000aa4 <__aeabi_dcmplt>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d171      	bne.n	8002b96 <_dtoa_r+0x65e>
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	4911      	ldr	r1, [pc, #68]	@ (8002afc <_dtoa_r+0x5c4>)
 8002ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002aba:	f7fd fbc9 	bl	8000250 <__aeabi_dsub>
 8002abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002ac2:	f7fd ffef 	bl	8000aa4 <__aeabi_dcmplt>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	f040 8095 	bne.w	8002bf6 <_dtoa_r+0x6be>
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	f43f af50 	beq.w	8002972 <_dtoa_r+0x43a>
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <_dtoa_r+0x5c8>)
 8002ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002ada:	f7fd fd71 	bl	80005c0 <__aeabi_dmul>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <_dtoa_r+0x5c8>)
 8002ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002aea:	f7fd fd69 	bl	80005c0 <__aeabi_dmul>
 8002aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002af2:	e7c4      	b.n	8002a7e <_dtoa_r+0x546>
 8002af4:	08004640 	.word	0x08004640
 8002af8:	08004618 	.word	0x08004618
 8002afc:	3ff00000 	.word	0x3ff00000
 8002b00:	40240000 	.word	0x40240000
 8002b04:	401c0000 	.word	0x401c0000
 8002b08:	40140000 	.word	0x40140000
 8002b0c:	3fe00000 	.word	0x3fe00000
 8002b10:	4631      	mov	r1, r6
 8002b12:	4656      	mov	r6, sl
 8002b14:	4628      	mov	r0, r5
 8002b16:	f7fd fd53 	bl	80005c0 <__aeabi_dmul>
 8002b1a:	9415      	str	r4, [sp, #84]	@ 0x54
 8002b1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b24:	f7fd fffc 	bl	8000b20 <__aeabi_d2iz>
 8002b28:	4605      	mov	r5, r0
 8002b2a:	f7fd fcdf 	bl	80004ec <__aeabi_i2d>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	3530      	adds	r5, #48	@ 0x30
 8002b32:	460b      	mov	r3, r1
 8002b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b38:	f7fd fb8a 	bl	8000250 <__aeabi_dsub>
 8002b3c:	f806 5b01 	strb.w	r5, [r6], #1
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	d124      	bne.n	8002b9a <_dtoa_r+0x662>
 8002b50:	4bac      	ldr	r3, [pc, #688]	@ (8002e04 <_dtoa_r+0x8cc>)
 8002b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002b56:	f7fd fb7d 	bl	8000254 <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b62:	f7fd ffbd 	bl	8000ae0 <__aeabi_dcmpgt>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d145      	bne.n	8002bf6 <_dtoa_r+0x6be>
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	49a5      	ldr	r1, [pc, #660]	@ (8002e04 <_dtoa_r+0x8cc>)
 8002b6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002b72:	f7fd fb6d 	bl	8000250 <__aeabi_dsub>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b7e:	f7fd ff91 	bl	8000aa4 <__aeabi_dcmplt>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	f43f aef5 	beq.w	8002972 <_dtoa_r+0x43a>
 8002b88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8002b8a:	1e73      	subs	r3, r6, #1
 8002b8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8002b8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002b92:	2b30      	cmp	r3, #48	@ 0x30
 8002b94:	d0f8      	beq.n	8002b88 <_dtoa_r+0x650>
 8002b96:	9f04      	ldr	r7, [sp, #16]
 8002b98:	e73e      	b.n	8002a18 <_dtoa_r+0x4e0>
 8002b9a:	4b9b      	ldr	r3, [pc, #620]	@ (8002e08 <_dtoa_r+0x8d0>)
 8002b9c:	f7fd fd10 	bl	80005c0 <__aeabi_dmul>
 8002ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ba4:	e7bc      	b.n	8002b20 <_dtoa_r+0x5e8>
 8002ba6:	d10c      	bne.n	8002bc2 <_dtoa_r+0x68a>
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4b98      	ldr	r3, [pc, #608]	@ (8002e0c <_dtoa_r+0x8d4>)
 8002bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bb0:	f7fd fd06 	bl	80005c0 <__aeabi_dmul>
 8002bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002bb8:	f7fd ff88 	bl	8000acc <__aeabi_dcmpge>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	f000 8157 	beq.w	8002e70 <_dtoa_r+0x938>
 8002bc2:	2400      	movs	r4, #0
 8002bc4:	4625      	mov	r5, r4
 8002bc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002bc8:	4656      	mov	r6, sl
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	9304      	str	r3, [sp, #16]
 8002bce:	2700      	movs	r7, #0
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	4658      	mov	r0, fp
 8002bd4:	f000 fbb4 	bl	8003340 <_Bfree>
 8002bd8:	2d00      	cmp	r5, #0
 8002bda:	d0dc      	beq.n	8002b96 <_dtoa_r+0x65e>
 8002bdc:	b12f      	cbz	r7, 8002bea <_dtoa_r+0x6b2>
 8002bde:	42af      	cmp	r7, r5
 8002be0:	d003      	beq.n	8002bea <_dtoa_r+0x6b2>
 8002be2:	4639      	mov	r1, r7
 8002be4:	4658      	mov	r0, fp
 8002be6:	f000 fbab 	bl	8003340 <_Bfree>
 8002bea:	4629      	mov	r1, r5
 8002bec:	4658      	mov	r0, fp
 8002bee:	f000 fba7 	bl	8003340 <_Bfree>
 8002bf2:	e7d0      	b.n	8002b96 <_dtoa_r+0x65e>
 8002bf4:	9704      	str	r7, [sp, #16]
 8002bf6:	4633      	mov	r3, r6
 8002bf8:	461e      	mov	r6, r3
 8002bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002bfe:	2a39      	cmp	r2, #57	@ 0x39
 8002c00:	d107      	bne.n	8002c12 <_dtoa_r+0x6da>
 8002c02:	459a      	cmp	sl, r3
 8002c04:	d1f8      	bne.n	8002bf8 <_dtoa_r+0x6c0>
 8002c06:	9a04      	ldr	r2, [sp, #16]
 8002c08:	3201      	adds	r2, #1
 8002c0a:	9204      	str	r2, [sp, #16]
 8002c0c:	2230      	movs	r2, #48	@ 0x30
 8002c0e:	f88a 2000 	strb.w	r2, [sl]
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	3201      	adds	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e7bd      	b.n	8002b96 <_dtoa_r+0x65e>
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e08 <_dtoa_r+0x8d0>)
 8002c1e:	f7fd fccf 	bl	80005c0 <__aeabi_dmul>
 8002c22:	2200      	movs	r2, #0
 8002c24:	2300      	movs	r3, #0
 8002c26:	4604      	mov	r4, r0
 8002c28:	460d      	mov	r5, r1
 8002c2a:	f7fd ff31 	bl	8000a90 <__aeabi_dcmpeq>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	f43f aebb 	beq.w	80029aa <_dtoa_r+0x472>
 8002c34:	e6f0      	b.n	8002a18 <_dtoa_r+0x4e0>
 8002c36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	f000 80db 	beq.w	8002df4 <_dtoa_r+0x8bc>
 8002c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c40:	2a01      	cmp	r2, #1
 8002c42:	f300 80bf 	bgt.w	8002dc4 <_dtoa_r+0x88c>
 8002c46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	f000 80b7 	beq.w	8002dbc <_dtoa_r+0x884>
 8002c4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8002c52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002c54:	4646      	mov	r6, r8
 8002c56:	9a08      	ldr	r2, [sp, #32]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4658      	mov	r0, fp
 8002c5c:	4498      	add	r8, r3
 8002c5e:	441a      	add	r2, r3
 8002c60:	9208      	str	r2, [sp, #32]
 8002c62:	f000 fc23 	bl	80034ac <__i2b>
 8002c66:	4605      	mov	r5, r0
 8002c68:	b15e      	cbz	r6, 8002c82 <_dtoa_r+0x74a>
 8002c6a:	9b08      	ldr	r3, [sp, #32]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	dd08      	ble.n	8002c82 <_dtoa_r+0x74a>
 8002c70:	42b3      	cmp	r3, r6
 8002c72:	9a08      	ldr	r2, [sp, #32]
 8002c74:	bfa8      	it	ge
 8002c76:	4633      	movge	r3, r6
 8002c78:	eba8 0803 	sub.w	r8, r8, r3
 8002c7c:	1af6      	subs	r6, r6, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	9308      	str	r3, [sp, #32]
 8002c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c84:	b1f3      	cbz	r3, 8002cc4 <_dtoa_r+0x78c>
 8002c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80b7 	beq.w	8002dfc <_dtoa_r+0x8c4>
 8002c8e:	b18c      	cbz	r4, 8002cb4 <_dtoa_r+0x77c>
 8002c90:	4629      	mov	r1, r5
 8002c92:	4622      	mov	r2, r4
 8002c94:	4658      	mov	r0, fp
 8002c96:	f000 fcc9 	bl	800362c <__pow5mult>
 8002c9a:	464a      	mov	r2, r9
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	4605      	mov	r5, r0
 8002ca0:	4658      	mov	r0, fp
 8002ca2:	f000 fc19 	bl	80034d8 <__multiply>
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	9004      	str	r0, [sp, #16]
 8002caa:	4658      	mov	r0, fp
 8002cac:	f000 fb48 	bl	8003340 <_Bfree>
 8002cb0:	9b04      	ldr	r3, [sp, #16]
 8002cb2:	4699      	mov	r9, r3
 8002cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cb6:	1b1a      	subs	r2, r3, r4
 8002cb8:	d004      	beq.n	8002cc4 <_dtoa_r+0x78c>
 8002cba:	4649      	mov	r1, r9
 8002cbc:	4658      	mov	r0, fp
 8002cbe:	f000 fcb5 	bl	800362c <__pow5mult>
 8002cc2:	4681      	mov	r9, r0
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4658      	mov	r0, fp
 8002cc8:	f000 fbf0 	bl	80034ac <__i2b>
 8002ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002cce:	4604      	mov	r4, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 81cf 	beq.w	8003074 <_dtoa_r+0xb3c>
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4658      	mov	r0, fp
 8002cdc:	f000 fca6 	bl	800362c <__pow5mult>
 8002ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f300 8095 	bgt.w	8002e14 <_dtoa_r+0x8dc>
 8002cea:	9b02      	ldr	r3, [sp, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 8087 	bne.w	8002e00 <_dtoa_r+0x8c8>
 8002cf2:	9b03      	ldr	r3, [sp, #12]
 8002cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 8089 	bne.w	8002e10 <_dtoa_r+0x8d8>
 8002cfe:	9b03      	ldr	r3, [sp, #12]
 8002d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d04:	0d1b      	lsrs	r3, r3, #20
 8002d06:	051b      	lsls	r3, r3, #20
 8002d08:	b12b      	cbz	r3, 8002d16 <_dtoa_r+0x7de>
 8002d0a:	9b08      	ldr	r3, [sp, #32]
 8002d0c:	f108 0801 	add.w	r8, r8, #1
 8002d10:	3301      	adds	r3, #1
 8002d12:	9308      	str	r3, [sp, #32]
 8002d14:	2301      	movs	r3, #1
 8002d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 81b0 	beq.w	8003080 <_dtoa_r+0xb48>
 8002d20:	6923      	ldr	r3, [r4, #16]
 8002d22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d26:	6918      	ldr	r0, [r3, #16]
 8002d28:	f000 fb74 	bl	8003414 <__hi0bits>
 8002d2c:	f1c0 0020 	rsb	r0, r0, #32
 8002d30:	9b08      	ldr	r3, [sp, #32]
 8002d32:	4418      	add	r0, r3
 8002d34:	f010 001f 	ands.w	r0, r0, #31
 8002d38:	d077      	beq.n	8002e2a <_dtoa_r+0x8f2>
 8002d3a:	f1c0 0320 	rsb	r3, r0, #32
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	dd6b      	ble.n	8002e1a <_dtoa_r+0x8e2>
 8002d42:	f1c0 001c 	rsb	r0, r0, #28
 8002d46:	9b08      	ldr	r3, [sp, #32]
 8002d48:	4480      	add	r8, r0
 8002d4a:	4403      	add	r3, r0
 8002d4c:	4406      	add	r6, r0
 8002d4e:	9308      	str	r3, [sp, #32]
 8002d50:	f1b8 0f00 	cmp.w	r8, #0
 8002d54:	dd05      	ble.n	8002d62 <_dtoa_r+0x82a>
 8002d56:	4649      	mov	r1, r9
 8002d58:	4642      	mov	r2, r8
 8002d5a:	4658      	mov	r0, fp
 8002d5c:	f000 fcc0 	bl	80036e0 <__lshift>
 8002d60:	4681      	mov	r9, r0
 8002d62:	9b08      	ldr	r3, [sp, #32]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	dd05      	ble.n	8002d74 <_dtoa_r+0x83c>
 8002d68:	4621      	mov	r1, r4
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4658      	mov	r0, fp
 8002d6e:	f000 fcb7 	bl	80036e0 <__lshift>
 8002d72:	4604      	mov	r4, r0
 8002d74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d059      	beq.n	8002e2e <_dtoa_r+0x8f6>
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	4648      	mov	r0, r9
 8002d7e:	f000 fd1b 	bl	80037b8 <__mcmp>
 8002d82:	2800      	cmp	r0, #0
 8002d84:	da53      	bge.n	8002e2e <_dtoa_r+0x8f6>
 8002d86:	1e7b      	subs	r3, r7, #1
 8002d88:	4649      	mov	r1, r9
 8002d8a:	220a      	movs	r2, #10
 8002d8c:	4658      	mov	r0, fp
 8002d8e:	9304      	str	r3, [sp, #16]
 8002d90:	2300      	movs	r3, #0
 8002d92:	f000 faf7 	bl	8003384 <__multadd>
 8002d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002d98:	4681      	mov	r9, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8172 	beq.w	8003084 <_dtoa_r+0xb4c>
 8002da0:	2300      	movs	r3, #0
 8002da2:	4629      	mov	r1, r5
 8002da4:	220a      	movs	r2, #10
 8002da6:	4658      	mov	r0, fp
 8002da8:	f000 faec 	bl	8003384 <__multadd>
 8002dac:	9b00      	ldr	r3, [sp, #0]
 8002dae:	4605      	mov	r5, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	dc67      	bgt.n	8002e84 <_dtoa_r+0x94c>
 8002db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	dc41      	bgt.n	8002e3e <_dtoa_r+0x906>
 8002dba:	e063      	b.n	8002e84 <_dtoa_r+0x94c>
 8002dbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002dbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8002dc2:	e746      	b.n	8002c52 <_dtoa_r+0x71a>
 8002dc4:	9b07      	ldr	r3, [sp, #28]
 8002dc6:	1e5c      	subs	r4, r3, #1
 8002dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002dca:	42a3      	cmp	r3, r4
 8002dcc:	bfb7      	itett	lt
 8002dce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8002dd0:	1b1c      	subge	r4, r3, r4
 8002dd2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8002dd4:	1ae3      	sublt	r3, r4, r3
 8002dd6:	bfbe      	ittt	lt
 8002dd8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8002dda:	2400      	movlt	r4, #0
 8002ddc:	18d2      	addlt	r2, r2, r3
 8002dde:	9b07      	ldr	r3, [sp, #28]
 8002de0:	bfb8      	it	lt
 8002de2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bfb5      	itete	lt
 8002de8:	eba8 0603 	sublt.w	r6, r8, r3
 8002dec:	4646      	movge	r6, r8
 8002dee:	2300      	movlt	r3, #0
 8002df0:	9b07      	ldrge	r3, [sp, #28]
 8002df2:	e730      	b.n	8002c56 <_dtoa_r+0x71e>
 8002df4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002df6:	4646      	mov	r6, r8
 8002df8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8002dfa:	e735      	b.n	8002c68 <_dtoa_r+0x730>
 8002dfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002dfe:	e75c      	b.n	8002cba <_dtoa_r+0x782>
 8002e00:	2300      	movs	r3, #0
 8002e02:	e788      	b.n	8002d16 <_dtoa_r+0x7de>
 8002e04:	3fe00000 	.word	0x3fe00000
 8002e08:	40240000 	.word	0x40240000
 8002e0c:	40140000 	.word	0x40140000
 8002e10:	9b02      	ldr	r3, [sp, #8]
 8002e12:	e780      	b.n	8002d16 <_dtoa_r+0x7de>
 8002e14:	2300      	movs	r3, #0
 8002e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e18:	e782      	b.n	8002d20 <_dtoa_r+0x7e8>
 8002e1a:	d099      	beq.n	8002d50 <_dtoa_r+0x818>
 8002e1c:	331c      	adds	r3, #28
 8002e1e:	9a08      	ldr	r2, [sp, #32]
 8002e20:	441a      	add	r2, r3
 8002e22:	4498      	add	r8, r3
 8002e24:	441e      	add	r6, r3
 8002e26:	9208      	str	r2, [sp, #32]
 8002e28:	e792      	b.n	8002d50 <_dtoa_r+0x818>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	e7f6      	b.n	8002e1c <_dtoa_r+0x8e4>
 8002e2e:	9b07      	ldr	r3, [sp, #28]
 8002e30:	9704      	str	r7, [sp, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	dc20      	bgt.n	8002e78 <_dtoa_r+0x940>
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	dd1e      	ble.n	8002e7c <_dtoa_r+0x944>
 8002e3e:	9b00      	ldr	r3, [sp, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f aec0 	bne.w	8002bc6 <_dtoa_r+0x68e>
 8002e46:	4621      	mov	r1, r4
 8002e48:	2205      	movs	r2, #5
 8002e4a:	4658      	mov	r0, fp
 8002e4c:	f000 fa9a 	bl	8003384 <__multadd>
 8002e50:	4601      	mov	r1, r0
 8002e52:	4604      	mov	r4, r0
 8002e54:	4648      	mov	r0, r9
 8002e56:	f000 fcaf 	bl	80037b8 <__mcmp>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	f77f aeb3 	ble.w	8002bc6 <_dtoa_r+0x68e>
 8002e60:	2331      	movs	r3, #49	@ 0x31
 8002e62:	4656      	mov	r6, sl
 8002e64:	f806 3b01 	strb.w	r3, [r6], #1
 8002e68:	9b04      	ldr	r3, [sp, #16]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	9304      	str	r3, [sp, #16]
 8002e6e:	e6ae      	b.n	8002bce <_dtoa_r+0x696>
 8002e70:	9c07      	ldr	r4, [sp, #28]
 8002e72:	9704      	str	r7, [sp, #16]
 8002e74:	4625      	mov	r5, r4
 8002e76:	e7f3      	b.n	8002e60 <_dtoa_r+0x928>
 8002e78:	9b07      	ldr	r3, [sp, #28]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8104 	beq.w	800308c <_dtoa_r+0xb54>
 8002e84:	2e00      	cmp	r6, #0
 8002e86:	dd05      	ble.n	8002e94 <_dtoa_r+0x95c>
 8002e88:	4629      	mov	r1, r5
 8002e8a:	4632      	mov	r2, r6
 8002e8c:	4658      	mov	r0, fp
 8002e8e:	f000 fc27 	bl	80036e0 <__lshift>
 8002e92:	4605      	mov	r5, r0
 8002e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d05a      	beq.n	8002f50 <_dtoa_r+0xa18>
 8002e9a:	6869      	ldr	r1, [r5, #4]
 8002e9c:	4658      	mov	r0, fp
 8002e9e:	f000 fa0f 	bl	80032c0 <_Balloc>
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	b928      	cbnz	r0, 8002eb2 <_dtoa_r+0x97a>
 8002ea6:	4b84      	ldr	r3, [pc, #528]	@ (80030b8 <_dtoa_r+0xb80>)
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8002eae:	f7ff bb5a 	b.w	8002566 <_dtoa_r+0x2e>
 8002eb2:	692a      	ldr	r2, [r5, #16]
 8002eb4:	f105 010c 	add.w	r1, r5, #12
 8002eb8:	300c      	adds	r0, #12
 8002eba:	3202      	adds	r2, #2
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	f000 ffb5 	bl	8003e2c <memcpy>
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4631      	mov	r1, r6
 8002ec6:	4658      	mov	r0, fp
 8002ec8:	f000 fc0a 	bl	80036e0 <__lshift>
 8002ecc:	f10a 0301 	add.w	r3, sl, #1
 8002ed0:	462f      	mov	r7, r5
 8002ed2:	4605      	mov	r5, r0
 8002ed4:	9307      	str	r3, [sp, #28]
 8002ed6:	9b00      	ldr	r3, [sp, #0]
 8002ed8:	4453      	add	r3, sl
 8002eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002edc:	9b02      	ldr	r3, [sp, #8]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ee4:	9b07      	ldr	r3, [sp, #28]
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4648      	mov	r0, r9
 8002eea:	3b01      	subs	r3, #1
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f7ff fa94 	bl	800241a <quorem>
 8002ef2:	4639      	mov	r1, r7
 8002ef4:	9002      	str	r0, [sp, #8]
 8002ef6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8002efa:	4648      	mov	r0, r9
 8002efc:	f000 fc5c 	bl	80037b8 <__mcmp>
 8002f00:	462a      	mov	r2, r5
 8002f02:	9008      	str	r0, [sp, #32]
 8002f04:	4621      	mov	r1, r4
 8002f06:	4658      	mov	r0, fp
 8002f08:	f000 fc72 	bl	80037f0 <__mdiff>
 8002f0c:	68c2      	ldr	r2, [r0, #12]
 8002f0e:	4606      	mov	r6, r0
 8002f10:	bb02      	cbnz	r2, 8002f54 <_dtoa_r+0xa1c>
 8002f12:	4601      	mov	r1, r0
 8002f14:	4648      	mov	r0, r9
 8002f16:	f000 fc4f 	bl	80037b8 <__mcmp>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4631      	mov	r1, r6
 8002f1e:	4658      	mov	r0, fp
 8002f20:	920e      	str	r2, [sp, #56]	@ 0x38
 8002f22:	f000 fa0d 	bl	8003340 <_Bfree>
 8002f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002f2a:	9e07      	ldr	r6, [sp, #28]
 8002f2c:	ea43 0102 	orr.w	r1, r3, r2
 8002f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f32:	4319      	orrs	r1, r3
 8002f34:	d110      	bne.n	8002f58 <_dtoa_r+0xa20>
 8002f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002f3a:	d029      	beq.n	8002f90 <_dtoa_r+0xa58>
 8002f3c:	9b08      	ldr	r3, [sp, #32]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	dd02      	ble.n	8002f48 <_dtoa_r+0xa10>
 8002f42:	9b02      	ldr	r3, [sp, #8]
 8002f44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8002f48:	9b00      	ldr	r3, [sp, #0]
 8002f4a:	f883 8000 	strb.w	r8, [r3]
 8002f4e:	e63f      	b.n	8002bd0 <_dtoa_r+0x698>
 8002f50:	4628      	mov	r0, r5
 8002f52:	e7bb      	b.n	8002ecc <_dtoa_r+0x994>
 8002f54:	2201      	movs	r2, #1
 8002f56:	e7e1      	b.n	8002f1c <_dtoa_r+0x9e4>
 8002f58:	9b08      	ldr	r3, [sp, #32]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db04      	blt.n	8002f68 <_dtoa_r+0xa30>
 8002f5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002f60:	430b      	orrs	r3, r1
 8002f62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002f64:	430b      	orrs	r3, r1
 8002f66:	d120      	bne.n	8002faa <_dtoa_r+0xa72>
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	dded      	ble.n	8002f48 <_dtoa_r+0xa10>
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4658      	mov	r0, fp
 8002f72:	f000 fbb5 	bl	80036e0 <__lshift>
 8002f76:	4621      	mov	r1, r4
 8002f78:	4681      	mov	r9, r0
 8002f7a:	f000 fc1d 	bl	80037b8 <__mcmp>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	dc03      	bgt.n	8002f8a <_dtoa_r+0xa52>
 8002f82:	d1e1      	bne.n	8002f48 <_dtoa_r+0xa10>
 8002f84:	f018 0f01 	tst.w	r8, #1
 8002f88:	d0de      	beq.n	8002f48 <_dtoa_r+0xa10>
 8002f8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002f8e:	d1d8      	bne.n	8002f42 <_dtoa_r+0xa0a>
 8002f90:	2339      	movs	r3, #57	@ 0x39
 8002f92:	9a00      	ldr	r2, [sp, #0]
 8002f94:	7013      	strb	r3, [r2, #0]
 8002f96:	4633      	mov	r3, r6
 8002f98:	461e      	mov	r6, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8002fa0:	2a39      	cmp	r2, #57	@ 0x39
 8002fa2:	d052      	beq.n	800304a <_dtoa_r+0xb12>
 8002fa4:	3201      	adds	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e612      	b.n	8002bd0 <_dtoa_r+0x698>
 8002faa:	2a00      	cmp	r2, #0
 8002fac:	dd07      	ble.n	8002fbe <_dtoa_r+0xa86>
 8002fae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002fb2:	d0ed      	beq.n	8002f90 <_dtoa_r+0xa58>
 8002fb4:	f108 0301 	add.w	r3, r8, #1
 8002fb8:	9a00      	ldr	r2, [sp, #0]
 8002fba:	7013      	strb	r3, [r2, #0]
 8002fbc:	e608      	b.n	8002bd0 <_dtoa_r+0x698>
 8002fbe:	9b07      	ldr	r3, [sp, #28]
 8002fc0:	9a07      	ldr	r2, [sp, #28]
 8002fc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8002fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d028      	beq.n	800301e <_dtoa_r+0xae6>
 8002fcc:	4649      	mov	r1, r9
 8002fce:	2300      	movs	r3, #0
 8002fd0:	220a      	movs	r2, #10
 8002fd2:	4658      	mov	r0, fp
 8002fd4:	f000 f9d6 	bl	8003384 <__multadd>
 8002fd8:	42af      	cmp	r7, r5
 8002fda:	4681      	mov	r9, r0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	f04f 020a 	mov.w	r2, #10
 8002fe4:	4639      	mov	r1, r7
 8002fe6:	4658      	mov	r0, fp
 8002fe8:	d107      	bne.n	8002ffa <_dtoa_r+0xac2>
 8002fea:	f000 f9cb 	bl	8003384 <__multadd>
 8002fee:	4607      	mov	r7, r0
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	9b07      	ldr	r3, [sp, #28]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	9307      	str	r3, [sp, #28]
 8002ff8:	e774      	b.n	8002ee4 <_dtoa_r+0x9ac>
 8002ffa:	f000 f9c3 	bl	8003384 <__multadd>
 8002ffe:	4629      	mov	r1, r5
 8003000:	4607      	mov	r7, r0
 8003002:	2300      	movs	r3, #0
 8003004:	220a      	movs	r2, #10
 8003006:	4658      	mov	r0, fp
 8003008:	f000 f9bc 	bl	8003384 <__multadd>
 800300c:	4605      	mov	r5, r0
 800300e:	e7f0      	b.n	8002ff2 <_dtoa_r+0xaba>
 8003010:	9b00      	ldr	r3, [sp, #0]
 8003012:	2700      	movs	r7, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	bfcc      	ite	gt
 8003018:	461e      	movgt	r6, r3
 800301a:	2601      	movle	r6, #1
 800301c:	4456      	add	r6, sl
 800301e:	4649      	mov	r1, r9
 8003020:	2201      	movs	r2, #1
 8003022:	4658      	mov	r0, fp
 8003024:	f000 fb5c 	bl	80036e0 <__lshift>
 8003028:	4621      	mov	r1, r4
 800302a:	4681      	mov	r9, r0
 800302c:	f000 fbc4 	bl	80037b8 <__mcmp>
 8003030:	2800      	cmp	r0, #0
 8003032:	dcb0      	bgt.n	8002f96 <_dtoa_r+0xa5e>
 8003034:	d102      	bne.n	800303c <_dtoa_r+0xb04>
 8003036:	f018 0f01 	tst.w	r8, #1
 800303a:	d1ac      	bne.n	8002f96 <_dtoa_r+0xa5e>
 800303c:	4633      	mov	r3, r6
 800303e:	461e      	mov	r6, r3
 8003040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003044:	2a30      	cmp	r2, #48	@ 0x30
 8003046:	d0fa      	beq.n	800303e <_dtoa_r+0xb06>
 8003048:	e5c2      	b.n	8002bd0 <_dtoa_r+0x698>
 800304a:	459a      	cmp	sl, r3
 800304c:	d1a4      	bne.n	8002f98 <_dtoa_r+0xa60>
 800304e:	9b04      	ldr	r3, [sp, #16]
 8003050:	3301      	adds	r3, #1
 8003052:	9304      	str	r3, [sp, #16]
 8003054:	2331      	movs	r3, #49	@ 0x31
 8003056:	f88a 3000 	strb.w	r3, [sl]
 800305a:	e5b9      	b.n	8002bd0 <_dtoa_r+0x698>
 800305c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800305e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80030bc <_dtoa_r+0xb84>
 8003062:	b11b      	cbz	r3, 800306c <_dtoa_r+0xb34>
 8003064:	f10a 0308 	add.w	r3, sl, #8
 8003068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4650      	mov	r0, sl
 800306e:	b019      	add	sp, #100	@ 0x64
 8003070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003076:	2b01      	cmp	r3, #1
 8003078:	f77f ae37 	ble.w	8002cea <_dtoa_r+0x7b2>
 800307c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800307e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003080:	2001      	movs	r0, #1
 8003082:	e655      	b.n	8002d30 <_dtoa_r+0x7f8>
 8003084:	9b00      	ldr	r3, [sp, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f77f aed6 	ble.w	8002e38 <_dtoa_r+0x900>
 800308c:	4656      	mov	r6, sl
 800308e:	4621      	mov	r1, r4
 8003090:	4648      	mov	r0, r9
 8003092:	f7ff f9c2 	bl	800241a <quorem>
 8003096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800309a:	9b00      	ldr	r3, [sp, #0]
 800309c:	f806 8b01 	strb.w	r8, [r6], #1
 80030a0:	eba6 020a 	sub.w	r2, r6, sl
 80030a4:	4293      	cmp	r3, r2
 80030a6:	ddb3      	ble.n	8003010 <_dtoa_r+0xad8>
 80030a8:	4649      	mov	r1, r9
 80030aa:	2300      	movs	r3, #0
 80030ac:	220a      	movs	r2, #10
 80030ae:	4658      	mov	r0, fp
 80030b0:	f000 f968 	bl	8003384 <__multadd>
 80030b4:	4681      	mov	r9, r0
 80030b6:	e7ea      	b.n	800308e <_dtoa_r+0xb56>
 80030b8:	0800459e 	.word	0x0800459e
 80030bc:	08004522 	.word	0x08004522

080030c0 <_free_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4605      	mov	r5, r0
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d041      	beq.n	800314c <_free_r+0x8c>
 80030c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030cc:	1f0c      	subs	r4, r1, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bfb8      	it	lt
 80030d2:	18e4      	addlt	r4, r4, r3
 80030d4:	f000 f8e8 	bl	80032a8 <__malloc_lock>
 80030d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003150 <_free_r+0x90>)
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	b933      	cbnz	r3, 80030ec <_free_r+0x2c>
 80030de:	6063      	str	r3, [r4, #4]
 80030e0:	6014      	str	r4, [r2, #0]
 80030e2:	4628      	mov	r0, r5
 80030e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030e8:	f000 b8e4 	b.w	80032b4 <__malloc_unlock>
 80030ec:	42a3      	cmp	r3, r4
 80030ee:	d908      	bls.n	8003102 <_free_r+0x42>
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	1821      	adds	r1, r4, r0
 80030f4:	428b      	cmp	r3, r1
 80030f6:	bf01      	itttt	eq
 80030f8:	6819      	ldreq	r1, [r3, #0]
 80030fa:	685b      	ldreq	r3, [r3, #4]
 80030fc:	1809      	addeq	r1, r1, r0
 80030fe:	6021      	streq	r1, [r4, #0]
 8003100:	e7ed      	b.n	80030de <_free_r+0x1e>
 8003102:	461a      	mov	r2, r3
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	b10b      	cbz	r3, 800310c <_free_r+0x4c>
 8003108:	42a3      	cmp	r3, r4
 800310a:	d9fa      	bls.n	8003102 <_free_r+0x42>
 800310c:	6811      	ldr	r1, [r2, #0]
 800310e:	1850      	adds	r0, r2, r1
 8003110:	42a0      	cmp	r0, r4
 8003112:	d10b      	bne.n	800312c <_free_r+0x6c>
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	4401      	add	r1, r0
 8003118:	1850      	adds	r0, r2, r1
 800311a:	6011      	str	r1, [r2, #0]
 800311c:	4283      	cmp	r3, r0
 800311e:	d1e0      	bne.n	80030e2 <_free_r+0x22>
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4408      	add	r0, r1
 8003126:	6053      	str	r3, [r2, #4]
 8003128:	6010      	str	r0, [r2, #0]
 800312a:	e7da      	b.n	80030e2 <_free_r+0x22>
 800312c:	d902      	bls.n	8003134 <_free_r+0x74>
 800312e:	230c      	movs	r3, #12
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	e7d6      	b.n	80030e2 <_free_r+0x22>
 8003134:	6820      	ldr	r0, [r4, #0]
 8003136:	1821      	adds	r1, r4, r0
 8003138:	428b      	cmp	r3, r1
 800313a:	bf02      	ittt	eq
 800313c:	6819      	ldreq	r1, [r3, #0]
 800313e:	685b      	ldreq	r3, [r3, #4]
 8003140:	1809      	addeq	r1, r1, r0
 8003142:	6063      	str	r3, [r4, #4]
 8003144:	bf08      	it	eq
 8003146:	6021      	streq	r1, [r4, #0]
 8003148:	6054      	str	r4, [r2, #4]
 800314a:	e7ca      	b.n	80030e2 <_free_r+0x22>
 800314c:	bd38      	pop	{r3, r4, r5, pc}
 800314e:	bf00      	nop
 8003150:	20000470 	.word	0x20000470

08003154 <malloc>:
 8003154:	4b02      	ldr	r3, [pc, #8]	@ (8003160 <malloc+0xc>)
 8003156:	4601      	mov	r1, r0
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	f000 b825 	b.w	80031a8 <_malloc_r>
 800315e:	bf00      	nop
 8003160:	20000010 	.word	0x20000010

08003164 <sbrk_aligned>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	4e0f      	ldr	r6, [pc, #60]	@ (80031a4 <sbrk_aligned+0x40>)
 8003168:	460c      	mov	r4, r1
 800316a:	4605      	mov	r5, r0
 800316c:	6831      	ldr	r1, [r6, #0]
 800316e:	b911      	cbnz	r1, 8003176 <sbrk_aligned+0x12>
 8003170:	f000 fe4c 	bl	8003e0c <_sbrk_r>
 8003174:	6030      	str	r0, [r6, #0]
 8003176:	4621      	mov	r1, r4
 8003178:	4628      	mov	r0, r5
 800317a:	f000 fe47 	bl	8003e0c <_sbrk_r>
 800317e:	1c43      	adds	r3, r0, #1
 8003180:	d103      	bne.n	800318a <sbrk_aligned+0x26>
 8003182:	f04f 34ff 	mov.w	r4, #4294967295
 8003186:	4620      	mov	r0, r4
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	1cc4      	adds	r4, r0, #3
 800318c:	f024 0403 	bic.w	r4, r4, #3
 8003190:	42a0      	cmp	r0, r4
 8003192:	d0f8      	beq.n	8003186 <sbrk_aligned+0x22>
 8003194:	1a21      	subs	r1, r4, r0
 8003196:	4628      	mov	r0, r5
 8003198:	f000 fe38 	bl	8003e0c <_sbrk_r>
 800319c:	3001      	adds	r0, #1
 800319e:	d1f2      	bne.n	8003186 <sbrk_aligned+0x22>
 80031a0:	e7ef      	b.n	8003182 <sbrk_aligned+0x1e>
 80031a2:	bf00      	nop
 80031a4:	2000046c 	.word	0x2000046c

080031a8 <_malloc_r>:
 80031a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ac:	1ccd      	adds	r5, r1, #3
 80031ae:	4606      	mov	r6, r0
 80031b0:	f025 0503 	bic.w	r5, r5, #3
 80031b4:	3508      	adds	r5, #8
 80031b6:	2d0c      	cmp	r5, #12
 80031b8:	bf38      	it	cc
 80031ba:	250c      	movcc	r5, #12
 80031bc:	2d00      	cmp	r5, #0
 80031be:	db01      	blt.n	80031c4 <_malloc_r+0x1c>
 80031c0:	42a9      	cmp	r1, r5
 80031c2:	d904      	bls.n	80031ce <_malloc_r+0x26>
 80031c4:	230c      	movs	r3, #12
 80031c6:	6033      	str	r3, [r6, #0]
 80031c8:	2000      	movs	r0, #0
 80031ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032a4 <_malloc_r+0xfc>
 80031d2:	f000 f869 	bl	80032a8 <__malloc_lock>
 80031d6:	f8d8 3000 	ldr.w	r3, [r8]
 80031da:	461c      	mov	r4, r3
 80031dc:	bb44      	cbnz	r4, 8003230 <_malloc_r+0x88>
 80031de:	4629      	mov	r1, r5
 80031e0:	4630      	mov	r0, r6
 80031e2:	f7ff ffbf 	bl	8003164 <sbrk_aligned>
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	4604      	mov	r4, r0
 80031ea:	d158      	bne.n	800329e <_malloc_r+0xf6>
 80031ec:	f8d8 4000 	ldr.w	r4, [r8]
 80031f0:	4627      	mov	r7, r4
 80031f2:	2f00      	cmp	r7, #0
 80031f4:	d143      	bne.n	800327e <_malloc_r+0xd6>
 80031f6:	2c00      	cmp	r4, #0
 80031f8:	d04b      	beq.n	8003292 <_malloc_r+0xea>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	4639      	mov	r1, r7
 80031fe:	4630      	mov	r0, r6
 8003200:	eb04 0903 	add.w	r9, r4, r3
 8003204:	f000 fe02 	bl	8003e0c <_sbrk_r>
 8003208:	4581      	cmp	r9, r0
 800320a:	d142      	bne.n	8003292 <_malloc_r+0xea>
 800320c:	6821      	ldr	r1, [r4, #0]
 800320e:	4630      	mov	r0, r6
 8003210:	1a6d      	subs	r5, r5, r1
 8003212:	4629      	mov	r1, r5
 8003214:	f7ff ffa6 	bl	8003164 <sbrk_aligned>
 8003218:	3001      	adds	r0, #1
 800321a:	d03a      	beq.n	8003292 <_malloc_r+0xea>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	442b      	add	r3, r5
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	f8d8 3000 	ldr.w	r3, [r8]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	bb62      	cbnz	r2, 8003284 <_malloc_r+0xdc>
 800322a:	f8c8 7000 	str.w	r7, [r8]
 800322e:	e00f      	b.n	8003250 <_malloc_r+0xa8>
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	1b52      	subs	r2, r2, r5
 8003234:	d420      	bmi.n	8003278 <_malloc_r+0xd0>
 8003236:	2a0b      	cmp	r2, #11
 8003238:	d917      	bls.n	800326a <_malloc_r+0xc2>
 800323a:	1961      	adds	r1, r4, r5
 800323c:	42a3      	cmp	r3, r4
 800323e:	6025      	str	r5, [r4, #0]
 8003240:	bf18      	it	ne
 8003242:	6059      	strne	r1, [r3, #4]
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	bf08      	it	eq
 8003248:	f8c8 1000 	streq.w	r1, [r8]
 800324c:	5162      	str	r2, [r4, r5]
 800324e:	604b      	str	r3, [r1, #4]
 8003250:	4630      	mov	r0, r6
 8003252:	f000 f82f 	bl	80032b4 <__malloc_unlock>
 8003256:	f104 000b 	add.w	r0, r4, #11
 800325a:	1d23      	adds	r3, r4, #4
 800325c:	f020 0007 	bic.w	r0, r0, #7
 8003260:	1ac2      	subs	r2, r0, r3
 8003262:	bf1c      	itt	ne
 8003264:	1a1b      	subne	r3, r3, r0
 8003266:	50a3      	strne	r3, [r4, r2]
 8003268:	e7af      	b.n	80031ca <_malloc_r+0x22>
 800326a:	6862      	ldr	r2, [r4, #4]
 800326c:	42a3      	cmp	r3, r4
 800326e:	bf0c      	ite	eq
 8003270:	f8c8 2000 	streq.w	r2, [r8]
 8003274:	605a      	strne	r2, [r3, #4]
 8003276:	e7eb      	b.n	8003250 <_malloc_r+0xa8>
 8003278:	4623      	mov	r3, r4
 800327a:	6864      	ldr	r4, [r4, #4]
 800327c:	e7ae      	b.n	80031dc <_malloc_r+0x34>
 800327e:	463c      	mov	r4, r7
 8003280:	687f      	ldr	r7, [r7, #4]
 8003282:	e7b6      	b.n	80031f2 <_malloc_r+0x4a>
 8003284:	461a      	mov	r2, r3
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	42a3      	cmp	r3, r4
 800328a:	d1fb      	bne.n	8003284 <_malloc_r+0xdc>
 800328c:	2300      	movs	r3, #0
 800328e:	6053      	str	r3, [r2, #4]
 8003290:	e7de      	b.n	8003250 <_malloc_r+0xa8>
 8003292:	230c      	movs	r3, #12
 8003294:	4630      	mov	r0, r6
 8003296:	6033      	str	r3, [r6, #0]
 8003298:	f000 f80c 	bl	80032b4 <__malloc_unlock>
 800329c:	e794      	b.n	80031c8 <_malloc_r+0x20>
 800329e:	6005      	str	r5, [r0, #0]
 80032a0:	e7d6      	b.n	8003250 <_malloc_r+0xa8>
 80032a2:	bf00      	nop
 80032a4:	20000470 	.word	0x20000470

080032a8 <__malloc_lock>:
 80032a8:	4801      	ldr	r0, [pc, #4]	@ (80032b0 <__malloc_lock+0x8>)
 80032aa:	f7ff b8a6 	b.w	80023fa <__retarget_lock_acquire_recursive>
 80032ae:	bf00      	nop
 80032b0:	20000468 	.word	0x20000468

080032b4 <__malloc_unlock>:
 80032b4:	4801      	ldr	r0, [pc, #4]	@ (80032bc <__malloc_unlock+0x8>)
 80032b6:	f7ff b8a1 	b.w	80023fc <__retarget_lock_release_recursive>
 80032ba:	bf00      	nop
 80032bc:	20000468 	.word	0x20000468

080032c0 <_Balloc>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	69c6      	ldr	r6, [r0, #28]
 80032c4:	4604      	mov	r4, r0
 80032c6:	460d      	mov	r5, r1
 80032c8:	b976      	cbnz	r6, 80032e8 <_Balloc+0x28>
 80032ca:	2010      	movs	r0, #16
 80032cc:	f7ff ff42 	bl	8003154 <malloc>
 80032d0:	4602      	mov	r2, r0
 80032d2:	61e0      	str	r0, [r4, #28]
 80032d4:	b920      	cbnz	r0, 80032e0 <_Balloc+0x20>
 80032d6:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <_Balloc+0x78>)
 80032d8:	216b      	movs	r1, #107	@ 0x6b
 80032da:	4818      	ldr	r0, [pc, #96]	@ (800333c <_Balloc+0x7c>)
 80032dc:	f000 fdb4 	bl	8003e48 <__assert_func>
 80032e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80032e4:	6006      	str	r6, [r0, #0]
 80032e6:	60c6      	str	r6, [r0, #12]
 80032e8:	69e6      	ldr	r6, [r4, #28]
 80032ea:	68f3      	ldr	r3, [r6, #12]
 80032ec:	b183      	cbz	r3, 8003310 <_Balloc+0x50>
 80032ee:	69e3      	ldr	r3, [r4, #28]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80032f6:	b9b8      	cbnz	r0, 8003328 <_Balloc+0x68>
 80032f8:	2101      	movs	r1, #1
 80032fa:	4620      	mov	r0, r4
 80032fc:	fa01 f605 	lsl.w	r6, r1, r5
 8003300:	1d72      	adds	r2, r6, #5
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	f000 fdbe 	bl	8003e84 <_calloc_r>
 8003308:	b160      	cbz	r0, 8003324 <_Balloc+0x64>
 800330a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800330e:	e00e      	b.n	800332e <_Balloc+0x6e>
 8003310:	2221      	movs	r2, #33	@ 0x21
 8003312:	2104      	movs	r1, #4
 8003314:	4620      	mov	r0, r4
 8003316:	f000 fdb5 	bl	8003e84 <_calloc_r>
 800331a:	69e3      	ldr	r3, [r4, #28]
 800331c:	60f0      	str	r0, [r6, #12]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e4      	bne.n	80032ee <_Balloc+0x2e>
 8003324:	2000      	movs	r0, #0
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	6802      	ldr	r2, [r0, #0]
 800332a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800332e:	2300      	movs	r3, #0
 8003330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003334:	e7f7      	b.n	8003326 <_Balloc+0x66>
 8003336:	bf00      	nop
 8003338:	0800452f 	.word	0x0800452f
 800333c:	080045af 	.word	0x080045af

08003340 <_Bfree>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	69c6      	ldr	r6, [r0, #28]
 8003344:	4605      	mov	r5, r0
 8003346:	460c      	mov	r4, r1
 8003348:	b976      	cbnz	r6, 8003368 <_Bfree+0x28>
 800334a:	2010      	movs	r0, #16
 800334c:	f7ff ff02 	bl	8003154 <malloc>
 8003350:	4602      	mov	r2, r0
 8003352:	61e8      	str	r0, [r5, #28]
 8003354:	b920      	cbnz	r0, 8003360 <_Bfree+0x20>
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <_Bfree+0x3c>)
 8003358:	218f      	movs	r1, #143	@ 0x8f
 800335a:	4809      	ldr	r0, [pc, #36]	@ (8003380 <_Bfree+0x40>)
 800335c:	f000 fd74 	bl	8003e48 <__assert_func>
 8003360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003364:	6006      	str	r6, [r0, #0]
 8003366:	60c6      	str	r6, [r0, #12]
 8003368:	b13c      	cbz	r4, 800337a <_Bfree+0x3a>
 800336a:	69eb      	ldr	r3, [r5, #28]
 800336c:	6862      	ldr	r2, [r4, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003374:	6021      	str	r1, [r4, #0]
 8003376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	0800452f 	.word	0x0800452f
 8003380:	080045af 	.word	0x080045af

08003384 <__multadd>:
 8003384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003388:	f101 0c14 	add.w	ip, r1, #20
 800338c:	4607      	mov	r7, r0
 800338e:	460c      	mov	r4, r1
 8003390:	461e      	mov	r6, r3
 8003392:	690d      	ldr	r5, [r1, #16]
 8003394:	2000      	movs	r0, #0
 8003396:	f8dc 3000 	ldr.w	r3, [ip]
 800339a:	3001      	adds	r0, #1
 800339c:	b299      	uxth	r1, r3
 800339e:	4285      	cmp	r5, r0
 80033a0:	fb02 6101 	mla	r1, r2, r1, r6
 80033a4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80033a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80033ac:	b289      	uxth	r1, r1
 80033ae:	fb02 3306 	mla	r3, r2, r6, r3
 80033b2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80033b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80033ba:	f84c 1b04 	str.w	r1, [ip], #4
 80033be:	dcea      	bgt.n	8003396 <__multadd+0x12>
 80033c0:	b30e      	cbz	r6, 8003406 <__multadd+0x82>
 80033c2:	68a3      	ldr	r3, [r4, #8]
 80033c4:	42ab      	cmp	r3, r5
 80033c6:	dc19      	bgt.n	80033fc <__multadd+0x78>
 80033c8:	6861      	ldr	r1, [r4, #4]
 80033ca:	4638      	mov	r0, r7
 80033cc:	3101      	adds	r1, #1
 80033ce:	f7ff ff77 	bl	80032c0 <_Balloc>
 80033d2:	4680      	mov	r8, r0
 80033d4:	b928      	cbnz	r0, 80033e2 <__multadd+0x5e>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <__multadd+0x88>)
 80033da:	21ba      	movs	r1, #186	@ 0xba
 80033dc:	480c      	ldr	r0, [pc, #48]	@ (8003410 <__multadd+0x8c>)
 80033de:	f000 fd33 	bl	8003e48 <__assert_func>
 80033e2:	6922      	ldr	r2, [r4, #16]
 80033e4:	f104 010c 	add.w	r1, r4, #12
 80033e8:	300c      	adds	r0, #12
 80033ea:	3202      	adds	r2, #2
 80033ec:	0092      	lsls	r2, r2, #2
 80033ee:	f000 fd1d 	bl	8003e2c <memcpy>
 80033f2:	4621      	mov	r1, r4
 80033f4:	4644      	mov	r4, r8
 80033f6:	4638      	mov	r0, r7
 80033f8:	f7ff ffa2 	bl	8003340 <_Bfree>
 80033fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003400:	3501      	adds	r5, #1
 8003402:	615e      	str	r6, [r3, #20]
 8003404:	6125      	str	r5, [r4, #16]
 8003406:	4620      	mov	r0, r4
 8003408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800340c:	0800459e 	.word	0x0800459e
 8003410:	080045af 	.word	0x080045af

08003414 <__hi0bits>:
 8003414:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003418:	4603      	mov	r3, r0
 800341a:	bf36      	itet	cc
 800341c:	0403      	lslcc	r3, r0, #16
 800341e:	2000      	movcs	r0, #0
 8003420:	2010      	movcc	r0, #16
 8003422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003426:	bf3c      	itt	cc
 8003428:	021b      	lslcc	r3, r3, #8
 800342a:	3008      	addcc	r0, #8
 800342c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003430:	bf3c      	itt	cc
 8003432:	011b      	lslcc	r3, r3, #4
 8003434:	3004      	addcc	r0, #4
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	bf3c      	itt	cc
 800343c:	009b      	lslcc	r3, r3, #2
 800343e:	3002      	addcc	r0, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	db05      	blt.n	8003450 <__hi0bits+0x3c>
 8003444:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003448:	f100 0001 	add.w	r0, r0, #1
 800344c:	bf08      	it	eq
 800344e:	2020      	moveq	r0, #32
 8003450:	4770      	bx	lr

08003452 <__lo0bits>:
 8003452:	6803      	ldr	r3, [r0, #0]
 8003454:	4602      	mov	r2, r0
 8003456:	f013 0007 	ands.w	r0, r3, #7
 800345a:	d00b      	beq.n	8003474 <__lo0bits+0x22>
 800345c:	07d9      	lsls	r1, r3, #31
 800345e:	d421      	bmi.n	80034a4 <__lo0bits+0x52>
 8003460:	0798      	lsls	r0, r3, #30
 8003462:	bf47      	ittee	mi
 8003464:	085b      	lsrmi	r3, r3, #1
 8003466:	2001      	movmi	r0, #1
 8003468:	089b      	lsrpl	r3, r3, #2
 800346a:	2002      	movpl	r0, #2
 800346c:	bf4c      	ite	mi
 800346e:	6013      	strmi	r3, [r2, #0]
 8003470:	6013      	strpl	r3, [r2, #0]
 8003472:	4770      	bx	lr
 8003474:	b299      	uxth	r1, r3
 8003476:	b909      	cbnz	r1, 800347c <__lo0bits+0x2a>
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	2010      	movs	r0, #16
 800347c:	b2d9      	uxtb	r1, r3
 800347e:	b909      	cbnz	r1, 8003484 <__lo0bits+0x32>
 8003480:	3008      	adds	r0, #8
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	0719      	lsls	r1, r3, #28
 8003486:	bf04      	itt	eq
 8003488:	091b      	lsreq	r3, r3, #4
 800348a:	3004      	addeq	r0, #4
 800348c:	0799      	lsls	r1, r3, #30
 800348e:	bf04      	itt	eq
 8003490:	089b      	lsreq	r3, r3, #2
 8003492:	3002      	addeq	r0, #2
 8003494:	07d9      	lsls	r1, r3, #31
 8003496:	d403      	bmi.n	80034a0 <__lo0bits+0x4e>
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	f100 0001 	add.w	r0, r0, #1
 800349e:	d003      	beq.n	80034a8 <__lo0bits+0x56>
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4770      	bx	lr
 80034a4:	2000      	movs	r0, #0
 80034a6:	4770      	bx	lr
 80034a8:	2020      	movs	r0, #32
 80034aa:	4770      	bx	lr

080034ac <__i2b>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	460c      	mov	r4, r1
 80034b0:	2101      	movs	r1, #1
 80034b2:	f7ff ff05 	bl	80032c0 <_Balloc>
 80034b6:	4602      	mov	r2, r0
 80034b8:	b928      	cbnz	r0, 80034c6 <__i2b+0x1a>
 80034ba:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <__i2b+0x24>)
 80034bc:	f240 1145 	movw	r1, #325	@ 0x145
 80034c0:	4804      	ldr	r0, [pc, #16]	@ (80034d4 <__i2b+0x28>)
 80034c2:	f000 fcc1 	bl	8003e48 <__assert_func>
 80034c6:	2301      	movs	r3, #1
 80034c8:	6144      	str	r4, [r0, #20]
 80034ca:	6103      	str	r3, [r0, #16]
 80034cc:	bd10      	pop	{r4, pc}
 80034ce:	bf00      	nop
 80034d0:	0800459e 	.word	0x0800459e
 80034d4:	080045af 	.word	0x080045af

080034d8 <__multiply>:
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034dc:	4614      	mov	r4, r2
 80034de:	690a      	ldr	r2, [r1, #16]
 80034e0:	460f      	mov	r7, r1
 80034e2:	b085      	sub	sp, #20
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	bfa2      	ittt	ge
 80034ea:	4623      	movge	r3, r4
 80034ec:	460c      	movge	r4, r1
 80034ee:	461f      	movge	r7, r3
 80034f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80034f4:	68a3      	ldr	r3, [r4, #8]
 80034f6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80034fa:	6861      	ldr	r1, [r4, #4]
 80034fc:	eb0a 0609 	add.w	r6, sl, r9
 8003500:	42b3      	cmp	r3, r6
 8003502:	bfb8      	it	lt
 8003504:	3101      	addlt	r1, #1
 8003506:	f7ff fedb 	bl	80032c0 <_Balloc>
 800350a:	b930      	cbnz	r0, 800351a <__multiply+0x42>
 800350c:	4602      	mov	r2, r0
 800350e:	4b45      	ldr	r3, [pc, #276]	@ (8003624 <__multiply+0x14c>)
 8003510:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003514:	4844      	ldr	r0, [pc, #272]	@ (8003628 <__multiply+0x150>)
 8003516:	f000 fc97 	bl	8003e48 <__assert_func>
 800351a:	f100 0514 	add.w	r5, r0, #20
 800351e:	2200      	movs	r2, #0
 8003520:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003524:	462b      	mov	r3, r5
 8003526:	4543      	cmp	r3, r8
 8003528:	d321      	bcc.n	800356e <__multiply+0x96>
 800352a:	f107 0114 	add.w	r1, r7, #20
 800352e:	f104 0214 	add.w	r2, r4, #20
 8003532:	f104 0715 	add.w	r7, r4, #21
 8003536:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800353a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	1b13      	subs	r3, r2, r4
 8003542:	3b15      	subs	r3, #21
 8003544:	f023 0303 	bic.w	r3, r3, #3
 8003548:	3304      	adds	r3, #4
 800354a:	42ba      	cmp	r2, r7
 800354c:	bf38      	it	cc
 800354e:	2304      	movcc	r3, #4
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	9b02      	ldr	r3, [sp, #8]
 8003554:	9103      	str	r1, [sp, #12]
 8003556:	428b      	cmp	r3, r1
 8003558:	d80c      	bhi.n	8003574 <__multiply+0x9c>
 800355a:	2e00      	cmp	r6, #0
 800355c:	dd03      	ble.n	8003566 <__multiply+0x8e>
 800355e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003562:	2b00      	cmp	r3, #0
 8003564:	d05b      	beq.n	800361e <__multiply+0x146>
 8003566:	6106      	str	r6, [r0, #16]
 8003568:	b005      	add	sp, #20
 800356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356e:	f843 2b04 	str.w	r2, [r3], #4
 8003572:	e7d8      	b.n	8003526 <__multiply+0x4e>
 8003574:	f8b1 a000 	ldrh.w	sl, [r1]
 8003578:	f1ba 0f00 	cmp.w	sl, #0
 800357c:	d024      	beq.n	80035c8 <__multiply+0xf0>
 800357e:	f104 0e14 	add.w	lr, r4, #20
 8003582:	46a9      	mov	r9, r5
 8003584:	f04f 0c00 	mov.w	ip, #0
 8003588:	f85e 7b04 	ldr.w	r7, [lr], #4
 800358c:	f8d9 3000 	ldr.w	r3, [r9]
 8003590:	fa1f fb87 	uxth.w	fp, r7
 8003594:	4572      	cmp	r2, lr
 8003596:	b29b      	uxth	r3, r3
 8003598:	fb0a 330b 	mla	r3, sl, fp, r3
 800359c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80035a0:	f8d9 7000 	ldr.w	r7, [r9]
 80035a4:	4463      	add	r3, ip
 80035a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80035aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80035ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80035b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80035bc:	f849 3b04 	str.w	r3, [r9], #4
 80035c0:	d8e2      	bhi.n	8003588 <__multiply+0xb0>
 80035c2:	9b01      	ldr	r3, [sp, #4]
 80035c4:	f845 c003 	str.w	ip, [r5, r3]
 80035c8:	9b03      	ldr	r3, [sp, #12]
 80035ca:	3104      	adds	r1, #4
 80035cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80035d0:	f1b9 0f00 	cmp.w	r9, #0
 80035d4:	d021      	beq.n	800361a <__multiply+0x142>
 80035d6:	682b      	ldr	r3, [r5, #0]
 80035d8:	f104 0c14 	add.w	ip, r4, #20
 80035dc:	46ae      	mov	lr, r5
 80035de:	f04f 0a00 	mov.w	sl, #0
 80035e2:	f8bc b000 	ldrh.w	fp, [ip]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80035ec:	fb09 770b 	mla	r7, r9, fp, r7
 80035f0:	4457      	add	r7, sl
 80035f2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80035f6:	f84e 3b04 	str.w	r3, [lr], #4
 80035fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80035fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003602:	f8be 3000 	ldrh.w	r3, [lr]
 8003606:	4562      	cmp	r2, ip
 8003608:	fb09 330a 	mla	r3, r9, sl, r3
 800360c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003610:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003614:	d8e5      	bhi.n	80035e2 <__multiply+0x10a>
 8003616:	9f01      	ldr	r7, [sp, #4]
 8003618:	51eb      	str	r3, [r5, r7]
 800361a:	3504      	adds	r5, #4
 800361c:	e799      	b.n	8003552 <__multiply+0x7a>
 800361e:	3e01      	subs	r6, #1
 8003620:	e79b      	b.n	800355a <__multiply+0x82>
 8003622:	bf00      	nop
 8003624:	0800459e 	.word	0x0800459e
 8003628:	080045af 	.word	0x080045af

0800362c <__pow5mult>:
 800362c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003630:	4615      	mov	r5, r2
 8003632:	f012 0203 	ands.w	r2, r2, #3
 8003636:	4607      	mov	r7, r0
 8003638:	460e      	mov	r6, r1
 800363a:	d007      	beq.n	800364c <__pow5mult+0x20>
 800363c:	3a01      	subs	r2, #1
 800363e:	4c25      	ldr	r4, [pc, #148]	@ (80036d4 <__pow5mult+0xa8>)
 8003640:	2300      	movs	r3, #0
 8003642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003646:	f7ff fe9d 	bl	8003384 <__multadd>
 800364a:	4606      	mov	r6, r0
 800364c:	10ad      	asrs	r5, r5, #2
 800364e:	d03d      	beq.n	80036cc <__pow5mult+0xa0>
 8003650:	69fc      	ldr	r4, [r7, #28]
 8003652:	b97c      	cbnz	r4, 8003674 <__pow5mult+0x48>
 8003654:	2010      	movs	r0, #16
 8003656:	f7ff fd7d 	bl	8003154 <malloc>
 800365a:	4602      	mov	r2, r0
 800365c:	61f8      	str	r0, [r7, #28]
 800365e:	b928      	cbnz	r0, 800366c <__pow5mult+0x40>
 8003660:	4b1d      	ldr	r3, [pc, #116]	@ (80036d8 <__pow5mult+0xac>)
 8003662:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003666:	481d      	ldr	r0, [pc, #116]	@ (80036dc <__pow5mult+0xb0>)
 8003668:	f000 fbee 	bl	8003e48 <__assert_func>
 800366c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003670:	6004      	str	r4, [r0, #0]
 8003672:	60c4      	str	r4, [r0, #12]
 8003674:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800367c:	b94c      	cbnz	r4, 8003692 <__pow5mult+0x66>
 800367e:	f240 2171 	movw	r1, #625	@ 0x271
 8003682:	4638      	mov	r0, r7
 8003684:	f7ff ff12 	bl	80034ac <__i2b>
 8003688:	2300      	movs	r3, #0
 800368a:	4604      	mov	r4, r0
 800368c:	f8c8 0008 	str.w	r0, [r8, #8]
 8003690:	6003      	str	r3, [r0, #0]
 8003692:	f04f 0900 	mov.w	r9, #0
 8003696:	07eb      	lsls	r3, r5, #31
 8003698:	d50a      	bpl.n	80036b0 <__pow5mult+0x84>
 800369a:	4631      	mov	r1, r6
 800369c:	4622      	mov	r2, r4
 800369e:	4638      	mov	r0, r7
 80036a0:	f7ff ff1a 	bl	80034d8 <__multiply>
 80036a4:	4680      	mov	r8, r0
 80036a6:	4631      	mov	r1, r6
 80036a8:	4638      	mov	r0, r7
 80036aa:	4646      	mov	r6, r8
 80036ac:	f7ff fe48 	bl	8003340 <_Bfree>
 80036b0:	106d      	asrs	r5, r5, #1
 80036b2:	d00b      	beq.n	80036cc <__pow5mult+0xa0>
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	b938      	cbnz	r0, 80036c8 <__pow5mult+0x9c>
 80036b8:	4622      	mov	r2, r4
 80036ba:	4621      	mov	r1, r4
 80036bc:	4638      	mov	r0, r7
 80036be:	f7ff ff0b 	bl	80034d8 <__multiply>
 80036c2:	6020      	str	r0, [r4, #0]
 80036c4:	f8c0 9000 	str.w	r9, [r0]
 80036c8:	4604      	mov	r4, r0
 80036ca:	e7e4      	b.n	8003696 <__pow5mult+0x6a>
 80036cc:	4630      	mov	r0, r6
 80036ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036d2:	bf00      	nop
 80036d4:	08004608 	.word	0x08004608
 80036d8:	0800452f 	.word	0x0800452f
 80036dc:	080045af 	.word	0x080045af

080036e0 <__lshift>:
 80036e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e4:	460c      	mov	r4, r1
 80036e6:	4607      	mov	r7, r0
 80036e8:	4691      	mov	r9, r2
 80036ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80036ee:	6923      	ldr	r3, [r4, #16]
 80036f0:	6849      	ldr	r1, [r1, #4]
 80036f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	f108 0601 	add.w	r6, r8, #1
 80036fc:	42b3      	cmp	r3, r6
 80036fe:	db0b      	blt.n	8003718 <__lshift+0x38>
 8003700:	4638      	mov	r0, r7
 8003702:	f7ff fddd 	bl	80032c0 <_Balloc>
 8003706:	4605      	mov	r5, r0
 8003708:	b948      	cbnz	r0, 800371e <__lshift+0x3e>
 800370a:	4602      	mov	r2, r0
 800370c:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <__lshift+0xd0>)
 800370e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003712:	4828      	ldr	r0, [pc, #160]	@ (80037b4 <__lshift+0xd4>)
 8003714:	f000 fb98 	bl	8003e48 <__assert_func>
 8003718:	3101      	adds	r1, #1
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	e7ee      	b.n	80036fc <__lshift+0x1c>
 800371e:	2300      	movs	r3, #0
 8003720:	f100 0114 	add.w	r1, r0, #20
 8003724:	f100 0210 	add.w	r2, r0, #16
 8003728:	4618      	mov	r0, r3
 800372a:	4553      	cmp	r3, sl
 800372c:	db33      	blt.n	8003796 <__lshift+0xb6>
 800372e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003732:	f104 0314 	add.w	r3, r4, #20
 8003736:	6920      	ldr	r0, [r4, #16]
 8003738:	f019 091f 	ands.w	r9, r9, #31
 800373c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003744:	d02b      	beq.n	800379e <__lshift+0xbe>
 8003746:	f1c9 0e20 	rsb	lr, r9, #32
 800374a:	468a      	mov	sl, r1
 800374c:	2200      	movs	r2, #0
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	fa00 f009 	lsl.w	r0, r0, r9
 8003754:	4310      	orrs	r0, r2
 8003756:	f84a 0b04 	str.w	r0, [sl], #4
 800375a:	f853 2b04 	ldr.w	r2, [r3], #4
 800375e:	459c      	cmp	ip, r3
 8003760:	fa22 f20e 	lsr.w	r2, r2, lr
 8003764:	d8f3      	bhi.n	800374e <__lshift+0x6e>
 8003766:	ebac 0304 	sub.w	r3, ip, r4
 800376a:	f104 0015 	add.w	r0, r4, #21
 800376e:	3b15      	subs	r3, #21
 8003770:	f023 0303 	bic.w	r3, r3, #3
 8003774:	3304      	adds	r3, #4
 8003776:	4584      	cmp	ip, r0
 8003778:	bf38      	it	cc
 800377a:	2304      	movcc	r3, #4
 800377c:	50ca      	str	r2, [r1, r3]
 800377e:	b10a      	cbz	r2, 8003784 <__lshift+0xa4>
 8003780:	f108 0602 	add.w	r6, r8, #2
 8003784:	3e01      	subs	r6, #1
 8003786:	4638      	mov	r0, r7
 8003788:	4621      	mov	r1, r4
 800378a:	612e      	str	r6, [r5, #16]
 800378c:	f7ff fdd8 	bl	8003340 <_Bfree>
 8003790:	4628      	mov	r0, r5
 8003792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003796:	3301      	adds	r3, #1
 8003798:	f842 0f04 	str.w	r0, [r2, #4]!
 800379c:	e7c5      	b.n	800372a <__lshift+0x4a>
 800379e:	3904      	subs	r1, #4
 80037a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a4:	459c      	cmp	ip, r3
 80037a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80037aa:	d8f9      	bhi.n	80037a0 <__lshift+0xc0>
 80037ac:	e7ea      	b.n	8003784 <__lshift+0xa4>
 80037ae:	bf00      	nop
 80037b0:	0800459e 	.word	0x0800459e
 80037b4:	080045af 	.word	0x080045af

080037b8 <__mcmp>:
 80037b8:	4603      	mov	r3, r0
 80037ba:	690a      	ldr	r2, [r1, #16]
 80037bc:	6900      	ldr	r0, [r0, #16]
 80037be:	1a80      	subs	r0, r0, r2
 80037c0:	b530      	push	{r4, r5, lr}
 80037c2:	d10e      	bne.n	80037e2 <__mcmp+0x2a>
 80037c4:	3314      	adds	r3, #20
 80037c6:	3114      	adds	r1, #20
 80037c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80037cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80037d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80037d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80037d8:	4295      	cmp	r5, r2
 80037da:	d003      	beq.n	80037e4 <__mcmp+0x2c>
 80037dc:	d205      	bcs.n	80037ea <__mcmp+0x32>
 80037de:	f04f 30ff 	mov.w	r0, #4294967295
 80037e2:	bd30      	pop	{r4, r5, pc}
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d3f3      	bcc.n	80037d0 <__mcmp+0x18>
 80037e8:	e7fb      	b.n	80037e2 <__mcmp+0x2a>
 80037ea:	2001      	movs	r0, #1
 80037ec:	e7f9      	b.n	80037e2 <__mcmp+0x2a>
	...

080037f0 <__mdiff>:
 80037f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	4689      	mov	r9, r1
 80037f6:	4606      	mov	r6, r0
 80037f8:	4611      	mov	r1, r2
 80037fa:	4614      	mov	r4, r2
 80037fc:	4648      	mov	r0, r9
 80037fe:	f7ff ffdb 	bl	80037b8 <__mcmp>
 8003802:	1e05      	subs	r5, r0, #0
 8003804:	d112      	bne.n	800382c <__mdiff+0x3c>
 8003806:	4629      	mov	r1, r5
 8003808:	4630      	mov	r0, r6
 800380a:	f7ff fd59 	bl	80032c0 <_Balloc>
 800380e:	4602      	mov	r2, r0
 8003810:	b928      	cbnz	r0, 800381e <__mdiff+0x2e>
 8003812:	4b41      	ldr	r3, [pc, #260]	@ (8003918 <__mdiff+0x128>)
 8003814:	f240 2137 	movw	r1, #567	@ 0x237
 8003818:	4840      	ldr	r0, [pc, #256]	@ (800391c <__mdiff+0x12c>)
 800381a:	f000 fb15 	bl	8003e48 <__assert_func>
 800381e:	2301      	movs	r3, #1
 8003820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003824:	4610      	mov	r0, r2
 8003826:	b003      	add	sp, #12
 8003828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382c:	bfbc      	itt	lt
 800382e:	464b      	movlt	r3, r9
 8003830:	46a1      	movlt	r9, r4
 8003832:	4630      	mov	r0, r6
 8003834:	bfb8      	it	lt
 8003836:	2501      	movlt	r5, #1
 8003838:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800383c:	bfb4      	ite	lt
 800383e:	461c      	movlt	r4, r3
 8003840:	2500      	movge	r5, #0
 8003842:	f7ff fd3d 	bl	80032c0 <_Balloc>
 8003846:	4602      	mov	r2, r0
 8003848:	b918      	cbnz	r0, 8003852 <__mdiff+0x62>
 800384a:	4b33      	ldr	r3, [pc, #204]	@ (8003918 <__mdiff+0x128>)
 800384c:	f240 2145 	movw	r1, #581	@ 0x245
 8003850:	e7e2      	b.n	8003818 <__mdiff+0x28>
 8003852:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003856:	f104 0e14 	add.w	lr, r4, #20
 800385a:	6926      	ldr	r6, [r4, #16]
 800385c:	f100 0b14 	add.w	fp, r0, #20
 8003860:	60c5      	str	r5, [r0, #12]
 8003862:	f109 0514 	add.w	r5, r9, #20
 8003866:	f109 0310 	add.w	r3, r9, #16
 800386a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800386e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003872:	46d9      	mov	r9, fp
 8003874:	f04f 0c00 	mov.w	ip, #0
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	9b01      	ldr	r3, [sp, #4]
 800387c:	f85e 0b04 	ldr.w	r0, [lr], #4
 8003880:	f853 af04 	ldr.w	sl, [r3, #4]!
 8003884:	4576      	cmp	r6, lr
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	fa1f f38a 	uxth.w	r3, sl
 800388c:	4619      	mov	r1, r3
 800388e:	b283      	uxth	r3, r0
 8003890:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8003894:	eba1 0303 	sub.w	r3, r1, r3
 8003898:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800389c:	4463      	add	r3, ip
 800389e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80038a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80038ac:	f849 3b04 	str.w	r3, [r9], #4
 80038b0:	d8e3      	bhi.n	800387a <__mdiff+0x8a>
 80038b2:	1b33      	subs	r3, r6, r4
 80038b4:	3415      	adds	r4, #21
 80038b6:	3b15      	subs	r3, #21
 80038b8:	f023 0303 	bic.w	r3, r3, #3
 80038bc:	3304      	adds	r3, #4
 80038be:	42a6      	cmp	r6, r4
 80038c0:	bf38      	it	cc
 80038c2:	2304      	movcc	r3, #4
 80038c4:	441d      	add	r5, r3
 80038c6:	445b      	add	r3, fp
 80038c8:	462c      	mov	r4, r5
 80038ca:	461e      	mov	r6, r3
 80038cc:	4544      	cmp	r4, r8
 80038ce:	d30e      	bcc.n	80038ee <__mdiff+0xfe>
 80038d0:	f108 0103 	add.w	r1, r8, #3
 80038d4:	1b49      	subs	r1, r1, r5
 80038d6:	3d03      	subs	r5, #3
 80038d8:	f021 0103 	bic.w	r1, r1, #3
 80038dc:	45a8      	cmp	r8, r5
 80038de:	bf38      	it	cc
 80038e0:	2100      	movcc	r1, #0
 80038e2:	440b      	add	r3, r1
 80038e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80038e8:	b199      	cbz	r1, 8003912 <__mdiff+0x122>
 80038ea:	6117      	str	r7, [r2, #16]
 80038ec:	e79a      	b.n	8003824 <__mdiff+0x34>
 80038ee:	f854 1b04 	ldr.w	r1, [r4], #4
 80038f2:	46e6      	mov	lr, ip
 80038f4:	fa1f fc81 	uxth.w	ip, r1
 80038f8:	0c08      	lsrs	r0, r1, #16
 80038fa:	4471      	add	r1, lr
 80038fc:	44f4      	add	ip, lr
 80038fe:	b289      	uxth	r1, r1
 8003900:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003904:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003908:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800390c:	f846 1b04 	str.w	r1, [r6], #4
 8003910:	e7dc      	b.n	80038cc <__mdiff+0xdc>
 8003912:	3f01      	subs	r7, #1
 8003914:	e7e6      	b.n	80038e4 <__mdiff+0xf4>
 8003916:	bf00      	nop
 8003918:	0800459e 	.word	0x0800459e
 800391c:	080045af 	.word	0x080045af

08003920 <__d2b>:
 8003920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003924:	460f      	mov	r7, r1
 8003926:	2101      	movs	r1, #1
 8003928:	4616      	mov	r6, r2
 800392a:	ec59 8b10 	vmov	r8, r9, d0
 800392e:	f7ff fcc7 	bl	80032c0 <_Balloc>
 8003932:	4604      	mov	r4, r0
 8003934:	b930      	cbnz	r0, 8003944 <__d2b+0x24>
 8003936:	4602      	mov	r2, r0
 8003938:	4b23      	ldr	r3, [pc, #140]	@ (80039c8 <__d2b+0xa8>)
 800393a:	f240 310f 	movw	r1, #783	@ 0x30f
 800393e:	4823      	ldr	r0, [pc, #140]	@ (80039cc <__d2b+0xac>)
 8003940:	f000 fa82 	bl	8003e48 <__assert_func>
 8003944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800394c:	b10d      	cbz	r5, 8003952 <__d2b+0x32>
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	f1b8 0300 	subs.w	r3, r8, #0
 8003958:	d023      	beq.n	80039a2 <__d2b+0x82>
 800395a:	4668      	mov	r0, sp
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	f7ff fd78 	bl	8003452 <__lo0bits>
 8003962:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003966:	b1d0      	cbz	r0, 800399e <__d2b+0x7e>
 8003968:	f1c0 0320 	rsb	r3, r0, #32
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	40c2      	lsrs	r2, r0
 8003972:	430b      	orrs	r3, r1
 8003974:	9201      	str	r2, [sp, #4]
 8003976:	6163      	str	r3, [r4, #20]
 8003978:	9b01      	ldr	r3, [sp, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	61a3      	str	r3, [r4, #24]
 800397e:	bf0c      	ite	eq
 8003980:	2201      	moveq	r2, #1
 8003982:	2202      	movne	r2, #2
 8003984:	6122      	str	r2, [r4, #16]
 8003986:	b1a5      	cbz	r5, 80039b2 <__d2b+0x92>
 8003988:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800398c:	4405      	add	r5, r0
 800398e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003992:	603d      	str	r5, [r7, #0]
 8003994:	6030      	str	r0, [r6, #0]
 8003996:	4620      	mov	r0, r4
 8003998:	b003      	add	sp, #12
 800399a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800399e:	6161      	str	r1, [r4, #20]
 80039a0:	e7ea      	b.n	8003978 <__d2b+0x58>
 80039a2:	a801      	add	r0, sp, #4
 80039a4:	f7ff fd55 	bl	8003452 <__lo0bits>
 80039a8:	9b01      	ldr	r3, [sp, #4]
 80039aa:	3020      	adds	r0, #32
 80039ac:	2201      	movs	r2, #1
 80039ae:	6163      	str	r3, [r4, #20]
 80039b0:	e7e8      	b.n	8003984 <__d2b+0x64>
 80039b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80039b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80039ba:	6038      	str	r0, [r7, #0]
 80039bc:	6918      	ldr	r0, [r3, #16]
 80039be:	f7ff fd29 	bl	8003414 <__hi0bits>
 80039c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80039c6:	e7e5      	b.n	8003994 <__d2b+0x74>
 80039c8:	0800459e 	.word	0x0800459e
 80039cc:	080045af 	.word	0x080045af

080039d0 <__ssputs_r>:
 80039d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	461f      	mov	r7, r3
 80039d6:	688e      	ldr	r6, [r1, #8]
 80039d8:	4682      	mov	sl, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	42be      	cmp	r6, r7
 80039de:	4690      	mov	r8, r2
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	d82d      	bhi.n	8003a40 <__ssputs_r+0x70>
 80039e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039ec:	d026      	beq.n	8003a3c <__ssputs_r+0x6c>
 80039ee:	6965      	ldr	r5, [r4, #20]
 80039f0:	6909      	ldr	r1, [r1, #16]
 80039f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039f6:	eba3 0901 	sub.w	r9, r3, r1
 80039fa:	1c7b      	adds	r3, r7, #1
 80039fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a00:	444b      	add	r3, r9
 8003a02:	106d      	asrs	r5, r5, #1
 8003a04:	429d      	cmp	r5, r3
 8003a06:	bf38      	it	cc
 8003a08:	461d      	movcc	r5, r3
 8003a0a:	0553      	lsls	r3, r2, #21
 8003a0c:	d527      	bpl.n	8003a5e <__ssputs_r+0x8e>
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7ff fbca 	bl	80031a8 <_malloc_r>
 8003a14:	4606      	mov	r6, r0
 8003a16:	b360      	cbz	r0, 8003a72 <__ssputs_r+0xa2>
 8003a18:	464a      	mov	r2, r9
 8003a1a:	6921      	ldr	r1, [r4, #16]
 8003a1c:	f000 fa06 	bl	8003e2c <memcpy>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	6126      	str	r6, [r4, #16]
 8003a2e:	444e      	add	r6, r9
 8003a30:	6165      	str	r5, [r4, #20]
 8003a32:	eba5 0509 	sub.w	r5, r5, r9
 8003a36:	6026      	str	r6, [r4, #0]
 8003a38:	463e      	mov	r6, r7
 8003a3a:	60a5      	str	r5, [r4, #8]
 8003a3c:	42be      	cmp	r6, r7
 8003a3e:	d900      	bls.n	8003a42 <__ssputs_r+0x72>
 8003a40:	463e      	mov	r6, r7
 8003a42:	4632      	mov	r2, r6
 8003a44:	4641      	mov	r1, r8
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	f000 f9c6 	bl	8003dd8 <memmove>
 8003a4c:	68a3      	ldr	r3, [r4, #8]
 8003a4e:	2000      	movs	r0, #0
 8003a50:	1b9b      	subs	r3, r3, r6
 8003a52:	60a3      	str	r3, [r4, #8]
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	4433      	add	r3, r6
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5e:	462a      	mov	r2, r5
 8003a60:	f000 fa36 	bl	8003ed0 <_realloc_r>
 8003a64:	4606      	mov	r6, r0
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d1e0      	bne.n	8003a2c <__ssputs_r+0x5c>
 8003a6a:	6921      	ldr	r1, [r4, #16]
 8003a6c:	4650      	mov	r0, sl
 8003a6e:	f7ff fb27 	bl	80030c0 <_free_r>
 8003a72:	230c      	movs	r3, #12
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f8ca 3000 	str.w	r3, [sl]
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	e7e9      	b.n	8003a5a <__ssputs_r+0x8a>
	...

08003a88 <_svfiprintf_r>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	4698      	mov	r8, r3
 8003a8e:	898b      	ldrh	r3, [r1, #12]
 8003a90:	b09d      	sub	sp, #116	@ 0x74
 8003a92:	4607      	mov	r7, r0
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	460d      	mov	r5, r1
 8003a98:	4614      	mov	r4, r2
 8003a9a:	d510      	bpl.n	8003abe <_svfiprintf_r+0x36>
 8003a9c:	690b      	ldr	r3, [r1, #16]
 8003a9e:	b973      	cbnz	r3, 8003abe <_svfiprintf_r+0x36>
 8003aa0:	2140      	movs	r1, #64	@ 0x40
 8003aa2:	f7ff fb81 	bl	80031a8 <_malloc_r>
 8003aa6:	6028      	str	r0, [r5, #0]
 8003aa8:	6128      	str	r0, [r5, #16]
 8003aaa:	b930      	cbnz	r0, 8003aba <_svfiprintf_r+0x32>
 8003aac:	230c      	movs	r3, #12
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	b01d      	add	sp, #116	@ 0x74
 8003ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aba:	2340      	movs	r3, #64	@ 0x40
 8003abc:	616b      	str	r3, [r5, #20]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ac4:	f04f 0901 	mov.w	r9, #1
 8003ac8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8003c6c <_svfiprintf_r+0x1e4>
 8003acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ace:	2320      	movs	r3, #32
 8003ad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ad4:	2330      	movs	r3, #48	@ 0x30
 8003ad6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ada:	4623      	mov	r3, r4
 8003adc:	469a      	mov	sl, r3
 8003ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae2:	b10a      	cbz	r2, 8003ae8 <_svfiprintf_r+0x60>
 8003ae4:	2a25      	cmp	r2, #37	@ 0x25
 8003ae6:	d1f9      	bne.n	8003adc <_svfiprintf_r+0x54>
 8003ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8003aec:	d00b      	beq.n	8003b06 <_svfiprintf_r+0x7e>
 8003aee:	465b      	mov	r3, fp
 8003af0:	4622      	mov	r2, r4
 8003af2:	4629      	mov	r1, r5
 8003af4:	4638      	mov	r0, r7
 8003af6:	f7ff ff6b 	bl	80039d0 <__ssputs_r>
 8003afa:	3001      	adds	r0, #1
 8003afc:	f000 80a7 	beq.w	8003c4e <_svfiprintf_r+0x1c6>
 8003b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b02:	445a      	add	r2, fp
 8003b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b06:	f89a 3000 	ldrb.w	r3, [sl]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 809f 	beq.w	8003c4e <_svfiprintf_r+0x1c6>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f04f 32ff 	mov.w	r2, #4294967295
 8003b16:	f10a 0a01 	add.w	sl, sl, #1
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	9307      	str	r3, [sp, #28]
 8003b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b28:	4654      	mov	r4, sl
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	484f      	ldr	r0, [pc, #316]	@ (8003c6c <_svfiprintf_r+0x1e4>)
 8003b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b32:	f7fe fc64 	bl	80023fe <memchr>
 8003b36:	9a04      	ldr	r2, [sp, #16]
 8003b38:	b9d8      	cbnz	r0, 8003b72 <_svfiprintf_r+0xea>
 8003b3a:	06d0      	lsls	r0, r2, #27
 8003b3c:	bf44      	itt	mi
 8003b3e:	2320      	movmi	r3, #32
 8003b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b44:	0711      	lsls	r1, r2, #28
 8003b46:	bf44      	itt	mi
 8003b48:	232b      	movmi	r3, #43	@ 0x2b
 8003b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b54:	d015      	beq.n	8003b82 <_svfiprintf_r+0xfa>
 8003b56:	9a07      	ldr	r2, [sp, #28]
 8003b58:	4654      	mov	r4, sl
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f04f 0c0a 	mov.w	ip, #10
 8003b60:	4621      	mov	r1, r4
 8003b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b66:	3b30      	subs	r3, #48	@ 0x30
 8003b68:	2b09      	cmp	r3, #9
 8003b6a:	d94b      	bls.n	8003c04 <_svfiprintf_r+0x17c>
 8003b6c:	b1b0      	cbz	r0, 8003b9c <_svfiprintf_r+0x114>
 8003b6e:	9207      	str	r2, [sp, #28]
 8003b70:	e014      	b.n	8003b9c <_svfiprintf_r+0x114>
 8003b72:	eba0 0308 	sub.w	r3, r0, r8
 8003b76:	46a2      	mov	sl, r4
 8003b78:	fa09 f303 	lsl.w	r3, r9, r3
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	e7d2      	b.n	8003b28 <_svfiprintf_r+0xa0>
 8003b82:	9b03      	ldr	r3, [sp, #12]
 8003b84:	1d19      	adds	r1, r3, #4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	9103      	str	r1, [sp, #12]
 8003b8c:	bfbb      	ittet	lt
 8003b8e:	425b      	neglt	r3, r3
 8003b90:	f042 0202 	orrlt.w	r2, r2, #2
 8003b94:	9307      	strge	r3, [sp, #28]
 8003b96:	9307      	strlt	r3, [sp, #28]
 8003b98:	bfb8      	it	lt
 8003b9a:	9204      	strlt	r2, [sp, #16]
 8003b9c:	7823      	ldrb	r3, [r4, #0]
 8003b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ba0:	d10a      	bne.n	8003bb8 <_svfiprintf_r+0x130>
 8003ba2:	7863      	ldrb	r3, [r4, #1]
 8003ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba6:	d132      	bne.n	8003c0e <_svfiprintf_r+0x186>
 8003ba8:	9b03      	ldr	r3, [sp, #12]
 8003baa:	3402      	adds	r4, #2
 8003bac:	1d1a      	adds	r2, r3, #4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bb4:	9203      	str	r2, [sp, #12]
 8003bb6:	9305      	str	r3, [sp, #20]
 8003bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c7c <_svfiprintf_r+0x1f4>
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	7821      	ldrb	r1, [r4, #0]
 8003bc0:	4650      	mov	r0, sl
 8003bc2:	f7fe fc1c 	bl	80023fe <memchr>
 8003bc6:	b138      	cbz	r0, 8003bd8 <_svfiprintf_r+0x150>
 8003bc8:	eba0 000a 	sub.w	r0, r0, sl
 8003bcc:	2240      	movs	r2, #64	@ 0x40
 8003bce:	9b04      	ldr	r3, [sp, #16]
 8003bd0:	3401      	adds	r4, #1
 8003bd2:	4082      	lsls	r2, r0
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	9304      	str	r3, [sp, #16]
 8003bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bdc:	2206      	movs	r2, #6
 8003bde:	4824      	ldr	r0, [pc, #144]	@ (8003c70 <_svfiprintf_r+0x1e8>)
 8003be0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003be4:	f7fe fc0b 	bl	80023fe <memchr>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d036      	beq.n	8003c5a <_svfiprintf_r+0x1d2>
 8003bec:	4b21      	ldr	r3, [pc, #132]	@ (8003c74 <_svfiprintf_r+0x1ec>)
 8003bee:	bb1b      	cbnz	r3, 8003c38 <_svfiprintf_r+0x1b0>
 8003bf0:	9b03      	ldr	r3, [sp, #12]
 8003bf2:	3307      	adds	r3, #7
 8003bf4:	f023 0307 	bic.w	r3, r3, #7
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	9303      	str	r3, [sp, #12]
 8003bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bfe:	4433      	add	r3, r6
 8003c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c02:	e76a      	b.n	8003ada <_svfiprintf_r+0x52>
 8003c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c08:	460c      	mov	r4, r1
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	e7a8      	b.n	8003b60 <_svfiprintf_r+0xd8>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	3401      	adds	r4, #1
 8003c12:	f04f 0c0a 	mov.w	ip, #10
 8003c16:	4619      	mov	r1, r3
 8003c18:	9305      	str	r3, [sp, #20]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c20:	3a30      	subs	r2, #48	@ 0x30
 8003c22:	2a09      	cmp	r2, #9
 8003c24:	d903      	bls.n	8003c2e <_svfiprintf_r+0x1a6>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0c6      	beq.n	8003bb8 <_svfiprintf_r+0x130>
 8003c2a:	9105      	str	r1, [sp, #20]
 8003c2c:	e7c4      	b.n	8003bb8 <_svfiprintf_r+0x130>
 8003c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c32:	4604      	mov	r4, r0
 8003c34:	2301      	movs	r3, #1
 8003c36:	e7f0      	b.n	8003c1a <_svfiprintf_r+0x192>
 8003c38:	ab03      	add	r3, sp, #12
 8003c3a:	462a      	mov	r2, r5
 8003c3c:	a904      	add	r1, sp, #16
 8003c3e:	4638      	mov	r0, r7
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <_svfiprintf_r+0x1f0>)
 8003c44:	f7fd fe6c 	bl	8001920 <_printf_float>
 8003c48:	1c42      	adds	r2, r0, #1
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	d1d6      	bne.n	8003bfc <_svfiprintf_r+0x174>
 8003c4e:	89ab      	ldrh	r3, [r5, #12]
 8003c50:	065b      	lsls	r3, r3, #25
 8003c52:	f53f af2d 	bmi.w	8003ab0 <_svfiprintf_r+0x28>
 8003c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c58:	e72c      	b.n	8003ab4 <_svfiprintf_r+0x2c>
 8003c5a:	ab03      	add	r3, sp, #12
 8003c5c:	462a      	mov	r2, r5
 8003c5e:	a904      	add	r1, sp, #16
 8003c60:	4638      	mov	r0, r7
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <_svfiprintf_r+0x1f0>)
 8003c66:	f7fe f8f7 	bl	8001e58 <_printf_i>
 8003c6a:	e7ed      	b.n	8003c48 <_svfiprintf_r+0x1c0>
 8003c6c:	08004708 	.word	0x08004708
 8003c70:	08004712 	.word	0x08004712
 8003c74:	08001921 	.word	0x08001921
 8003c78:	080039d1 	.word	0x080039d1
 8003c7c:	0800470e 	.word	0x0800470e

08003c80 <__sflush_r>:
 8003c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c88:	0716      	lsls	r6, r2, #28
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	d454      	bmi.n	8003d3a <__sflush_r+0xba>
 8003c90:	684b      	ldr	r3, [r1, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dc02      	bgt.n	8003c9c <__sflush_r+0x1c>
 8003c96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd48      	ble.n	8003d2e <__sflush_r+0xae>
 8003c9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c9e:	2e00      	cmp	r6, #0
 8003ca0:	d045      	beq.n	8003d2e <__sflush_r+0xae>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ca8:	682f      	ldr	r7, [r5, #0]
 8003caa:	6a21      	ldr	r1, [r4, #32]
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	d030      	beq.n	8003d12 <__sflush_r+0x92>
 8003cb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	0759      	lsls	r1, r3, #29
 8003cb6:	d505      	bpl.n	8003cc4 <__sflush_r+0x44>
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003cbe:	b10b      	cbz	r3, 8003cc4 <__sflush_r+0x44>
 8003cc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003cc8:	6a21      	ldr	r1, [r4, #32]
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b0      	blx	r6
 8003cce:	1c43      	adds	r3, r0, #1
 8003cd0:	89a3      	ldrh	r3, [r4, #12]
 8003cd2:	d106      	bne.n	8003ce2 <__sflush_r+0x62>
 8003cd4:	6829      	ldr	r1, [r5, #0]
 8003cd6:	291d      	cmp	r1, #29
 8003cd8:	d82b      	bhi.n	8003d32 <__sflush_r+0xb2>
 8003cda:	4a2a      	ldr	r2, [pc, #168]	@ (8003d84 <__sflush_r+0x104>)
 8003cdc:	410a      	asrs	r2, r1
 8003cde:	07d6      	lsls	r6, r2, #31
 8003ce0:	d427      	bmi.n	8003d32 <__sflush_r+0xb2>
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	04d9      	lsls	r1, r3, #19
 8003ce6:	6062      	str	r2, [r4, #4]
 8003ce8:	6922      	ldr	r2, [r4, #16]
 8003cea:	6022      	str	r2, [r4, #0]
 8003cec:	d504      	bpl.n	8003cf8 <__sflush_r+0x78>
 8003cee:	1c42      	adds	r2, r0, #1
 8003cf0:	d101      	bne.n	8003cf6 <__sflush_r+0x76>
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	b903      	cbnz	r3, 8003cf8 <__sflush_r+0x78>
 8003cf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cfa:	602f      	str	r7, [r5, #0]
 8003cfc:	b1b9      	cbz	r1, 8003d2e <__sflush_r+0xae>
 8003cfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d02:	4299      	cmp	r1, r3
 8003d04:	d002      	beq.n	8003d0c <__sflush_r+0x8c>
 8003d06:	4628      	mov	r0, r5
 8003d08:	f7ff f9da 	bl	80030c0 <_free_r>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d10:	e00d      	b.n	8003d2e <__sflush_r+0xae>
 8003d12:	2301      	movs	r3, #1
 8003d14:	4628      	mov	r0, r5
 8003d16:	47b0      	blx	r6
 8003d18:	4602      	mov	r2, r0
 8003d1a:	1c50      	adds	r0, r2, #1
 8003d1c:	d1c9      	bne.n	8003cb2 <__sflush_r+0x32>
 8003d1e:	682b      	ldr	r3, [r5, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0c6      	beq.n	8003cb2 <__sflush_r+0x32>
 8003d24:	2b1d      	cmp	r3, #29
 8003d26:	d001      	beq.n	8003d2c <__sflush_r+0xac>
 8003d28:	2b16      	cmp	r3, #22
 8003d2a:	d11d      	bne.n	8003d68 <__sflush_r+0xe8>
 8003d2c:	602f      	str	r7, [r5, #0]
 8003d2e:	2000      	movs	r0, #0
 8003d30:	e021      	b.n	8003d76 <__sflush_r+0xf6>
 8003d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	e01a      	b.n	8003d70 <__sflush_r+0xf0>
 8003d3a:	690f      	ldr	r7, [r1, #16]
 8003d3c:	2f00      	cmp	r7, #0
 8003d3e:	d0f6      	beq.n	8003d2e <__sflush_r+0xae>
 8003d40:	0793      	lsls	r3, r2, #30
 8003d42:	680e      	ldr	r6, [r1, #0]
 8003d44:	600f      	str	r7, [r1, #0]
 8003d46:	bf0c      	ite	eq
 8003d48:	694b      	ldreq	r3, [r1, #20]
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	eba6 0807 	sub.w	r8, r6, r7
 8003d50:	608b      	str	r3, [r1, #8]
 8003d52:	f1b8 0f00 	cmp.w	r8, #0
 8003d56:	ddea      	ble.n	8003d2e <__sflush_r+0xae>
 8003d58:	4643      	mov	r3, r8
 8003d5a:	463a      	mov	r2, r7
 8003d5c:	6a21      	ldr	r1, [r4, #32]
 8003d5e:	4628      	mov	r0, r5
 8003d60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003d62:	47b0      	blx	r6
 8003d64:	2800      	cmp	r0, #0
 8003d66:	dc08      	bgt.n	8003d7a <__sflush_r+0xfa>
 8003d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d7a:	4407      	add	r7, r0
 8003d7c:	eba8 0800 	sub.w	r8, r8, r0
 8003d80:	e7e7      	b.n	8003d52 <__sflush_r+0xd2>
 8003d82:	bf00      	nop
 8003d84:	dfbffffe 	.word	0xdfbffffe

08003d88 <_fflush_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	690b      	ldr	r3, [r1, #16]
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	460c      	mov	r4, r1
 8003d90:	b913      	cbnz	r3, 8003d98 <_fflush_r+0x10>
 8003d92:	2500      	movs	r5, #0
 8003d94:	4628      	mov	r0, r5
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	b118      	cbz	r0, 8003da2 <_fflush_r+0x1a>
 8003d9a:	6a03      	ldr	r3, [r0, #32]
 8003d9c:	b90b      	cbnz	r3, 8003da2 <_fflush_r+0x1a>
 8003d9e:	f7fe fa07 	bl	80021b0 <__sinit>
 8003da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f3      	beq.n	8003d92 <_fflush_r+0xa>
 8003daa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003dac:	07d0      	lsls	r0, r2, #31
 8003dae:	d404      	bmi.n	8003dba <_fflush_r+0x32>
 8003db0:	0599      	lsls	r1, r3, #22
 8003db2:	d402      	bmi.n	8003dba <_fflush_r+0x32>
 8003db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003db6:	f7fe fb20 	bl	80023fa <__retarget_lock_acquire_recursive>
 8003dba:	4628      	mov	r0, r5
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	f7ff ff5f 	bl	8003c80 <__sflush_r>
 8003dc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	07da      	lsls	r2, r3, #31
 8003dc8:	d4e4      	bmi.n	8003d94 <_fflush_r+0xc>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	059b      	lsls	r3, r3, #22
 8003dce:	d4e1      	bmi.n	8003d94 <_fflush_r+0xc>
 8003dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dd2:	f7fe fb13 	bl	80023fc <__retarget_lock_release_recursive>
 8003dd6:	e7dd      	b.n	8003d94 <_fflush_r+0xc>

08003dd8 <memmove>:
 8003dd8:	4288      	cmp	r0, r1
 8003dda:	b510      	push	{r4, lr}
 8003ddc:	eb01 0402 	add.w	r4, r1, r2
 8003de0:	d902      	bls.n	8003de8 <memmove+0x10>
 8003de2:	4284      	cmp	r4, r0
 8003de4:	4623      	mov	r3, r4
 8003de6:	d807      	bhi.n	8003df8 <memmove+0x20>
 8003de8:	1e43      	subs	r3, r0, #1
 8003dea:	42a1      	cmp	r1, r4
 8003dec:	d008      	beq.n	8003e00 <memmove+0x28>
 8003dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003df6:	e7f8      	b.n	8003dea <memmove+0x12>
 8003df8:	4402      	add	r2, r0
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	428a      	cmp	r2, r1
 8003dfe:	d100      	bne.n	8003e02 <memmove+0x2a>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e0a:	e7f7      	b.n	8003dfc <memmove+0x24>

08003e0c <_sbrk_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	2300      	movs	r3, #0
 8003e10:	4d05      	ldr	r5, [pc, #20]	@ (8003e28 <_sbrk_r+0x1c>)
 8003e12:	4604      	mov	r4, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	602b      	str	r3, [r5, #0]
 8003e18:	f7fd fa76 	bl	8001308 <_sbrk>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_sbrk_r+0x1a>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_sbrk_r+0x1a>
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	20000464 	.word	0x20000464

08003e2c <memcpy>:
 8003e2c:	440a      	add	r2, r1
 8003e2e:	1e43      	subs	r3, r0, #1
 8003e30:	4291      	cmp	r1, r2
 8003e32:	d100      	bne.n	8003e36 <memcpy+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	b510      	push	{r4, lr}
 8003e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3c:	4291      	cmp	r1, r2
 8003e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e42:	d1f9      	bne.n	8003e38 <memcpy+0xc>
 8003e44:	bd10      	pop	{r4, pc}
	...

08003e48 <__assert_func>:
 8003e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <__assert_func+0x2c>)
 8003e50:	4605      	mov	r5, r0
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68d8      	ldr	r0, [r3, #12]
 8003e56:	b954      	cbnz	r4, 8003e6e <__assert_func+0x26>
 8003e58:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <__assert_func+0x30>)
 8003e5a:	461c      	mov	r4, r3
 8003e5c:	9100      	str	r1, [sp, #0]
 8003e5e:	4907      	ldr	r1, [pc, #28]	@ (8003e7c <__assert_func+0x34>)
 8003e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003e64:	462b      	mov	r3, r5
 8003e66:	f000 f86f 	bl	8003f48 <fiprintf>
 8003e6a:	f000 f87f 	bl	8003f6c <abort>
 8003e6e:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <__assert_func+0x38>)
 8003e70:	e7f4      	b.n	8003e5c <__assert_func+0x14>
 8003e72:	bf00      	nop
 8003e74:	20000010 	.word	0x20000010
 8003e78:	0800475e 	.word	0x0800475e
 8003e7c:	08004730 	.word	0x08004730
 8003e80:	08004723 	.word	0x08004723

08003e84 <_calloc_r>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	fba1 5402 	umull	r5, r4, r1, r2
 8003e8a:	b93c      	cbnz	r4, 8003e9c <_calloc_r+0x18>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7ff f98b 	bl	80031a8 <_malloc_r>
 8003e92:	4606      	mov	r6, r0
 8003e94:	b928      	cbnz	r0, 8003ea2 <_calloc_r+0x1e>
 8003e96:	2600      	movs	r6, #0
 8003e98:	4630      	mov	r0, r6
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	220c      	movs	r2, #12
 8003e9e:	6002      	str	r2, [r0, #0]
 8003ea0:	e7f9      	b.n	8003e96 <_calloc_r+0x12>
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	f7fe fa1c 	bl	80022e2 <memset>
 8003eaa:	e7f5      	b.n	8003e98 <_calloc_r+0x14>

08003eac <__ascii_mbtowc>:
 8003eac:	b082      	sub	sp, #8
 8003eae:	b901      	cbnz	r1, 8003eb2 <__ascii_mbtowc+0x6>
 8003eb0:	a901      	add	r1, sp, #4
 8003eb2:	b142      	cbz	r2, 8003ec6 <__ascii_mbtowc+0x1a>
 8003eb4:	b14b      	cbz	r3, 8003eca <__ascii_mbtowc+0x1e>
 8003eb6:	7813      	ldrb	r3, [r2, #0]
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	7812      	ldrb	r2, [r2, #0]
 8003ebc:	1e10      	subs	r0, r2, #0
 8003ebe:	bf18      	it	ne
 8003ec0:	2001      	movne	r0, #1
 8003ec2:	b002      	add	sp, #8
 8003ec4:	4770      	bx	lr
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	e7fb      	b.n	8003ec2 <__ascii_mbtowc+0x16>
 8003eca:	f06f 0001 	mvn.w	r0, #1
 8003ece:	e7f8      	b.n	8003ec2 <__ascii_mbtowc+0x16>

08003ed0 <_realloc_r>:
 8003ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed4:	4680      	mov	r8, r0
 8003ed6:	4615      	mov	r5, r2
 8003ed8:	460c      	mov	r4, r1
 8003eda:	b921      	cbnz	r1, 8003ee6 <_realloc_r+0x16>
 8003edc:	4611      	mov	r1, r2
 8003ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee2:	f7ff b961 	b.w	80031a8 <_malloc_r>
 8003ee6:	b92a      	cbnz	r2, 8003ef4 <_realloc_r+0x24>
 8003ee8:	f7ff f8ea 	bl	80030c0 <_free_r>
 8003eec:	2400      	movs	r4, #0
 8003eee:	4620      	mov	r0, r4
 8003ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef4:	f000 f841 	bl	8003f7a <_malloc_usable_size_r>
 8003ef8:	4285      	cmp	r5, r0
 8003efa:	4606      	mov	r6, r0
 8003efc:	d802      	bhi.n	8003f04 <_realloc_r+0x34>
 8003efe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f02:	d8f4      	bhi.n	8003eee <_realloc_r+0x1e>
 8003f04:	4629      	mov	r1, r5
 8003f06:	4640      	mov	r0, r8
 8003f08:	f7ff f94e 	bl	80031a8 <_malloc_r>
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d0ec      	beq.n	8003eec <_realloc_r+0x1c>
 8003f12:	42b5      	cmp	r5, r6
 8003f14:	462a      	mov	r2, r5
 8003f16:	4621      	mov	r1, r4
 8003f18:	bf28      	it	cs
 8003f1a:	4632      	movcs	r2, r6
 8003f1c:	f7ff ff86 	bl	8003e2c <memcpy>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4640      	mov	r0, r8
 8003f24:	463c      	mov	r4, r7
 8003f26:	f7ff f8cb 	bl	80030c0 <_free_r>
 8003f2a:	e7e0      	b.n	8003eee <_realloc_r+0x1e>

08003f2c <__ascii_wctomb>:
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4608      	mov	r0, r1
 8003f30:	b141      	cbz	r1, 8003f44 <__ascii_wctomb+0x18>
 8003f32:	2aff      	cmp	r2, #255	@ 0xff
 8003f34:	d904      	bls.n	8003f40 <__ascii_wctomb+0x14>
 8003f36:	228a      	movs	r2, #138	@ 0x8a
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4770      	bx	lr
 8003f40:	2001      	movs	r0, #1
 8003f42:	700a      	strb	r2, [r1, #0]
 8003f44:	4770      	bx	lr
	...

08003f48 <fiprintf>:
 8003f48:	b40e      	push	{r1, r2, r3}
 8003f4a:	b503      	push	{r0, r1, lr}
 8003f4c:	ab03      	add	r3, sp, #12
 8003f4e:	4601      	mov	r1, r0
 8003f50:	4805      	ldr	r0, [pc, #20]	@ (8003f68 <fiprintf+0x20>)
 8003f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f56:	6800      	ldr	r0, [r0, #0]
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	f000 f83f 	bl	8003fdc <_vfiprintf_r>
 8003f5e:	b002      	add	sp, #8
 8003f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f64:	b003      	add	sp, #12
 8003f66:	4770      	bx	lr
 8003f68:	20000010 	.word	0x20000010

08003f6c <abort>:
 8003f6c:	2006      	movs	r0, #6
 8003f6e:	b508      	push	{r3, lr}
 8003f70:	f000 fa08 	bl	8004384 <raise>
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7fd f94f 	bl	8001218 <_exit>

08003f7a <_malloc_usable_size_r>:
 8003f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7e:	1f18      	subs	r0, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bfbc      	itt	lt
 8003f84:	580b      	ldrlt	r3, [r1, r0]
 8003f86:	18c0      	addlt	r0, r0, r3
 8003f88:	4770      	bx	lr

08003f8a <__sfputc_r>:
 8003f8a:	6893      	ldr	r3, [r2, #8]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	6093      	str	r3, [r2, #8]
 8003f92:	b410      	push	{r4}
 8003f94:	da08      	bge.n	8003fa8 <__sfputc_r+0x1e>
 8003f96:	6994      	ldr	r4, [r2, #24]
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	db01      	blt.n	8003fa0 <__sfputc_r+0x16>
 8003f9c:	290a      	cmp	r1, #10
 8003f9e:	d103      	bne.n	8003fa8 <__sfputc_r+0x1e>
 8003fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fa4:	f000 b932 	b.w	800420c <__swbuf_r>
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	1c58      	adds	r0, r3, #1
 8003fac:	6010      	str	r0, [r2, #0]
 8003fae:	4608      	mov	r0, r1
 8003fb0:	7019      	strb	r1, [r3, #0]
 8003fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <__sfputs_r>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	4606      	mov	r6, r0
 8003fbc:	460f      	mov	r7, r1
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	18d5      	adds	r5, r2, r3
 8003fc2:	42ac      	cmp	r4, r5
 8003fc4:	d101      	bne.n	8003fca <__sfputs_r+0x12>
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e007      	b.n	8003fda <__sfputs_r+0x22>
 8003fca:	463a      	mov	r2, r7
 8003fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f7ff ffda 	bl	8003f8a <__sfputc_r>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	d1f3      	bne.n	8003fc2 <__sfputs_r+0xa>
 8003fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fdc <_vfiprintf_r>:
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	b09d      	sub	sp, #116	@ 0x74
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	4698      	mov	r8, r3
 8003fe8:	4606      	mov	r6, r0
 8003fea:	b118      	cbz	r0, 8003ff4 <_vfiprintf_r+0x18>
 8003fec:	6a03      	ldr	r3, [r0, #32]
 8003fee:	b90b      	cbnz	r3, 8003ff4 <_vfiprintf_r+0x18>
 8003ff0:	f7fe f8de 	bl	80021b0 <__sinit>
 8003ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ff6:	07d9      	lsls	r1, r3, #31
 8003ff8:	d405      	bmi.n	8004006 <_vfiprintf_r+0x2a>
 8003ffa:	89ab      	ldrh	r3, [r5, #12]
 8003ffc:	059a      	lsls	r2, r3, #22
 8003ffe:	d402      	bmi.n	8004006 <_vfiprintf_r+0x2a>
 8004000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004002:	f7fe f9fa 	bl	80023fa <__retarget_lock_acquire_recursive>
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	071b      	lsls	r3, r3, #28
 800400a:	d501      	bpl.n	8004010 <_vfiprintf_r+0x34>
 800400c:	692b      	ldr	r3, [r5, #16]
 800400e:	b99b      	cbnz	r3, 8004038 <_vfiprintf_r+0x5c>
 8004010:	4629      	mov	r1, r5
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f938 	bl	8004288 <__swsetup_r>
 8004018:	b170      	cbz	r0, 8004038 <_vfiprintf_r+0x5c>
 800401a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800401c:	07dc      	lsls	r4, r3, #31
 800401e:	d504      	bpl.n	800402a <_vfiprintf_r+0x4e>
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	b01d      	add	sp, #116	@ 0x74
 8004026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402a:	89ab      	ldrh	r3, [r5, #12]
 800402c:	0598      	lsls	r0, r3, #22
 800402e:	d4f7      	bmi.n	8004020 <_vfiprintf_r+0x44>
 8004030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004032:	f7fe f9e3 	bl	80023fc <__retarget_lock_release_recursive>
 8004036:	e7f3      	b.n	8004020 <_vfiprintf_r+0x44>
 8004038:	2300      	movs	r3, #0
 800403a:	f8cd 800c 	str.w	r8, [sp, #12]
 800403e:	f04f 0901 	mov.w	r9, #1
 8004042:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80041f8 <_vfiprintf_r+0x21c>
 8004046:	9309      	str	r3, [sp, #36]	@ 0x24
 8004048:	2320      	movs	r3, #32
 800404a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800404e:	2330      	movs	r3, #48	@ 0x30
 8004050:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004054:	4623      	mov	r3, r4
 8004056:	469a      	mov	sl, r3
 8004058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800405c:	b10a      	cbz	r2, 8004062 <_vfiprintf_r+0x86>
 800405e:	2a25      	cmp	r2, #37	@ 0x25
 8004060:	d1f9      	bne.n	8004056 <_vfiprintf_r+0x7a>
 8004062:	ebba 0b04 	subs.w	fp, sl, r4
 8004066:	d00b      	beq.n	8004080 <_vfiprintf_r+0xa4>
 8004068:	465b      	mov	r3, fp
 800406a:	4622      	mov	r2, r4
 800406c:	4629      	mov	r1, r5
 800406e:	4630      	mov	r0, r6
 8004070:	f7ff ffa2 	bl	8003fb8 <__sfputs_r>
 8004074:	3001      	adds	r0, #1
 8004076:	f000 80a7 	beq.w	80041c8 <_vfiprintf_r+0x1ec>
 800407a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800407c:	445a      	add	r2, fp
 800407e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004080:	f89a 3000 	ldrb.w	r3, [sl]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 809f 	beq.w	80041c8 <_vfiprintf_r+0x1ec>
 800408a:	2300      	movs	r3, #0
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	f10a 0a01 	add.w	sl, sl, #1
 8004094:	9304      	str	r3, [sp, #16]
 8004096:	9307      	str	r3, [sp, #28]
 8004098:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800409c:	931a      	str	r3, [sp, #104]	@ 0x68
 800409e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040a2:	4654      	mov	r4, sl
 80040a4:	2205      	movs	r2, #5
 80040a6:	4854      	ldr	r0, [pc, #336]	@ (80041f8 <_vfiprintf_r+0x21c>)
 80040a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ac:	f7fe f9a7 	bl	80023fe <memchr>
 80040b0:	9a04      	ldr	r2, [sp, #16]
 80040b2:	b9d8      	cbnz	r0, 80040ec <_vfiprintf_r+0x110>
 80040b4:	06d1      	lsls	r1, r2, #27
 80040b6:	bf44      	itt	mi
 80040b8:	2320      	movmi	r3, #32
 80040ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040be:	0713      	lsls	r3, r2, #28
 80040c0:	bf44      	itt	mi
 80040c2:	232b      	movmi	r3, #43	@ 0x2b
 80040c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c8:	f89a 3000 	ldrb.w	r3, [sl]
 80040cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ce:	d015      	beq.n	80040fc <_vfiprintf_r+0x120>
 80040d0:	9a07      	ldr	r2, [sp, #28]
 80040d2:	4654      	mov	r4, sl
 80040d4:	2000      	movs	r0, #0
 80040d6:	f04f 0c0a 	mov.w	ip, #10
 80040da:	4621      	mov	r1, r4
 80040dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e0:	3b30      	subs	r3, #48	@ 0x30
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	d94b      	bls.n	800417e <_vfiprintf_r+0x1a2>
 80040e6:	b1b0      	cbz	r0, 8004116 <_vfiprintf_r+0x13a>
 80040e8:	9207      	str	r2, [sp, #28]
 80040ea:	e014      	b.n	8004116 <_vfiprintf_r+0x13a>
 80040ec:	eba0 0308 	sub.w	r3, r0, r8
 80040f0:	46a2      	mov	sl, r4
 80040f2:	fa09 f303 	lsl.w	r3, r9, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	9304      	str	r3, [sp, #16]
 80040fa:	e7d2      	b.n	80040a2 <_vfiprintf_r+0xc6>
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	1d19      	adds	r1, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	9103      	str	r1, [sp, #12]
 8004106:	bfbb      	ittet	lt
 8004108:	425b      	neglt	r3, r3
 800410a:	f042 0202 	orrlt.w	r2, r2, #2
 800410e:	9307      	strge	r3, [sp, #28]
 8004110:	9307      	strlt	r3, [sp, #28]
 8004112:	bfb8      	it	lt
 8004114:	9204      	strlt	r2, [sp, #16]
 8004116:	7823      	ldrb	r3, [r4, #0]
 8004118:	2b2e      	cmp	r3, #46	@ 0x2e
 800411a:	d10a      	bne.n	8004132 <_vfiprintf_r+0x156>
 800411c:	7863      	ldrb	r3, [r4, #1]
 800411e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004120:	d132      	bne.n	8004188 <_vfiprintf_r+0x1ac>
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	3402      	adds	r4, #2
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800412e:	9203      	str	r2, [sp, #12]
 8004130:	9305      	str	r3, [sp, #20]
 8004132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004208 <_vfiprintf_r+0x22c>
 8004136:	2203      	movs	r2, #3
 8004138:	7821      	ldrb	r1, [r4, #0]
 800413a:	4650      	mov	r0, sl
 800413c:	f7fe f95f 	bl	80023fe <memchr>
 8004140:	b138      	cbz	r0, 8004152 <_vfiprintf_r+0x176>
 8004142:	eba0 000a 	sub.w	r0, r0, sl
 8004146:	2240      	movs	r2, #64	@ 0x40
 8004148:	9b04      	ldr	r3, [sp, #16]
 800414a:	3401      	adds	r4, #1
 800414c:	4082      	lsls	r2, r0
 800414e:	4313      	orrs	r3, r2
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004156:	2206      	movs	r2, #6
 8004158:	4828      	ldr	r0, [pc, #160]	@ (80041fc <_vfiprintf_r+0x220>)
 800415a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800415e:	f7fe f94e 	bl	80023fe <memchr>
 8004162:	2800      	cmp	r0, #0
 8004164:	d03f      	beq.n	80041e6 <_vfiprintf_r+0x20a>
 8004166:	4b26      	ldr	r3, [pc, #152]	@ (8004200 <_vfiprintf_r+0x224>)
 8004168:	bb1b      	cbnz	r3, 80041b2 <_vfiprintf_r+0x1d6>
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	3307      	adds	r3, #7
 800416e:	f023 0307 	bic.w	r3, r3, #7
 8004172:	3308      	adds	r3, #8
 8004174:	9303      	str	r3, [sp, #12]
 8004176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004178:	443b      	add	r3, r7
 800417a:	9309      	str	r3, [sp, #36]	@ 0x24
 800417c:	e76a      	b.n	8004054 <_vfiprintf_r+0x78>
 800417e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004182:	460c      	mov	r4, r1
 8004184:	2001      	movs	r0, #1
 8004186:	e7a8      	b.n	80040da <_vfiprintf_r+0xfe>
 8004188:	2300      	movs	r3, #0
 800418a:	3401      	adds	r4, #1
 800418c:	f04f 0c0a 	mov.w	ip, #10
 8004190:	4619      	mov	r1, r3
 8004192:	9305      	str	r3, [sp, #20]
 8004194:	4620      	mov	r0, r4
 8004196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419a:	3a30      	subs	r2, #48	@ 0x30
 800419c:	2a09      	cmp	r2, #9
 800419e:	d903      	bls.n	80041a8 <_vfiprintf_r+0x1cc>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0c6      	beq.n	8004132 <_vfiprintf_r+0x156>
 80041a4:	9105      	str	r1, [sp, #20]
 80041a6:	e7c4      	b.n	8004132 <_vfiprintf_r+0x156>
 80041a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ac:	4604      	mov	r4, r0
 80041ae:	2301      	movs	r3, #1
 80041b0:	e7f0      	b.n	8004194 <_vfiprintf_r+0x1b8>
 80041b2:	ab03      	add	r3, sp, #12
 80041b4:	462a      	mov	r2, r5
 80041b6:	a904      	add	r1, sp, #16
 80041b8:	4630      	mov	r0, r6
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <_vfiprintf_r+0x228>)
 80041be:	f7fd fbaf 	bl	8001920 <_printf_float>
 80041c2:	4607      	mov	r7, r0
 80041c4:	1c78      	adds	r0, r7, #1
 80041c6:	d1d6      	bne.n	8004176 <_vfiprintf_r+0x19a>
 80041c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041ca:	07d9      	lsls	r1, r3, #31
 80041cc:	d405      	bmi.n	80041da <_vfiprintf_r+0x1fe>
 80041ce:	89ab      	ldrh	r3, [r5, #12]
 80041d0:	059a      	lsls	r2, r3, #22
 80041d2:	d402      	bmi.n	80041da <_vfiprintf_r+0x1fe>
 80041d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041d6:	f7fe f911 	bl	80023fc <__retarget_lock_release_recursive>
 80041da:	89ab      	ldrh	r3, [r5, #12]
 80041dc:	065b      	lsls	r3, r3, #25
 80041de:	f53f af1f 	bmi.w	8004020 <_vfiprintf_r+0x44>
 80041e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e4:	e71e      	b.n	8004024 <_vfiprintf_r+0x48>
 80041e6:	ab03      	add	r3, sp, #12
 80041e8:	462a      	mov	r2, r5
 80041ea:	a904      	add	r1, sp, #16
 80041ec:	4630      	mov	r0, r6
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	4b04      	ldr	r3, [pc, #16]	@ (8004204 <_vfiprintf_r+0x228>)
 80041f2:	f7fd fe31 	bl	8001e58 <_printf_i>
 80041f6:	e7e4      	b.n	80041c2 <_vfiprintf_r+0x1e6>
 80041f8:	08004708 	.word	0x08004708
 80041fc:	08004712 	.word	0x08004712
 8004200:	08001921 	.word	0x08001921
 8004204:	08003fb9 	.word	0x08003fb9
 8004208:	0800470e 	.word	0x0800470e

0800420c <__swbuf_r>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	460e      	mov	r6, r1
 8004210:	4614      	mov	r4, r2
 8004212:	4605      	mov	r5, r0
 8004214:	b118      	cbz	r0, 800421e <__swbuf_r+0x12>
 8004216:	6a03      	ldr	r3, [r0, #32]
 8004218:	b90b      	cbnz	r3, 800421e <__swbuf_r+0x12>
 800421a:	f7fd ffc9 	bl	80021b0 <__sinit>
 800421e:	69a3      	ldr	r3, [r4, #24]
 8004220:	60a3      	str	r3, [r4, #8]
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	071a      	lsls	r2, r3, #28
 8004226:	d501      	bpl.n	800422c <__swbuf_r+0x20>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	b943      	cbnz	r3, 800423e <__swbuf_r+0x32>
 800422c:	4621      	mov	r1, r4
 800422e:	4628      	mov	r0, r5
 8004230:	f000 f82a 	bl	8004288 <__swsetup_r>
 8004234:	b118      	cbz	r0, 800423e <__swbuf_r+0x32>
 8004236:	f04f 37ff 	mov.w	r7, #4294967295
 800423a:	4638      	mov	r0, r7
 800423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	b2f6      	uxtb	r6, r6
 8004242:	6922      	ldr	r2, [r4, #16]
 8004244:	4637      	mov	r7, r6
 8004246:	1a98      	subs	r0, r3, r2
 8004248:	6963      	ldr	r3, [r4, #20]
 800424a:	4283      	cmp	r3, r0
 800424c:	dc05      	bgt.n	800425a <__swbuf_r+0x4e>
 800424e:	4621      	mov	r1, r4
 8004250:	4628      	mov	r0, r5
 8004252:	f7ff fd99 	bl	8003d88 <_fflush_r>
 8004256:	2800      	cmp	r0, #0
 8004258:	d1ed      	bne.n	8004236 <__swbuf_r+0x2a>
 800425a:	68a3      	ldr	r3, [r4, #8]
 800425c:	3b01      	subs	r3, #1
 800425e:	60a3      	str	r3, [r4, #8]
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	6022      	str	r2, [r4, #0]
 8004266:	701e      	strb	r6, [r3, #0]
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	6962      	ldr	r2, [r4, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d004      	beq.n	800427a <__swbuf_r+0x6e>
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	07db      	lsls	r3, r3, #31
 8004274:	d5e1      	bpl.n	800423a <__swbuf_r+0x2e>
 8004276:	2e0a      	cmp	r6, #10
 8004278:	d1df      	bne.n	800423a <__swbuf_r+0x2e>
 800427a:	4621      	mov	r1, r4
 800427c:	4628      	mov	r0, r5
 800427e:	f7ff fd83 	bl	8003d88 <_fflush_r>
 8004282:	2800      	cmp	r0, #0
 8004284:	d0d9      	beq.n	800423a <__swbuf_r+0x2e>
 8004286:	e7d6      	b.n	8004236 <__swbuf_r+0x2a>

08004288 <__swsetup_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4b29      	ldr	r3, [pc, #164]	@ (8004330 <__swsetup_r+0xa8>)
 800428c:	4605      	mov	r5, r0
 800428e:	460c      	mov	r4, r1
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	b118      	cbz	r0, 800429c <__swsetup_r+0x14>
 8004294:	6a03      	ldr	r3, [r0, #32]
 8004296:	b90b      	cbnz	r3, 800429c <__swsetup_r+0x14>
 8004298:	f7fd ff8a 	bl	80021b0 <__sinit>
 800429c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042a0:	0719      	lsls	r1, r3, #28
 80042a2:	d422      	bmi.n	80042ea <__swsetup_r+0x62>
 80042a4:	06da      	lsls	r2, r3, #27
 80042a6:	d407      	bmi.n	80042b8 <__swsetup_r+0x30>
 80042a8:	2209      	movs	r2, #9
 80042aa:	602a      	str	r2, [r5, #0]
 80042ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	e033      	b.n	8004320 <__swsetup_r+0x98>
 80042b8:	0758      	lsls	r0, r3, #29
 80042ba:	d512      	bpl.n	80042e2 <__swsetup_r+0x5a>
 80042bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042be:	b141      	cbz	r1, 80042d2 <__swsetup_r+0x4a>
 80042c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042c4:	4299      	cmp	r1, r3
 80042c6:	d002      	beq.n	80042ce <__swsetup_r+0x46>
 80042c8:	4628      	mov	r0, r5
 80042ca:	f7fe fef9 	bl	80030c0 <_free_r>
 80042ce:	2300      	movs	r3, #0
 80042d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	2300      	movs	r3, #0
 80042dc:	6063      	str	r3, [r4, #4]
 80042de:	6923      	ldr	r3, [r4, #16]
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	f043 0308 	orr.w	r3, r3, #8
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	6923      	ldr	r3, [r4, #16]
 80042ec:	b94b      	cbnz	r3, 8004302 <__swsetup_r+0x7a>
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f8:	d003      	beq.n	8004302 <__swsetup_r+0x7a>
 80042fa:	4621      	mov	r1, r4
 80042fc:	4628      	mov	r0, r5
 80042fe:	f000 f882 	bl	8004406 <__smakebuf_r>
 8004302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004306:	f013 0201 	ands.w	r2, r3, #1
 800430a:	d00a      	beq.n	8004322 <__swsetup_r+0x9a>
 800430c:	2200      	movs	r2, #0
 800430e:	60a2      	str	r2, [r4, #8]
 8004310:	6962      	ldr	r2, [r4, #20]
 8004312:	4252      	negs	r2, r2
 8004314:	61a2      	str	r2, [r4, #24]
 8004316:	6922      	ldr	r2, [r4, #16]
 8004318:	b942      	cbnz	r2, 800432c <__swsetup_r+0xa4>
 800431a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800431e:	d1c5      	bne.n	80042ac <__swsetup_r+0x24>
 8004320:	bd38      	pop	{r3, r4, r5, pc}
 8004322:	0799      	lsls	r1, r3, #30
 8004324:	bf58      	it	pl
 8004326:	6962      	ldrpl	r2, [r4, #20]
 8004328:	60a2      	str	r2, [r4, #8]
 800432a:	e7f4      	b.n	8004316 <__swsetup_r+0x8e>
 800432c:	2000      	movs	r0, #0
 800432e:	e7f7      	b.n	8004320 <__swsetup_r+0x98>
 8004330:	20000010 	.word	0x20000010

08004334 <_raise_r>:
 8004334:	291f      	cmp	r1, #31
 8004336:	b538      	push	{r3, r4, r5, lr}
 8004338:	4605      	mov	r5, r0
 800433a:	460c      	mov	r4, r1
 800433c:	d904      	bls.n	8004348 <_raise_r+0x14>
 800433e:	2316      	movs	r3, #22
 8004340:	6003      	str	r3, [r0, #0]
 8004342:	f04f 30ff 	mov.w	r0, #4294967295
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800434a:	b112      	cbz	r2, 8004352 <_raise_r+0x1e>
 800434c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004350:	b94b      	cbnz	r3, 8004366 <_raise_r+0x32>
 8004352:	4628      	mov	r0, r5
 8004354:	f000 f830 	bl	80043b8 <_getpid_r>
 8004358:	4622      	mov	r2, r4
 800435a:	4601      	mov	r1, r0
 800435c:	4628      	mov	r0, r5
 800435e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004362:	f000 b817 	b.w	8004394 <_kill_r>
 8004366:	2b01      	cmp	r3, #1
 8004368:	d00a      	beq.n	8004380 <_raise_r+0x4c>
 800436a:	1c59      	adds	r1, r3, #1
 800436c:	d103      	bne.n	8004376 <_raise_r+0x42>
 800436e:	2316      	movs	r3, #22
 8004370:	6003      	str	r3, [r0, #0]
 8004372:	2001      	movs	r0, #1
 8004374:	e7e7      	b.n	8004346 <_raise_r+0x12>
 8004376:	2100      	movs	r1, #0
 8004378:	4620      	mov	r0, r4
 800437a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800437e:	4798      	blx	r3
 8004380:	2000      	movs	r0, #0
 8004382:	e7e0      	b.n	8004346 <_raise_r+0x12>

08004384 <raise>:
 8004384:	4b02      	ldr	r3, [pc, #8]	@ (8004390 <raise+0xc>)
 8004386:	4601      	mov	r1, r0
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f7ff bfd3 	b.w	8004334 <_raise_r>
 800438e:	bf00      	nop
 8004390:	20000010 	.word	0x20000010

08004394 <_kill_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	2300      	movs	r3, #0
 8004398:	4d06      	ldr	r5, [pc, #24]	@ (80043b4 <_kill_r+0x20>)
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	602b      	str	r3, [r5, #0]
 80043a2:	f7fc ff29 	bl	80011f8 <_kill>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	d102      	bne.n	80043b0 <_kill_r+0x1c>
 80043aa:	682b      	ldr	r3, [r5, #0]
 80043ac:	b103      	cbz	r3, 80043b0 <_kill_r+0x1c>
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
 80043b2:	bf00      	nop
 80043b4:	20000464 	.word	0x20000464

080043b8 <_getpid_r>:
 80043b8:	f7fc bf16 	b.w	80011e8 <_getpid>

080043bc <__swhatbuf_r>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	460c      	mov	r4, r1
 80043c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c4:	b096      	sub	sp, #88	@ 0x58
 80043c6:	4615      	mov	r5, r2
 80043c8:	2900      	cmp	r1, #0
 80043ca:	461e      	mov	r6, r3
 80043cc:	da0c      	bge.n	80043e8 <__swhatbuf_r+0x2c>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	2100      	movs	r1, #0
 80043d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80043d6:	bf14      	ite	ne
 80043d8:	2340      	movne	r3, #64	@ 0x40
 80043da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80043de:	2000      	movs	r0, #0
 80043e0:	6031      	str	r1, [r6, #0]
 80043e2:	602b      	str	r3, [r5, #0]
 80043e4:	b016      	add	sp, #88	@ 0x58
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
 80043e8:	466a      	mov	r2, sp
 80043ea:	f000 f849 	bl	8004480 <_fstat_r>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	dbed      	blt.n	80043ce <__swhatbuf_r+0x12>
 80043f2:	9901      	ldr	r1, [sp, #4]
 80043f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80043f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80043fc:	4259      	negs	r1, r3
 80043fe:	4159      	adcs	r1, r3
 8004400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004404:	e7eb      	b.n	80043de <__swhatbuf_r+0x22>

08004406 <__smakebuf_r>:
 8004406:	898b      	ldrh	r3, [r1, #12]
 8004408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800440a:	079d      	lsls	r5, r3, #30
 800440c:	4606      	mov	r6, r0
 800440e:	460c      	mov	r4, r1
 8004410:	d507      	bpl.n	8004422 <__smakebuf_r+0x1c>
 8004412:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004416:	6023      	str	r3, [r4, #0]
 8004418:	6123      	str	r3, [r4, #16]
 800441a:	2301      	movs	r3, #1
 800441c:	6163      	str	r3, [r4, #20]
 800441e:	b003      	add	sp, #12
 8004420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004422:	ab01      	add	r3, sp, #4
 8004424:	466a      	mov	r2, sp
 8004426:	f7ff ffc9 	bl	80043bc <__swhatbuf_r>
 800442a:	9f00      	ldr	r7, [sp, #0]
 800442c:	4605      	mov	r5, r0
 800442e:	4630      	mov	r0, r6
 8004430:	4639      	mov	r1, r7
 8004432:	f7fe feb9 	bl	80031a8 <_malloc_r>
 8004436:	b948      	cbnz	r0, 800444c <__smakebuf_r+0x46>
 8004438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443c:	059a      	lsls	r2, r3, #22
 800443e:	d4ee      	bmi.n	800441e <__smakebuf_r+0x18>
 8004440:	f023 0303 	bic.w	r3, r3, #3
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	81a3      	strh	r3, [r4, #12]
 800444a:	e7e2      	b.n	8004412 <__smakebuf_r+0xc>
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	6020      	str	r0, [r4, #0]
 8004450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800445c:	b15b      	cbz	r3, 8004476 <__smakebuf_r+0x70>
 800445e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004462:	4630      	mov	r0, r6
 8004464:	f000 f81e 	bl	80044a4 <_isatty_r>
 8004468:	b128      	cbz	r0, 8004476 <__smakebuf_r+0x70>
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	f023 0303 	bic.w	r3, r3, #3
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	81a3      	strh	r3, [r4, #12]
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	431d      	orrs	r5, r3
 800447a:	81a5      	strh	r5, [r4, #12]
 800447c:	e7cf      	b.n	800441e <__smakebuf_r+0x18>
	...

08004480 <_fstat_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	2300      	movs	r3, #0
 8004484:	4d06      	ldr	r5, [pc, #24]	@ (80044a0 <_fstat_r+0x20>)
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	602b      	str	r3, [r5, #0]
 800448e:	f7fc ff13 	bl	80012b8 <_fstat>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	d102      	bne.n	800449c <_fstat_r+0x1c>
 8004496:	682b      	ldr	r3, [r5, #0]
 8004498:	b103      	cbz	r3, 800449c <_fstat_r+0x1c>
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	bd38      	pop	{r3, r4, r5, pc}
 800449e:	bf00      	nop
 80044a0:	20000464 	.word	0x20000464

080044a4 <_isatty_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	2300      	movs	r3, #0
 80044a8:	4d05      	ldr	r5, [pc, #20]	@ (80044c0 <_isatty_r+0x1c>)
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	f7fc ff12 	bl	80012d8 <_isatty>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_isatty_r+0x1a>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_isatty_r+0x1a>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	20000464 	.word	0x20000464

080044c4 <_init>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr

080044d0 <_fini>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr
