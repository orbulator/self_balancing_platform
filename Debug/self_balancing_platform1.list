
self_balancing_platform1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009ac  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ba0  08000ba8  00001ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ba0  08000ba0  00001ba8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ba0  08000ba0  00001ba8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ba0  08000ba8  00001ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba0  08000ba0  00001ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ba4  08000ba4  00001ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000ba8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000ba8  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016cd  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040e  00000000  00000000  000032ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  000036c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000cf  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4b5  00000000  00000000  000038af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f33  00000000  00000000  00021d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb186  00000000  00000000  00023c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ee1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000340  00000000  00000000  0011ee60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000000 	.word	0x20000000
 8000210:	00000000 	.word	0x00000000
 8000214:	08000b88 	.word	0x08000b88

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000004 	.word	0x20000004
 8000230:	08000b88 	.word	0x08000b88

08000234 <main>:
#define ADC_MID  ((ADC_MIN + ADC_MAX) / 2)   // ≈ 1962
#define ADC_SPAN (ADC_MAX - ADC_MIN)         // ≈ 3675



int main() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
	init_clks();
 800023a:	f000 fb2d 	bl	8000898 <init_clks>
	init_LPUART1();
 800023e:	f000 fb6b 	bl	8000918 <init_LPUART1>
	init_adc1();
 8000242:	f000 fbb3 	bl	80009ac <init_adc1>

	uint16_t x = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	807b      	strh	r3, [r7, #2]
	uint16_t y =0;
 800024a:	2300      	movs	r3, #0
 800024c:	803b      	strh	r3, [r7, #0]

	float posX = 0;
 800024e:	f04f 0300 	mov.w	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
	float posY = 0;
 8000254:	f04f 0300 	mov.w	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
	//linePattern      (50.0f,  -50.0f, 500, 3);


	while (1)	{

		get_xy(&x, &y);
 800025a:	463a      	mov	r2, r7
 800025c:	1cbb      	adds	r3, r7, #2
 800025e:	4611      	mov	r1, r2
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fa3b 	bl	80006dc <get_xy>

		posX = 200 * ((float)x - ADC_MID) / ADC_SPAN;
 8000266:	887b      	ldrh	r3, [r7, #2]
 8000268:	ee07 3a90 	vmov	s15, r3
 800026c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000270:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000318 <main+0xe4>
 8000274:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000278:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800031c <main+0xe8>
 800027c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000280:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000320 <main+0xec>
 8000284:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000288:	edc7 7a06 	vstr	s15, [r7, #24]
		posY = 200 * ((float)y - ADC_MID) / ADC_SPAN;
 800028c:	883b      	ldrh	r3, [r7, #0]
 800028e:	ee07 3a90 	vmov	s15, r3
 8000292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000296:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000318 <main+0xe4>
 800029a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800029e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800031c <main+0xe8>
 80002a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002a6:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000320 <main+0xec>
 80002aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ae:	edc7 7a05 	vstr	s15, [r7, #20]
		//		strcat(str, ";");
		//		txLPUART1(str);

		//	    linePattern      (50.0f,  -50.0f, 200, 3);

				float u_x = pid_x(posX);
 80002b2:	ed97 0a06 	vldr	s0, [r7, #24]
 80002b6:	f000 f919 	bl	80004ec <pid_x>
 80002ba:	ed87 0a04 	vstr	s0, [r7, #16]
				float u_y = pid_y(posY);
 80002be:	ed97 0a05 	vldr	s0, [r7, #20]
 80002c2:	f000 f98d 	bl	80005e0 <pid_y>
 80002c6:	ed87 0a03 	vstr	s0, [r7, #12]

				uint32_t dutyX = (uint32_t)(u_x + 90.0f);   // –45→45  →  45→135 deg
 80002ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80002ce:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000324 <main+0xf0>
 80002d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80002d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002da:	ee17 3a90 	vmov	r3, s15
 80002de:	60bb      	str	r3, [r7, #8]
				uint32_t dutyY = (uint32_t)(u_y + 90.0f);   // –45→45  →  45→135 deg
 80002e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80002e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000324 <main+0xf0>
 80002e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80002ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002f0:	ee17 3a90 	vmov	r3, s15
 80002f4:	607b      	str	r3, [r7, #4]

				pwm_blue_x(dutyX);
 80002f6:	68b8      	ldr	r0, [r7, #8]
 80002f8:	f000 f818 	bl	800032c <pwm_blue_x>
				pwm_green_y(dutyY);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f000 f885 	bl	800040c <pwm_green_y>
		//
		//		t += 0.05;
				delay_ms(50);
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
 8000306:	e002      	b.n	800030e <main+0xda>
 8000308:	69fb      	ldr	r3, [r7, #28]
 800030a:	3301      	adds	r3, #1
 800030c:	61fb      	str	r3, [r7, #28]
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <main+0xf4>)
 8000312:	4293      	cmp	r3, r2
 8000314:	ddf8      	ble.n	8000308 <main+0xd4>
	while (1)	{
 8000316:	e7a0      	b.n	800025a <main+0x26>
 8000318:	45000000 	.word	0x45000000
 800031c:	43480000 	.word	0x43480000
 8000320:	45800000 	.word	0x45800000
 8000324:	42b40000 	.word	0x42b40000
 8000328:	0001387f 	.word	0x0001387f

0800032c <pwm_blue_x>:

	}
	return 1;
}

void pwm_blue_x(uint32_t degrees){
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	// Configure PB7 to be driven by the clock
	bitset(RCC->AHB2ENR, 1); 		// enable clock GPIOB
 8000334:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <pwm_blue_x+0xd4>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000338:	4a31      	ldr	r2, [pc, #196]	@ (8000400 <pwm_blue_x+0xd4>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	bitclear(GPIOB->MODER, 14); 	// set PB7 to Alternate Function mode
 8000340:	4b30      	ldr	r3, [pc, #192]	@ (8000404 <pwm_blue_x+0xd8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a2f      	ldr	r2, [pc, #188]	@ (8000404 <pwm_blue_x+0xd8>)
 8000346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800034a:	6013      	str	r3, [r2, #0]
	bitset(GPIOB->MODER, 15);
 800034c:	4b2d      	ldr	r3, [pc, #180]	@ (8000404 <pwm_blue_x+0xd8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a2c      	ldr	r2, [pc, #176]	@ (8000404 <pwm_blue_x+0xd8>)
 8000352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000356:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0xf << 28); 	// clear AFR
 8000358:	4b2a      	ldr	r3, [pc, #168]	@ (8000404 <pwm_blue_x+0xd8>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a29      	ldr	r2, [pc, #164]	@ (8000404 <pwm_blue_x+0xd8>)
 800035e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000362:	6213      	str	r3, [r2, #32]
	bitset(GPIOB->AFR[0], 29); 		// set PB7 to Alternate Function 2 to connect to TIM4_CH2
 8000364:	4b27      	ldr	r3, [pc, #156]	@ (8000404 <pwm_blue_x+0xd8>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a26      	ldr	r2, [pc, #152]	@ (8000404 <pwm_blue_x+0xd8>)
 800036a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800036e:	6213      	str	r3, [r2, #32]

	// Configure TIM4
	bitset(RCC->APB1ENR1, 2); 		// enable the clock for timer 4
 8000370:	4b23      	ldr	r3, [pc, #140]	@ (8000400 <pwm_blue_x+0xd4>)
 8000372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000374:	4a22      	ldr	r2, [pc, #136]	@ (8000400 <pwm_blue_x+0xd4>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6593      	str	r3, [r2, #88]	@ 0x58
	TIM4->PSC |= 160 - 1; 			// divide clock speed by 160
 800037c:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <pwm_blue_x+0xdc>)
 800037e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000380:	4a21      	ldr	r2, [pc, #132]	@ (8000408 <pwm_blue_x+0xdc>)
 8000382:	f043 039f 	orr.w	r3, r3, #159	@ 0x9f
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM4->ARR = 2000 - 1; 			// set the auto load register
 8000388:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <pwm_blue_x+0xdc>)
 800038a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800038e:	62da      	str	r2, [r3, #44]	@ 0x2c
	bitclear(TIM4->CCMR1, 12); 		// set channel 2 to PWM mode 1, CCMR is set to output by default
 8000390:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <pwm_blue_x+0xdc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1c      	ldr	r2, [pc, #112]	@ (8000408 <pwm_blue_x+0xdc>)
 8000396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800039a:	6193      	str	r3, [r2, #24]
	bitset(TIM4->CCMR1, 13);
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <pwm_blue_x+0xdc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a19      	ldr	r2, [pc, #100]	@ (8000408 <pwm_blue_x+0xdc>)
 80003a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a6:	6193      	str	r3, [r2, #24]
	bitset(TIM4->CCMR1, 14);
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <pwm_blue_x+0xdc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a16      	ldr	r2, [pc, #88]	@ (8000408 <pwm_blue_x+0xdc>)
 80003ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003b2:	6193      	str	r3, [r2, #24]
	bitclear(TIM4->CCMR1, 24);
 80003b4:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <pwm_blue_x+0xdc>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a13      	ldr	r2, [pc, #76]	@ (8000408 <pwm_blue_x+0xdc>)
 80003ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003be:	6193      	str	r3, [r2, #24]
	TIM4->CCR2 = (degrees * 1) + 40;// set duty cycle (16 bit #, max val is 65535)
 80003c0:	4a11      	ldr	r2, [pc, #68]	@ (8000408 <pwm_blue_x+0xdc>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3328      	adds	r3, #40	@ 0x28
 80003c6:	6393      	str	r3, [r2, #56]	@ 0x38
	bitset(TIM4->CCMR1, 11); 		// output compare 2 preload enable
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <pwm_blue_x+0xdc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <pwm_blue_x+0xdc>)
 80003ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003d2:	6193      	str	r3, [r2, #24]
	bitset(TIM4->CCER, 4); 			// enable capture/compare 2 output
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <pwm_blue_x+0xdc>)
 80003d6:	6a1b      	ldr	r3, [r3, #32]
 80003d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000408 <pwm_blue_x+0xdc>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6213      	str	r3, [r2, #32]
	TIM4->CNT = 0; 					// reset counter current value
 80003e0:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <pwm_blue_x+0xdc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CR1|= 1; 					// enable the timer
 80003e6:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <pwm_blue_x+0xdc>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a07      	ldr	r2, [pc, #28]	@ (8000408 <pwm_blue_x+0xdc>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6013      	str	r3, [r2, #0]

}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	42020400 	.word	0x42020400
 8000408:	40000800 	.word	0x40000800

0800040c <pwm_green_y>:

void pwm_green_y(uint32_t degrees){
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	// Configure PC7 to be driven by the clock
	bitset(RCC->AHB2ENR, 2); 		// enable clock GPIOC
 8000414:	4b32      	ldr	r3, [pc, #200]	@ (80004e0 <pwm_green_y+0xd4>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000418:	4a31      	ldr	r2, [pc, #196]	@ (80004e0 <pwm_green_y+0xd4>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	bitclear(GPIOC->MODER, 14); 	// set PC7 to Alternate Function mode
 8000420:	4b30      	ldr	r3, [pc, #192]	@ (80004e4 <pwm_green_y+0xd8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a2f      	ldr	r2, [pc, #188]	@ (80004e4 <pwm_green_y+0xd8>)
 8000426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800042a:	6013      	str	r3, [r2, #0]
	bitset(GPIOC->MODER, 15);
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <pwm_green_y+0xd8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a2c      	ldr	r2, [pc, #176]	@ (80004e4 <pwm_green_y+0xd8>)
 8000432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000436:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0xf << 28); 	// clear AFR
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <pwm_green_y+0xd8>)
 800043a:	6a1b      	ldr	r3, [r3, #32]
 800043c:	4a29      	ldr	r2, [pc, #164]	@ (80004e4 <pwm_green_y+0xd8>)
 800043e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000442:	6213      	str	r3, [r2, #32]
	bitset(GPIOC->AFR[0], 29); 		// set PC7 to Alternate Function 2 to connect to TIM3_CH2
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <pwm_green_y+0xd8>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	4a26      	ldr	r2, [pc, #152]	@ (80004e4 <pwm_green_y+0xd8>)
 800044a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800044e:	6213      	str	r3, [r2, #32]

	// Configure TIM3
	bitset(RCC->APB1ENR1, 1); 		// enable the clock for timer 3
 8000450:	4b23      	ldr	r3, [pc, #140]	@ (80004e0 <pwm_green_y+0xd4>)
 8000452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000454:	4a22      	ldr	r2, [pc, #136]	@ (80004e0 <pwm_green_y+0xd4>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	6593      	str	r3, [r2, #88]	@ 0x58
	TIM3->PSC |= 160 - 1; 			// divide clock speed by 160
 800045c:	4b22      	ldr	r3, [pc, #136]	@ (80004e8 <pwm_green_y+0xdc>)
 800045e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000460:	4a21      	ldr	r2, [pc, #132]	@ (80004e8 <pwm_green_y+0xdc>)
 8000462:	f043 039f 	orr.w	r3, r3, #159	@ 0x9f
 8000466:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM3->ARR = 2000 - 1; 			// set the auto load register
 8000468:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <pwm_green_y+0xdc>)
 800046a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800046e:	62da      	str	r2, [r3, #44]	@ 0x2c
	bitclear(TIM3->CCMR1, 12); 		// set channel 2 to PWM mode 1, CCMR is set to output by default
 8000470:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <pwm_green_y+0xdc>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <pwm_green_y+0xdc>)
 8000476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800047a:	6193      	str	r3, [r2, #24]
	bitset(TIM3->CCMR1, 13);
 800047c:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <pwm_green_y+0xdc>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a19      	ldr	r2, [pc, #100]	@ (80004e8 <pwm_green_y+0xdc>)
 8000482:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000486:	6193      	str	r3, [r2, #24]
	bitset(TIM3->CCMR1, 14);
 8000488:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <pwm_green_y+0xdc>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a16      	ldr	r2, [pc, #88]	@ (80004e8 <pwm_green_y+0xdc>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000492:	6193      	str	r3, [r2, #24]
	bitclear(TIM3->CCMR1, 24);
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <pwm_green_y+0xdc>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a13      	ldr	r2, [pc, #76]	@ (80004e8 <pwm_green_y+0xdc>)
 800049a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800049e:	6193      	str	r3, [r2, #24]
	TIM3->CCR2 = (degrees * 1) + 40;// set duty cycle (16 bit #, max val is 65535)
 80004a0:	4a11      	ldr	r2, [pc, #68]	@ (80004e8 <pwm_green_y+0xdc>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	3328      	adds	r3, #40	@ 0x28
 80004a6:	6393      	str	r3, [r2, #56]	@ 0x38
	bitset(TIM3->CCMR1, 11); 		// output compare 2 preload enable
 80004a8:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <pwm_green_y+0xdc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <pwm_green_y+0xdc>)
 80004ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004b2:	6193      	str	r3, [r2, #24]
	bitset(TIM3->CCER, 4); 			// enable capture/compare 2 output
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <pwm_green_y+0xdc>)
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <pwm_green_y+0xdc>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	6213      	str	r3, [r2, #32]
	TIM3->CNT = 0; 					// reset counter current value
 80004c0:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <pwm_green_y+0xdc>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CR1|= 1; 					// enable the timer
 80004c6:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <pwm_green_y+0xdc>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a07      	ldr	r2, [pc, #28]	@ (80004e8 <pwm_green_y+0xdc>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	42020800 	.word	0x42020800
 80004e8:	40000400 	.word	0x40000400

080004ec <pid_x>:
//		pwm_blue_x(  (uint32_t)(u_x + 90.0) );
//		pwm_green_y((uint32_t)(u_y + 90.0) );
//
//	}
//}
float pid_x(float currentX){
 80004ec:	b480      	push	{r7}
 80004ee:	b08b      	sub	sp, #44	@ 0x2c
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Current Error - Proportional term (desired - where we are) */

	static float totalError = 0;
	static float previousError = 0;

	float e = currentX; //(0,0 - Yaxis)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	623b      	str	r3, [r7, #32]

	/* Accumulated Error - Integral term */
	totalError += e;
 80004fa:	4b31      	ldr	r3, [pc, #196]	@ (80005c0 <pid_x+0xd4>)
 80004fc:	ed93 7a00 	vldr	s14, [r3]
 8000500:	edd7 7a08 	vldr	s15, [r7, #32]
 8000504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000508:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <pid_x+0xd4>)
 800050a:	edc3 7a00 	vstr	s15, [r3]

	/* Difference of Error - Derivative term */
	float deltaError = e - previousError;
 800050e:	4b2d      	ldr	r3, [pc, #180]	@ (80005c4 <pid_x+0xd8>)
 8000510:	edd3 7a00 	vldr	s15, [r3]
 8000514:	ed97 7a08 	vldr	s14, [r7, #32]
 8000518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800051c:	edc7 7a07 	vstr	s15, [r7, #28]

	/* Also prepare for next iteration – set previous to Current Error */
	previousError = e;
 8000520:	4a28      	ldr	r2, [pc, #160]	@ (80005c4 <pid_x+0xd8>)
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	6013      	str	r3, [r2, #0]

	/* PID control variables */
	float Kp=0.20;
 8000526:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <pid_x+0xdc>)
 8000528:	61bb      	str	r3, [r7, #24]
	float Ki=0.15;
 800052a:	4b28      	ldr	r3, [pc, #160]	@ (80005cc <pid_x+0xe0>)
 800052c:	617b      	str	r3, [r7, #20]
	float Kd=0.07;
 800052e:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <pid_x+0xe4>)
 8000530:	613b      	str	r3, [r7, #16]
	float T =0.05;
 8000532:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <pid_x+0xe8>)
 8000534:	60fb      	str	r3, [r7, #12]
	float u = 0;
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
	u = Kp * e + Ki * (totalError * T) + Kd * (deltaError / T);
 800053c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000540:	edd7 7a08 	vldr	s15, [r7, #32]
 8000544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000548:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <pid_x+0xd4>)
 800054a:	edd3 6a00 	vldr	s13, [r3]
 800054e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000552:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000556:	edd7 7a05 	vldr	s15, [r7, #20]
 800055a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800055e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000562:	ed97 6a07 	vldr	s12, [r7, #28]
 8000566:	edd7 7a03 	vldr	s15, [r7, #12]
 800056a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800056e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800057a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if(u > 30.0) u = 30.0;
 800057e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000582:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800058a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058e:	dd01      	ble.n	8000594 <pid_x+0xa8>
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <pid_x+0xec>)
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
	if(u < -30.0 ) u = -30.0;
 8000594:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000598:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800059c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a4:	d501      	bpl.n	80005aa <pid_x+0xbe>
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <pid_x+0xf0>)
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24

	return u;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ac:	ee07 3a90 	vmov	s15, r3

}
 80005b0:	eeb0 0a67 	vmov.f32	s0, s15
 80005b4:	372c      	adds	r7, #44	@ 0x2c
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	2000001c 	.word	0x2000001c
 80005c4:	20000020 	.word	0x20000020
 80005c8:	3e4ccccd 	.word	0x3e4ccccd
 80005cc:	3e19999a 	.word	0x3e19999a
 80005d0:	3d8f5c29 	.word	0x3d8f5c29
 80005d4:	3d4ccccd 	.word	0x3d4ccccd
 80005d8:	41f00000 	.word	0x41f00000
 80005dc:	c1f00000 	.word	0xc1f00000

080005e0 <pid_y>:
float pid_y(float currentY){
 80005e0:	b480      	push	{r7}
 80005e2:	b08b      	sub	sp, #44	@ 0x2c
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Current Error - Proportional term (desired - where we are) */
	static float totalError = 0;
	static float previousError = 0;

	float e = -currentY; //(0,0 - Yaxis)
 80005ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ee:	eef1 7a67 	vneg.f32	s15, s15
 80005f2:	edc7 7a08 	vstr	s15, [r7, #32]

	/* Accumulated Error - Integral term */
	totalError += e;
 80005f6:	4b31      	ldr	r3, [pc, #196]	@ (80006bc <pid_y+0xdc>)
 80005f8:	ed93 7a00 	vldr	s14, [r3]
 80005fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <pid_y+0xdc>)
 8000606:	edc3 7a00 	vstr	s15, [r3]


	/* Difference of Error - Derivative term */
	float deltaError = e - previousError;
 800060a:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <pid_y+0xe0>)
 800060c:	edd3 7a00 	vldr	s15, [r3]
 8000610:	ed97 7a08 	vldr	s14, [r7, #32]
 8000614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000618:	edc7 7a07 	vstr	s15, [r7, #28]

	/* Also prepare for next iteration – set previous to Current Error */
	previousError = e;
 800061c:	4a28      	ldr	r2, [pc, #160]	@ (80006c0 <pid_y+0xe0>)
 800061e:	6a3b      	ldr	r3, [r7, #32]
 8000620:	6013      	str	r3, [r2, #0]

	/* PID control variables */
	float Kp=0.20;
 8000622:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <pid_y+0xe4>)
 8000624:	61bb      	str	r3, [r7, #24]
	float Ki=0.15;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <pid_y+0xe8>)
 8000628:	617b      	str	r3, [r7, #20]
	float Kd=0.07;
 800062a:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <pid_y+0xec>)
 800062c:	613b      	str	r3, [r7, #16]
	float T =0.05;
 800062e:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <pid_y+0xf0>)
 8000630:	60fb      	str	r3, [r7, #12]
	float u = 0;
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
	u = Kp * e + Ki * (totalError * T) + Kd * (deltaError / T);
 8000638:	ed97 7a06 	vldr	s14, [r7, #24]
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <pid_y+0xdc>)
 8000646:	edd3 6a00 	vldr	s13, [r3]
 800064a:	edd7 7a03 	vldr	s15, [r7, #12]
 800064e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000652:	edd7 7a05 	vldr	s15, [r7, #20]
 8000656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800065a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800065e:	ed97 6a07 	vldr	s12, [r7, #28]
 8000662:	edd7 7a03 	vldr	s15, [r7, #12]
 8000666:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800066a:	edd7 7a04 	vldr	s15, [r7, #16]
 800066e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000676:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if(u > 30)  u = 30;
 800067a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800067e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	dd01      	ble.n	8000690 <pid_y+0xb0>
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <pid_y+0xf4>)
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
	if(u < -30 ) u = -30;
 8000690:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000694:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800069c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a0:	d501      	bpl.n	80006a6 <pid_y+0xc6>
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <pid_y+0xf8>)
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24

	return u;
 80006a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a8:	ee07 3a90 	vmov	s15, r3

}
 80006ac:	eeb0 0a67 	vmov.f32	s0, s15
 80006b0:	372c      	adds	r7, #44	@ 0x2c
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000024 	.word	0x20000024
 80006c0:	20000028 	.word	0x20000028
 80006c4:	3e4ccccd 	.word	0x3e4ccccd
 80006c8:	3e19999a 	.word	0x3e19999a
 80006cc:	3d8f5c29 	.word	0x3d8f5c29
 80006d0:	3d4ccccd 	.word	0x3d4ccccd
 80006d4:	41f00000 	.word	0x41f00000
 80006d8:	c1f00000 	.word	0xc1f00000

080006dc <get_xy>:
 * 		(purple) x+ ----> PD3 & ADC_CH2 PC1
 * 		(white)  y+ ----> PD4 & ADC_CH1 PC0
 * 		(yellow) x- ----> PD5
 * 		(black)  y- ----> PD6
 */
void get_xy(uint16_t* x, uint16_t* y) {
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	RCC->AHB2ENR |= 1 << 3;		// turn on clock gpiod
 80006e6:	4b69      	ldr	r3, [pc, #420]	@ (800088c <get_xy+0x1b0>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	4a68      	ldr	r2, [pc, #416]	@ (800088c <get_xy+0x1b0>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* measure x axis voltage */
	bitclear(GPIOD->MODER, 8);		// set y+ PD4 tristate
 80006f2:	4b67      	ldr	r3, [pc, #412]	@ (8000890 <get_xy+0x1b4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a66      	ldr	r2, [pc, #408]	@ (8000890 <get_xy+0x1b4>)
 80006f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80006fc:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 9);
 80006fe:	4b64      	ldr	r3, [pc, #400]	@ (8000890 <get_xy+0x1b4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a63      	ldr	r2, [pc, #396]	@ (8000890 <get_xy+0x1b4>)
 8000704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000708:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 4);
 800070a:	4b61      	ldr	r3, [pc, #388]	@ (8000890 <get_xy+0x1b4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a60      	ldr	r2, [pc, #384]	@ (8000890 <get_xy+0x1b4>)
 8000710:	f023 0310 	bic.w	r3, r3, #16
 8000714:	6153      	str	r3, [r2, #20]

	bitclear(GPIOD->MODER, 12);		// set y- PD6 tristate
 8000716:	4b5e      	ldr	r3, [pc, #376]	@ (8000890 <get_xy+0x1b4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <get_xy+0x1b4>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 13);
 8000722:	4b5b      	ldr	r3, [pc, #364]	@ (8000890 <get_xy+0x1b4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a5a      	ldr	r2, [pc, #360]	@ (8000890 <get_xy+0x1b4>)
 8000728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800072c:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 6);
 800072e:	4b58      	ldr	r3, [pc, #352]	@ (8000890 <get_xy+0x1b4>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a57      	ldr	r2, [pc, #348]	@ (8000890 <get_xy+0x1b4>)
 8000734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000738:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 6);		// set x+ PD3 out
 800073a:	4b55      	ldr	r3, [pc, #340]	@ (8000890 <get_xy+0x1b4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a54      	ldr	r2, [pc, #336]	@ (8000890 <get_xy+0x1b4>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 7);
 8000746:	4b52      	ldr	r3, [pc, #328]	@ (8000890 <get_xy+0x1b4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a51      	ldr	r2, [pc, #324]	@ (8000890 <get_xy+0x1b4>)
 800074c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000750:	6013      	str	r3, [r2, #0]
	bitset(GPIOD->ODR, 3);			// set x+ PD3  high (3.3v)
 8000752:	4b4f      	ldr	r3, [pc, #316]	@ (8000890 <get_xy+0x1b4>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a4e      	ldr	r2, [pc, #312]	@ (8000890 <get_xy+0x1b4>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 10);		// set x- PD5 out
 800075e:	4b4c      	ldr	r3, [pc, #304]	@ (8000890 <get_xy+0x1b4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a4b      	ldr	r2, [pc, #300]	@ (8000890 <get_xy+0x1b4>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 11);
 800076a:	4b49      	ldr	r3, [pc, #292]	@ (8000890 <get_xy+0x1b4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a48      	ldr	r2, [pc, #288]	@ (8000890 <get_xy+0x1b4>)
 8000770:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000774:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 5);		// set x- PD5  low
 8000776:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <get_xy+0x1b4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a45      	ldr	r2, [pc, #276]	@ (8000890 <get_xy+0x1b4>)
 800077c:	f023 0320 	bic.w	r3, r3, #32
 8000780:	6153      	str	r3, [r2, #20]

	bitset(ADC1->CR, 2);			// Start ADC conversion
 8000782:	4b44      	ldr	r3, [pc, #272]	@ (8000894 <get_xy+0x1b8>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	4a43      	ldr	r2, [pc, #268]	@ (8000894 <get_xy+0x1b8>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6093      	str	r3, [r2, #8]
	while (bitcheck(ADC1->ISR, 2) == 0) ; 	// wait for conversion complete
 800078e:	bf00      	nop
 8000790:	4b40      	ldr	r3, [pc, #256]	@ (8000894 <get_xy+0x1b8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	089b      	lsrs	r3, r3, #2
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f8      	beq.n	8000790 <get_xy+0xb4>
	*x = ADC1->DR & 0xfff;			// read adc val (clears EOC flag)
 800079e:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <get_xy+0x1b8>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	801a      	strh	r2, [r3, #0]

	/* measure y axis voltage */
	bitclear(GPIOD->MODER, 6);		// set x+ PD3 tristate
 80007ae:	4b38      	ldr	r3, [pc, #224]	@ (8000890 <get_xy+0x1b4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a37      	ldr	r2, [pc, #220]	@ (8000890 <get_xy+0x1b4>)
 80007b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007b8:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 7);
 80007ba:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <get_xy+0x1b4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a34      	ldr	r2, [pc, #208]	@ (8000890 <get_xy+0x1b4>)
 80007c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007c4:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 3);
 80007c6:	4b32      	ldr	r3, [pc, #200]	@ (8000890 <get_xy+0x1b4>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a31      	ldr	r2, [pc, #196]	@ (8000890 <get_xy+0x1b4>)
 80007cc:	f023 0308 	bic.w	r3, r3, #8
 80007d0:	6153      	str	r3, [r2, #20]

	bitclear(GPIOD->MODER, 10);		// set x- PD5 tristate
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <get_xy+0x1b4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000890 <get_xy+0x1b4>)
 80007d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007dc:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 11);
 80007de:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <get_xy+0x1b4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000890 <get_xy+0x1b4>)
 80007e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80007e8:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR, 5);
 80007ea:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <get_xy+0x1b4>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a28      	ldr	r2, [pc, #160]	@ (8000890 <get_xy+0x1b4>)
 80007f0:	f023 0320 	bic.w	r3, r3, #32
 80007f4:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 8);		// set y+ PD4 out
 80007f6:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <get_xy+0x1b4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a25      	ldr	r2, [pc, #148]	@ (8000890 <get_xy+0x1b4>)
 80007fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000800:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 9);
 8000802:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <get_xy+0x1b4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a22      	ldr	r2, [pc, #136]	@ (8000890 <get_xy+0x1b4>)
 8000808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800080c:	6013      	str	r3, [r2, #0]
	bitset(GPIOD->ODR, 4);			// set D4 (y+) high
 800080e:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <get_xy+0x1b4>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a1f      	ldr	r2, [pc, #124]	@ (8000890 <get_xy+0x1b4>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6153      	str	r3, [r2, #20]

	bitset(GPIOD->MODER, 12);		// set y- PD6 out
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <get_xy+0x1b4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <get_xy+0x1b4>)
 8000820:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000824:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->MODER, 13);
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <get_xy+0x1b4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <get_xy+0x1b4>)
 800082c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000830:	6013      	str	r3, [r2, #0]
	bitclear(GPIOD->ODR,6);			// set D6 (y-) low
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <get_xy+0x1b4>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <get_xy+0x1b4>)
 8000838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800083c:	6153      	str	r3, [r2, #20]

	while (bitcheck(ADC1->ISR, 2) == 0) ; 	// wait for conversion complete
 800083e:	bf00      	nop
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <get_xy+0x1b8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f8      	beq.n	8000840 <get_xy+0x164>
	*y = ADC1->DR & 0xfff;			// read adc val (clears EOC flag)
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <get_xy+0x1b8>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	b29b      	uxth	r3, r3
 8000854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000858:	b29a      	uxth	r2, r3
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	801a      	strh	r2, [r3, #0]
	delay_ms(1);
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	e002      	b.n	800086a <get_xy+0x18e>
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3301      	adds	r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000870:	dbf8      	blt.n	8000864 <get_xy+0x188>
	bitclear(ADC1->ISR, 3);			// clear EOS flag
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <get_xy+0x1b8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <get_xy+0x1b8>)
 8000878:	f023 0308 	bic.w	r3, r3, #8
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	42020c00 	.word	0x42020c00
 8000894:	42028000 	.word	0x42028000

08000898 <init_clks>:
		for(int j =0; j<10000; j++);
	}
}

// enable clocks
void init_clks() {
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= 1 << 28; 	// enable power interface clock by setting PWREN bits
 800089c:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <init_clks+0x7c>)
 800089e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <init_clks+0x7c>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR2 |= 0x1;		// enable LPUART1EN clock
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <init_clks+0x7c>)
 80008aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008ac:	4a19      	ldr	r2, [pc, #100]	@ (8000914 <init_clks+0x7c>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
	RCC->CCIPR1 |= 0x800;		// 01 for HSI16 clock to be used for LPUART1
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <init_clks+0x7c>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <init_clks+0x7c>)
 80008bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR1 &= ~(0x400);
 80008c4:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <init_clks+0x7c>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <init_clks+0x7c>)
 80008cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CFGR |= 0x1;			// use HSI16 as SYSCLK
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <init_clks+0x7c>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <init_clks+0x7c>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6093      	str	r3, [r2, #8]
	RCC->CR |= 0x161;			// MSI clock enable; MSI = 4 MHz; HSI16 clock enable
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <init_clks+0x7c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <init_clks+0x7c>)
 80008e6:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6013      	str	r3, [r2, #0]
	RCC->AHB2ENR |= 1<<6;		// enable clock to GPIOG
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <init_clks+0x7c>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <init_clks+0x7c>)
 80008f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	bitset(RCC->APB1ENR2, 0);	// enable clock to LPUART1
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <init_clks+0x7c>)
 80008fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <init_clks+0x7c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <init_LPUART1>:

/* PG7 is connected to LPUART tx PG8 is connect to LPUART rx */
void init_LPUART1() {
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	PWR->CR2 |= 0x200;			// power up port g / enable VDDIO2 Independent I/O supply
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <init_LPUART1+0x88>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	4a1f      	ldr	r2, [pc, #124]	@ (80009a0 <init_LPUART1+0x88>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000926:	6053      	str	r3, [r2, #4]
	/* tx config */
	GPIOG->MODER &= ~(0x3<<14); // clear the two bits
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <init_LPUART1+0x8c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <init_LPUART1+0x8c>)
 800092e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000932:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= 0x2 << 14;	// set mode to alternate function
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <init_LPUART1+0x8c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1a      	ldr	r2, [pc, #104]	@ (80009a4 <init_LPUART1+0x8c>)
 800093a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800093e:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[0] &= ~(0xf<<28);// clear 4 bits for PG7
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <init_LPUART1+0x8c>)
 8000942:	6a1b      	ldr	r3, [r3, #32]
 8000944:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <init_LPUART1+0x8c>)
 8000946:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800094a:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= 0x8<<28;	// set PG7 to alternate function 8
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <init_LPUART1+0x8c>)
 800094e:	6a1b      	ldr	r3, [r3, #32]
 8000950:	4a14      	ldr	r2, [pc, #80]	@ (80009a4 <init_LPUART1+0x8c>)
 8000952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000956:	6213      	str	r3, [r2, #32]
	/* rx config */
	GPIOG->MODER &= ~(0x3<<16); // clear the two bits
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <init_LPUART1+0x8c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <init_LPUART1+0x8c>)
 800095e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000962:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= 0x2 << 16;	// set mode to alternate function
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <init_LPUART1+0x8c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <init_LPUART1+0x8c>)
 800096a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096e:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[1] &= ~(0xf);	// clear 4 bits for PG8
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <init_LPUART1+0x8c>)
 8000972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000974:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <init_LPUART1+0x8c>)
 8000976:	f023 030f 	bic.w	r3, r3, #15
 800097a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= 0x8;		// set PG8 to alternate function 8
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <init_LPUART1+0x8c>)
 800097e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000980:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <init_LPUART1+0x8c>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	6253      	str	r3, [r2, #36]	@ 0x24

	// BRR = 256*16000000/57600 = 71111
	LPUART1->BRR = 4444; 				// set baud rate to 921600
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <init_LPUART1+0x90>)
 800098a:	f241 125c 	movw	r2, #4444	@ 0x115c
 800098e:	60da      	str	r2, [r3, #12]
	LPUART1->CR1 = 0xD; 				// 0x1101 --> TX, RX are enabled and UART is Enabled.
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <init_LPUART1+0x90>)
 8000992:	220d      	movs	r2, #13
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40007000 	.word	0x40007000
 80009a4:	42021800 	.word	0x42021800
 80009a8:	40008000 	.word	0x40008000

080009ac <init_adc1>:
/**
 * Initialize ADC1 to read 2 values connected to CH1 and CH2.
 *  	CH1 -> PC0
 *  	CH2 -> PC1
 */
void init_adc1() {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
	bitset(RCC->AHB2ENR, 13); 	// enable ADC clock
 80009b2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <init_adc1+0xc0>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a6c <init_adc1+0xc0>)
 80009b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->CCIPR1 |= 0x3 << 28; 	// route SYSCLK HCLK to ADC
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <init_adc1+0xc0>)
 80009c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c4:	4a29      	ldr	r2, [pc, #164]	@ (8000a6c <init_adc1+0xc0>)
 80009c6:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80009ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	bitclear(ADC1->CR, 29);		// exit deep power mode by setting DEEPPWD = 0 in control register
 80009ce:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <init_adc1+0xc4>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <init_adc1+0xc4>)
 80009d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80009d8:	6093      	str	r3, [r2, #8]
	bitset(ADC1->CR, 28); 		// turn on the ADC voltage reguator
 80009da:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <init_adc1+0xc4>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	4a24      	ldr	r2, [pc, #144]	@ (8000a70 <init_adc1+0xc4>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	6093      	str	r3, [r2, #8]

	bitset(ADC1->CFGR, 12); 	// OVRMOD: Disable overrun mode (ADC keeps going even if user does not read)
 80009e6:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <init_adc1+0xc4>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <init_adc1+0xc4>)
 80009ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009f0:	60d3      	str	r3, [r2, #12]
	bitset(ADC1->ISR, 0); 		// ADC Ready
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <init_adc1+0xc4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <init_adc1+0xc4>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6013      	str	r3, [r2, #0]

	delay_ms(10);				// wait for voltage regulator to stabilize
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	e002      	b.n	8000a0a <init_adc1+0x5e>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3301      	adds	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8000a10:	dbf8      	blt.n	8000a04 <init_adc1+0x58>

	/* Sequencer Setup */
	bitset(ADC1->SQR1, 0);		// set sequence length to 2
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <init_adc1+0xc4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <init_adc1+0xc4>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 6);  	// set 1st conversion to ch1 0b0001
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <init_adc1+0xc4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <init_adc1+0xc4>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
	bitset(ADC1->SQR1, 13);		// set 2nd conversion to ch2 0b0010
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <init_adc1+0xc4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <init_adc1+0xc4>)
 8000a30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC1->SMPR1 |= 0b000111111000;	// set sample speed to 700 ADC clock cycles
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <init_adc1+0xc4>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <init_adc1+0xc4>)
 8000a3c:	f443 73fc 	orr.w	r3, r3, #504	@ 0x1f8
 8000a40:	6153      	str	r3, [r2, #20]

	ADC1->CR |= 1 ;				// enable ADC
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <init_adc1+0xc4>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <init_adc1+0xc4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6093      	str	r3, [r2, #8]

	while (bitcheck(ADC1->ISR, 0) == 0);	// wait until ADC is ready
 8000a4e:	bf00      	nop
 8000a50:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <init_adc1+0xc4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f9      	beq.n	8000a50 <init_adc1+0xa4>
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	42028000 	.word	0x42028000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af0:	f7ff ffea 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000af4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000af6:	e003      	b.n	8000b00 <LoopCopyDataInit>

08000af8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000afa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000afc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000afe:	3104      	adds	r1, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b00:	480a      	ldr	r0, [pc, #40]	@ (8000b2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b08:	d3f6      	bcc.n	8000af8 <CopyDataInit>
	ldr	r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b0c:	e002      	b.n	8000b14 <LoopFillZerobss>

08000b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b10:	f842 3b04 	str.w	r3, [r2], #4

08000b14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <LoopForever+0x16>)
	cmp	r2, r3
 8000b16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b18:	d3f9      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b1a:	f000 f811 	bl	8000b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fb89 	bl	8000234 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b24:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000b28:	08000ba8 	.word	0x08000ba8
	ldr	r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b30:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000b34:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000b38:	2000002c 	.word	0x2000002c

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <__libc_init_array>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4d0d      	ldr	r5, [pc, #52]	@ (8000b78 <__libc_init_array+0x38>)
 8000b44:	2600      	movs	r6, #0
 8000b46:	4c0d      	ldr	r4, [pc, #52]	@ (8000b7c <__libc_init_array+0x3c>)
 8000b48:	1b64      	subs	r4, r4, r5
 8000b4a:	10a4      	asrs	r4, r4, #2
 8000b4c:	42a6      	cmp	r6, r4
 8000b4e:	d109      	bne.n	8000b64 <__libc_init_array+0x24>
 8000b50:	4d0b      	ldr	r5, [pc, #44]	@ (8000b80 <__libc_init_array+0x40>)
 8000b52:	2600      	movs	r6, #0
 8000b54:	4c0b      	ldr	r4, [pc, #44]	@ (8000b84 <__libc_init_array+0x44>)
 8000b56:	f000 f817 	bl	8000b88 <_init>
 8000b5a:	1b64      	subs	r4, r4, r5
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	42a6      	cmp	r6, r4
 8000b60:	d105      	bne.n	8000b6e <__libc_init_array+0x2e>
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b68:	3601      	adds	r6, #1
 8000b6a:	4798      	blx	r3
 8000b6c:	e7ee      	b.n	8000b4c <__libc_init_array+0xc>
 8000b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b72:	3601      	adds	r6, #1
 8000b74:	4798      	blx	r3
 8000b76:	e7f2      	b.n	8000b5e <__libc_init_array+0x1e>
 8000b78:	08000ba0 	.word	0x08000ba0
 8000b7c:	08000ba0 	.word	0x08000ba0
 8000b80:	08000ba0 	.word	0x08000ba0
 8000b84:	08000ba4 	.word	0x08000ba4

08000b88 <_init>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	bf00      	nop
 8000b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8e:	bc08      	pop	{r3}
 8000b90:	469e      	mov	lr, r3
 8000b92:	4770      	bx	lr

08000b94 <_fini>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr
